<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xLee&#39;s blog</title>
  
  <subtitle>专注网站建设优化，做互联网的搬砖人</subtitle>
  <link href="https://iexlee.github.io/atom.xml" rel="self"/>
  
  <link href="https://iexlee.github.io/"/>
  <updated>2023-08-19T15:53:01.904Z</updated>
  <id>https://iexlee.github.io/</id>
  
  <author>
    <name>李翔的博客</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git (3)</title>
    <link href="https://iexlee.github.io/43%E3%80%81Git%E6%95%99%E7%A8%8B.html"/>
    <id>https://iexlee.github.io/43%E3%80%81Git%E6%95%99%E7%A8%8B.html</id>
    <published>2022-09-02T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<img src="/medias/img_Git_assets/gitlogo.png"/><hr/># git 教程<h1 id="9-远程仓库"><a href="#9-远程仓库" class="headerlink" title="9. 远程仓库"></a>9. 远程仓库</h1><p>我们的代码不能总是放在本地,因为总是放在本地,一旦电脑出现故障,数据将丢失,怎么共享呢,这里我们需要一个服务器, 我们可以把代码放到服务器上,然后让别人下载,这样我峨嵋你既可以备份代码,也可以进行团队协作开发</p><h2 id="9-0-局域网仓库"><a href="#9-0-局域网仓库" class="headerlink" title="9.0 局域网仓库"></a>9.0 局域网仓库</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">实际上我们可以搭建一个单间的局域网服务器共享我们的代码<br></code></pre></td></tr></table></figure><h3 id="9-0-1本地相对路径-多个文件夹之间共享代码"><a href="#9-0-1本地相对路径-多个文件夹之间共享代码" class="headerlink" title="9.0.1本地相对路径,多个文件夹之间共享代码"></a>9.0.1本地相对路径,多个文件夹之间共享代码</h3><p><img src="/medias/img_Git_assets/1572535798760.png" alt="1572535798760"></p><h3 id="9-0-2开启局域网共享代码"><a href="#9-0-2开启局域网共享代码" class="headerlink" title="9.0.2开启局域网共享代码"></a>9.0.2开启局域网共享代码</h3><p><img src="/medias/img_Git_assets/1572535921581.png" alt="1572535921581"></p><p><img src="/medias/img_Git_assets/1572536029899.png" alt="1572536029899"></p><p>局域网这种共享是没有安全控制的,都可以访问,如果想要搭建一个可以控制权限的服务器需要借助第三方软件</p><p>gitblit,可以自行搜索搭建</p><h2 id="9-1-常用远程仓库托管服务"><a href="#9-1-常用远程仓库托管服务" class="headerlink" title="9.1 常用远程仓库托管服务"></a>9.1 常用远程仓库托管服务</h2><p>除了自己搭建服务器,其实我们可以使用一些免费的远程仓库,远程仓库有很多,常见的免费互联网远程仓库托管服务如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">www<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br>www<span class="hljs-selector-class">.gitee</span><span class="hljs-selector-class">.com</span><br>www<span class="hljs-selector-class">.gitlab</span><span class="hljs-selector-class">.com</span><br><br>github  是一个基于git实现在线代码托管的仓库，向互联网开放，企业版要收钱。<br>gitee    即码云，是 oschina 免费给企业用的，不用自己搭建环境。<br>gitlab   类似 github，一般用于在企业内搭建git私服，要自己搭环境。<br><br><span class="hljs-function"><span class="hljs-title">GitHub</span><span class="hljs-params">(gitee)</span></span>、GitLab 不同点：<br><span class="hljs-number">1</span>、GitHub如果使用私有仓库是需要付费的，(<span class="hljs-number">2019</span>年开始私有仓库也是免费的但是只能<span class="hljs-number">3</span>个人协同开发,想要更多需要收费)，GitLab可以在上面搭建私人的免费仓库。<br><span class="hljs-number">2</span>、GitLab让开发团队对他们的代码仓库拥有更多的控制，相对于GitHub，它有不少的特色：<br>    (<span class="hljs-number">1</span>)允许免费设置仓库权限<br>    (<span class="hljs-number">2</span>)允许用户选择分享一个project的部分代码<br>    (<span class="hljs-number">3</span>)允许用户设置project的获取权限，进一步提升安全性<br>    (<span class="hljs-number">4</span>)可以设置获取到团队整体的改进进度<br>    (<span class="hljs-number">5</span>)通过innersourcing让不在权限范围内的人访问不到该资源<br><br></code></pre></td></tr></table></figure><p>鉴于国内用户可能网络不好,这里我们使用gitee(码云) 来讲解我们的课程,其他可自行找资料学习非常类似</p><h2 id="9-2-码云账号注册"><a href="#9-2-码云账号注册" class="headerlink" title="9.2  码云账号注册"></a>9.2  码云账号注册</h2><p><img src="/medias/img_Git_assets/1572267659865.png" alt="1572267659865"></p><p>填写邮箱发送验证码,然后可以注册账号,主页如下</p><p><img src="/medias/img_Git_assets/1572268091948.png" alt="1572268091948"></p><h2 id="9-3-创建远程仓库"><a href="#9-3-创建远程仓库" class="headerlink" title="9.3 创建远程仓库"></a>9.3 创建远程仓库</h2><p><img src="/medias/img_Git_assets/1572274044100.png" alt="1572274044100"></p><p><img src="/medias/img_Git_assets/224637.png"></p><p>各个类型仓库之间的区别</p><p><img src="/medias/img_Git_assets/1572274100802.png" alt="1572274100802"></p><p><img src="/medias/img_Git_assets/1572274406371.png" alt="1572274406371"></p><h2 id="9-4-把本地代码推送到远端"><a href="#9-4-把本地代码推送到远端" class="headerlink" title="9.4  把本地代码推送到远端"></a>9.4  把本地代码推送到远端</h2><p><img src="/medias/img_Git_assets/1572275202869.png" alt="1572275202869"></p><p><img src="/medias/img_Git_assets/1572275492670.png" alt="1572275492670"></p><p><img src="/medias/img_Git_assets/1572275546739.png" alt="1572275546739"></p><p>此时我们刷新仓库发现代码已经存在了</p><p>我们填写的用户信息,会被保存在本地,下次提交无需填写用户名和密码</p><p><img src="/medias/img_Git_assets/1572277483698.png" alt="1572277483698"></p><h2 id="9-5-从远程仓库克隆代码"><a href="#9-5-从远程仓库克隆代码" class="headerlink" title="9.5  从远程仓库克隆代码"></a>9.5  从远程仓库克隆代码</h2><p>我们同样可以从库下载代码,</p><p>新建一个文件夹 repo2 ,进入然后进行如下操作</p><p><img src="/medias/img_Git_assets/1572275958701.png" alt="1572275958701"></p><p>此时我们发现我们的代码已经被下载下来了</p><h2 id="9-6-代码的修改与提交-查看历史"><a href="#9-6-代码的修改与提交-查看历史" class="headerlink" title="9.6  代码的修改与提交,查看历史"></a>9.6  代码的修改与提交,查看历史</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-number">1</span>)此时我们修改代码就不能仅仅是提交到本地了,提交完毕应该推送到远端服务器<br><span class="hljs-number">2</span>)此时如果别人从远端仓库下载最新的代码其实是可以看到我们的代码修改记录的<br>   <span class="hljs-function"><span class="hljs-title">git</span> --&gt;</span>显示日志<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572277139243.png" alt="1572277139243"></p><h2 id="9-7-ssh-连接概述"><a href="#9-7-ssh-连接概述" class="headerlink" title="9.7 ssh 连接概述"></a>9.7 ssh 连接概述</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">实际上git 不仅仅支持用户名密码方式的配置,可以有另外一种相对更加安全的配置即ssh 方式配置<br></code></pre></td></tr></table></figure><p> ssh 方式的底层原理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh连接地城是RAS加密算法,又称非对称加密,是一种现在公认的最安全的加密方式<br>数学基础好的同学可以研究一下<br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/cjm123/</span>p/<span class="hljs-number">8243424</span>.html<br><br>公钥私钥加密可以看作古代 的<span class="hljs-string">&quot;虎符&quot;</span> , 我们本地电脑有一份,远程服务器有一份, 只要 <span class="hljs-string">&quot;虎符&quot;</span> 核对通过 表示身份无误,可以执行提交等操作,无需输入用户名密码<br></code></pre></td></tr></table></figure><h2 id="9-8-ssh-密钥的生成"><a href="#9-8-ssh-密钥的生成" class="headerlink" title="9.8 ssh 密钥的生成"></a>9.8 ssh 密钥的生成</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#生成公钥私钥</span><br> ssh-keygen -t rsa<br> 一直回车即可<br> 会默认用户目录 <span class="hljs-string">.ssh</span> 目录生成一个默认的id_rsa文件 和id_rsa.pub<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572520139221.png" alt="1572520139221"></p><p><img src="/medias/img_Git_assets/1572520293700.png" alt="1572520293700"></p><h2 id="9-9-ssh-密钥配置"><a href="#9-9-ssh-密钥配置" class="headerlink" title="9.9 ssh 密钥配置"></a>9.9 ssh 密钥配置</h2><p><img src="/medias/img_Git_assets/1572520396806.png" alt="1572520396806"></p><h2 id="9-10-ssh-方式克隆-x2F-提交代码"><a href="#9-10-ssh-方式克隆-x2F-提交代码" class="headerlink" title="9.10 ssh 方式克隆&#x2F;提交代码:"></a>9.10 ssh 方式克隆&#x2F;提交代码:</h2><p>  配置完成之后我们克隆我们之前的项目</p><p><img src="/medias/img_Git_assets/1572522118610.png" alt="1572522118610"></p><p>修改后直接提交推送即可成功,,git 会自动去.ssh 目录找我们的私钥进行匹配</p><h2 id="9-11-远程仓库的其他操作"><a href="#9-11-远程仓库的其他操作" class="headerlink" title="9.11. 远程仓库的其他操作"></a>9.11. 远程仓库的其他操作</h2><p>概念</p><p><img src="/medias/img_Git_assets/1572522822946.png" alt="1572522822946"></p><p>当我们从 gitee 上查看别人的项目的时候我们可能会看到上图中的按钮</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">指数:</span><br>是gitee 网站根据当前项目的各项指标计算出来的一个值<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572523045267.png" alt="1572523045267"></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Star</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">点赞, 注意这里的并不像朋友圈那样容易获得点赞,圈内人还是很克制的</span><br><span class="hljs-attribute">Watch</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-attribute">如果你watch 了某个开源项目,那么这个项目后续所有的改动你将收到通知</span><br><span class="hljs-attribute">Fork </span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">将别人的代码克隆到你自己的仓库</span><br><span class="hljs-attribute">作用一</span><span class="hljs-punctuation">:</span> <span class="hljs-string">如果担心某个优秀的项目别人突然有一天不开源了,你可以fork到自己的仓库</span><br>    <span class="hljs-attribute">作用二</span><span class="hljs-punctuation">:</span> <span class="hljs-string">修改别人的代码</span><br>  以linux 为例,你其实不是linux 社区的开发人员,但是你 又想为linux 开发做贡献(维护代码)<br>   你并没有权限,怎们办?<br>   你可以先把linux 开源的代码 fork 到你自己的仓库,此时你就可以操作自己的仓库进行修改代码了<br>   如何让别人合并你修改好的代码呢? <br>    我们注意项目的上方有一个 &quot; Pull Request&quot; 这个按钮的意思是 &quot;请求求别人合并你修改的代码&quot;<br>    当我们发起一个 Pull Request 时 , 项目的拥有者将收到 Pull Request请求,然后将根据你提交代码的质量决定是否合并<br></code></pre></td></tr></table></figure><p>项目操作</p><p>1)我们可以删除修改我们自己仓库的基本信息</p><ol start="2"><li>我们可以邀请其他人成为项目的开发人员或者管理人员</li></ol><p><img src="/medias/img_Git_assets/1572523819666.png" alt="1572523819666"></p><p>我们可以删除修改我们自己仓库的基本信息</p><p><img src="/medias/img_Git_assets/1572523928774.png" alt="1572523928774"></p><p><img src="/medias/img_Git_assets/1572523968992.png" alt="1572523968992"></p><h2 id="9-12-利用-gitee-搭建个人主页"><a href="#9-12-利用-gitee-搭建个人主页" class="headerlink" title="9.12 利用 gitee 搭建个人主页"></a>9.12 利用 gitee 搭建个人主页</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1</span>)将静态资源上传至仓库<br><span class="hljs-number">2</span>) 选择服务 pages 即可部署<br>注意 <span class="hljs-number">1</span>)必须有个<span class="hljs-keyword">index</span>.html 文件<br>注意 <span class="hljs-number">2</span>) 只能搭建静态网站,动态网站请租赁服务器搭建提供服务<br>注意 <span class="hljs-number">3</span>) gitee 要求必须绑定手机号<br><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572525575923.png" alt="1572525575923"></p><p>点击开启后gitee 会自动生成一个域名</p><p><img src="/medias/img_Git_assets/1572526097257.png" alt="1572526097257"></p><p>直接访问即可</p><p>此时我们已经在git 上部署了一个静态的网站</p><p><img src="/medias/img_Git_assets/1572526136074.png" alt="1572526136074"></p><h1 id="10-命令行–-git基本操作"><a href="#10-命令行–-git基本操作" class="headerlink" title="10.命令行– git基本操作"></a>10.命令行– git基本操作</h1><h2 id="10-1-介绍"><a href="#10-1-介绍" class="headerlink" title="10.1  介绍"></a>10.1  介绍</h2><p>​上述我们的操作 使用的 是客户端TortoiseGit 操作的git ,实际上底层依旧是使用的命令行帮我们执行, 在早期 git 并没有窗口化工具,开发人员只能使用命令行模式</p><p>  实际上,如果你掌握并熟练使用了命令行模式操作git 的话,你会发现某些操作命令行比窗口化操作要简单</p><p>所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git</p><p>##10.2 环境配置</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置用户信息</span> <br>   git config --global user.name “itcast”<br>   git config --global user.email “itcast@itcast.cn”<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看配置信息</span><br>   git config --list<br>   git config user.name<br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过上面的命令设置的信息会保存在~/.gitconfig文件中</span><br><br></code></pre></td></tr></table></figure><p>##10.3  初始化本地仓库 init</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化仓库带工作区</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化仓库不带工作区</span><br>git init --bare  <br></code></pre></td></tr></table></figure><p>##10.4 克隆 clone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库克隆</span><br>git clone 远程Git仓库地址 <br>例如: git clone https://gitee.com/itcast/gittest.git<br></code></pre></td></tr></table></figure><p>##10.5  查看状态 status</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>git status <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看状态 使输出信息更加简洁</span><br>git status –s <br></code></pre></td></tr></table></figure><p>##10.6 add </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将未跟踪的文件加入暂存区</span><br>git add  &lt;文件名&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">将暂存区的文件取消暂存 (取消 add )</span><br>git reset  &lt;文件名&gt;  <br><br></code></pre></td></tr></table></figure><p>##10.7 commit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git commit 将暂存区的文件修改提交到本地仓库</span><br>git commit -m &quot;日志信息&quot;  &lt;文件名&gt;  <br><br></code></pre></td></tr></table></figure><p>##10.8 删除 rm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从本地工作区 删除文件</span><br>git rm &lt;文件名&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果本工作区库误删, 想要回退</span><br>git checkout head &lt;文件名&gt;  <br></code></pre></td></tr></table></figure><h1 id="11-命令行–git-远程仓库操作"><a href="#11-命令行–git-远程仓库操作" class="headerlink" title="11. 命令行–git 远程仓库操作"></a>11. 命令行–git 远程仓库操作</h1><h2 id="11-1-查看远程"><a href="#11-1-查看远程" class="headerlink" title="11.1    查看远程"></a>11.1    查看远程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程  列出指定的每一个远程服务器的简写</span><br>git remote <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程 , 列出 简称和地址</span><br>git remote  -v  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程仓库详细地址</span><br>git remote show  &lt;仓库简称&gt;<br><br></code></pre></td></tr></table></figure><h2 id="11-2-添加-x2F-移除远测仓库"><a href="#11-2-添加-x2F-移除远测仓库" class="headerlink" title="11.2 添加&#x2F;移除远测仓库"></a>11.2 添加&#x2F;移除远测仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加远程仓库</span><br>git remote add &lt;shortname&gt; &lt;url&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)</span><br>git remote rm &lt;shortname&gt; <br></code></pre></td></tr></table></figure><h2 id="11-3-从远程仓库获取代码"><a href="#11-3-从远程仓库获取代码" class="headerlink" title="11.3 从远程仓库获取代码"></a>11.3 从远程仓库获取代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库克隆</span><br>git clone &lt;url&gt; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)</span><br>git fetch  &lt;shortname&gt;  &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">手动合并  把某个版本的某个分支合并到当前工作区</span><br>git merge &lt;shortname&gt;/&lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+merge</span><br>git pull  &lt;shortname&gt;  &lt;分支名称&gt;<br>git pull  &lt;shortname&gt;  &lt;分支名称&gt;  --allow-unrelated-histories  #  强制拉取合并<br></code></pre></td></tr></table></figure><p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories (如上 命令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将本地仓库推送至远程仓库的某个分支</span><br>git push [remote-name] [branch-name]<br></code></pre></td></tr></table></figure><h1 id="12-命令行–-分支"><a href="#12-命令行–-分支" class="headerlink" title="12.  命令行– 分支"></a>12.  命令行– 分支</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认 分支名称为 master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支</span><br>git branch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有远程分支</span><br>git branch -r<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span><br>git branch -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建分支</span><br>git branch &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换分支</span> <br>git checkout &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支(如果分支已经修改过,则不允许删除)</span><br>git branch -d  &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制删除分支</span><br>git branch -D  &lt;分支名&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">提交分支至远程仓库</span><br>git push &lt;仓库简称&gt; &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并分支 将其他分支合并至当前工作区</span><br>git merge &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程仓库分支</span><br>git push origin –d branchName<br></code></pre></td></tr></table></figure><h1 id="13-命令行-–tag"><a href="#13-命令行-–tag" class="headerlink" title="13 . 命令行 –tag"></a>13 . 命令行 –tag</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有tag</span><br>git tag<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看tag详细信息</span> <br>git show [tagName]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个tag</span><br>git tag [tagName]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交指定tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [仓库简称] [tagName]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，指向某个tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b [branch] [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -d [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程tag (注意 空格)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/[tag]</span><br></code></pre></td></tr></table></figure><h1 id="14-案例"><a href="#14-案例" class="headerlink" title="14. 案例"></a>14. 案例</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">企业中我们是如何开发的<br>1) 入职第一天,管理人员分配/git账号密码 <br>2) 开发人员下载代码即文档/ 根据文档将环境搭建成功<br><span class="hljs-section">3) 团队一般会给你讲讲项目相关的支持</span><br><span class="hljs-section">----</span><br>4) 你接到第一个需求(或者某个功能,一般要经过沟通,分析,设计...等过程)<br>5) 创建feature分支(一般一个需求对应一个feature,命名格式上标注该需求的id)<br>6) 开发需求,本地测试,提交代码到当前需求对应的feature分支,<br><span class="hljs-code">一般来讲为了避免将测试代码提交,需要提交前,检查如下步骤</span><br><span class="hljs-code">6.1) 是否多提交了某个文件,比如测试文件</span><br><span class="hljs-code">6.2) 是否漏提交文件</span><br><span class="hljs-code">6.3) 打开每一个应该提交的文件,判断是否多提交了一行代码,是否少提交了一行代码,是否删除了本应该存在的代码 </span><br><span class="hljs-code">检查完毕提交代码</span><br>7) 合并分支至test分支-- 测试人员会在test分支中测试<br>8) 测试人员测试bug ,开发者在feature分支上继续修改,提交<br>9) 测试人员测试通过 ,test分支会被测试人员合并到develop开发分支,再次测试<br>10)develop分支最终会被合并到master主分支<br><br><br><br><br><br><br><br><br></code></pre></td></tr></table></figure><p>&#96;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/medias/img_Git_assets/gitlogo.png&quot;/&gt;

&lt;hr/&gt;
# git 教程




&lt;h1 id=&quot;9-远程仓库&quot;&gt;&lt;a href=&quot;#9-远程仓库&quot; class=&quot;headerlink&quot; title=&quot;9. 远程仓库&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="git" scheme="https://iexlee.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Git (2)</title>
    <link href="https://iexlee.github.io/42%E3%80%81Git%E6%95%99%E7%A8%8B.html"/>
    <id>https://iexlee.github.io/42%E3%80%81Git%E6%95%99%E7%A8%8B.html</id>
    <published>2022-08-25T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<img src="/medias/img_Git_assets/gitlogo.png"/><hr/># git 教程<h1 id="5-Git-工作流程"><a href="#5-Git-工作流程" class="headerlink" title="5. Git 工作流程"></a>5. Git 工作流程</h1><h2 id="5-1-Git-初始化"><a href="#5-1-Git-初始化" class="headerlink" title="5.1 Git 初始化"></a>5.1 Git 初始化</h2><p>我们先初始化一个本地仓</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1) 新建测试文件夹<br>2) 进入文件夹,然后右键创建版本库<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1571993852280.png" alt="1571993852280"></p><p>此时 我们看到 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>) 文件夹上多了一个绿色图标(如果没有请看本章节 <span class="hljs-number">5</span>.<span class="hljs-number">3</span>小节说明)<br><span class="hljs-attribute">2</span>) 文件夹内部生成了一个.git 隐藏文件夹(需要设置隐藏文件夹可见)<br></code></pre></td></tr></table></figure><h2 id="5-2-git-流程"><a href="#5-2-git-流程" class="headerlink" title="5.2  git 流程"></a>5.2  git 流程</h2><h3 id="5-2-1-流程图"><a href="#5-2-1-流程图" class="headerlink" title="5.2.1 流程图"></a>5.2.1 流程图</h3><p><img src="/medias/img_Git_assets/git%E6%B5%81%E7%A8%8B.png"></p><h3 id="5-2-2概念即详解"><a href="#5-2-2概念即详解" class="headerlink" title="5.2.2概念即详解"></a>5.2.2概念即详解</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">本地仓库：是在开发人员自己电脑上的Git仓库,存放我们的代码(.git 隐藏文件夹就是我们的本地仓库)<br>远程仓库：是在远程服务器上的Git仓库,存放代码(可以是github.com或者gitee.com 上的仓库,或者自己该公司的服务器)<br>工作区: 我们自己写代码(文档)的地方<br><span class="hljs-section">暂存区: 在 本地仓库中的一个特殊的文件(index) 叫做暂存区,临时存储我们即将要提交的文件</span><br><span class="hljs-section">------------</span><br>Clone：克隆，就是将远程仓库复制到本地仓库<br>Push：推送，就是将本地仓库代码上传到远程仓库<br>Pull：拉取，就是将远程仓库代码下载到本地仓库,并将代码 克隆到本地工作区<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/git%E6%B5%81%E7%A8%8B_%E8%AF%A6%E8%A7%A3.png"></p><h1 id="6-Git-的基本使用01-TortoiseGit-操作本地仓库"><a href="#6-Git-的基本使用01-TortoiseGit-操作本地仓库" class="headerlink" title="6.Git 的基本使用01-TortoiseGit 操作本地仓库"></a>6.Git 的基本使用01-TortoiseGit 操作本地仓库</h1><h2 id="6-1-初始化仓库"><a href="#6-1-初始化仓库" class="headerlink" title="6.1  初始化仓库"></a>6.1  初始化仓库</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">方法一: <br>新建一个文件夹,进入文件夹内部操作<br><span class="hljs-number">1</span>)右键<span class="hljs-comment">--&gt; 在这里创建Git 版本库 </span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572161580344.png" alt="1572161580344"></p><p>  注意: 不要直接在桌面上操作,否则桌面就是一个仓库</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">方法二:<br><span class="hljs-number">2</span>) 右键<span class="hljs-comment">--&gt;Git GUI here</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572162906623.png" alt="1572162906623"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">方法三: 命令行模式<br><span class="hljs-number">2</span>) git <span class="hljs-keyword">init</span> <br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572163015102.png" alt="1572163015102"></p><p>创建完毕仓库,我们发现,此时我们创建的文件夹下有一个.git 文件已经生成了</p><p>并且仓库文件夹上多了一个 绿色图标</p><p><img src="/medias/img_Git_assets/1572164583708.png" alt="1572164583708"></p><h2 id="6-2-添加文件"><a href="#6-2-添加文件" class="headerlink" title="6.2 添加文件"></a>6.2 添加文件</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">1</span>)在仓库中新建一个文件<br><span class="hljs-number">2</span>)选中新建的文件--&gt;右键--&gt; TortoiseGit--&gt; 添加<br><span class="hljs-number">3</span>)此时我们看到文件夹上多了一个 <span class="hljs-string">&quot;加号&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572164475555.png" alt="1572164475555"></p><p><img src="/medias/img_Git_assets/1572165109016.png" alt="1572165109016"></p><h2 id="6-3-提交文件至本地仓库"><a href="#6-3-提交文件至本地仓库" class="headerlink" title="6.3 提交文件至本地仓库"></a>6.3 提交文件至本地仓库</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span>)选中文件<br><span class="hljs-number">2</span>) 右键<span class="hljs-comment">--git提交</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572165471421.png" alt="1572165471421"></p><h2 id="6-4-修改文件-与再次提交文件"><a href="#6-4-修改文件-与再次提交文件" class="headerlink" title="6.4 修改文件,与再次提交文件"></a>6.4 修改文件,与再次提交文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">当我们修改文件以后,文件上多了一个红色感叹号,表示我们上次提交后该文件被修改过<br>提交后文件图标又变成绿色<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572165676716.png" alt="1572165676716"></p><h2 id="6-5-文件状态讲解"><a href="#6-5-文件状态讲解" class="headerlink" title="6.5 文件状态讲解"></a>6.5 文件状态讲解</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Git</span>工作目录下的文件存在两种状态：<br><span class="hljs-attribute">1</span> untracked 未跟踪（未被纳入版本控制） :  比如新建的文件(此时文件夹上没有图标或者有一个<span class="hljs-string">&quot;问号&quot;</span>)<br><span class="hljs-attribute">2</span> tracked 已跟踪（被纳入版本控制）     <br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> Staged 已暂存状态            : 添加 但未提交状态(此时文件夹上有一个<span class="hljs-string">&quot;加号&quot;</span>)<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> Unmodified 未修改状态        : 已提交(此时文件夹上有一个<span class="hljs-string">&quot;对号&quot;</span>)<br><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span> Modified 已修改状态          : 修改了,但是还没有提交 (此时文件夹上有一个<span class="hljs-string">&quot;红色感叹号&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1569293793902.png"></p><p>这些文件的状态会随着我们执行Git的命令发生变化</p><p><img src="/medias/img_Git_assets/1566627767390.png"></p><h2 id="6-6-修改文件-不提交和上一个版本比较差异-diff"><a href="#6-6-修改文件-不提交和上一个版本比较差异-diff" class="headerlink" title="6.6 修改文件,不提交和上一个版本比较差异(diff)"></a>6.6 修改文件,不提交和上一个版本比较差异(diff)</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">修改文件</span><span class="hljs-string">,</span><span class="hljs-comment">此时不要提交</span><br><span class="hljs-comment">选中文件</span><span class="hljs-literal">--</span>&gt;<span class="hljs-comment">右键</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">TortoiseGit</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">比较差异</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572167540734.png" alt="1572167540734"></p><h2 id="6-7-查看提交历史记录"><a href="#6-7-查看提交历史记录" class="headerlink" title="6.7 查看提交历史记录"></a>6.7 查看提交历史记录</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">选中文件</span><br><span class="hljs-comment">右键</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">TortoiseGit</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">显示日志</span><br><span class="hljs-comment">此时我们可以看到所有的历史提交记录</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572167842481.png" alt="1572167842481"></p><p>##6.8 回退至历史版本</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">右键</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">TortoiseGit</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">显示日志</span><br><span class="hljs-comment">选中某个版本</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">进行如下操作</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572171034508.png" alt="1572171034508"></p><h2 id="6-9-文件删除"><a href="#6-9-文件删除" class="headerlink" title="6.9 文件删除"></a>6.9 文件删除</h2><p>###6.9.1本地删除与恢复</p>  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">1) 直接选中文件删除的话</span><span class="hljs-string">,</span><span class="hljs-comment">其实只是删除了本地工作区的文件</span><span class="hljs-string">,</span><span class="hljs-comment">并没有删除 仓库中的文件</span><br>   <span class="hljs-comment">此时时可以回退的</span><span class="hljs-string">,</span> <span class="hljs-comment">比如我们进行如下操作</span><br>   <span class="hljs-comment">1)文件删除</span><br>   <span class="hljs-comment">2)右键</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">TortoiseGit</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">还原</span><br>   <span class="hljs-comment">此时我们发现文件又被恢复了</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572169387835.png" alt="1572169387835"></p><h3 id="6-9-2从版本库删除"><a href="#6-9-2从版本库删除" class="headerlink" title="6.9.2从版本库删除"></a>6.9.2从版本库删除</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">2</span>) 我们如果真的想要将某个文件从服务器删除,需要进行如下操作<br>   <span class="hljs-number">1</span>) 删除文件,和上面的操作一样<br>   <span class="hljs-number">2</span>) 提交,此时服务文件已经删除了<span class="hljs-comment">(历史版本还在,还是可以恢复)</span><br></code></pre></td></tr></table></figure><h3 id="6-9-3从版本库删除-但是不删除本地"><a href="#6-9-3从版本库删除-但是不删除本地" class="headerlink" title="6.9.3从版本库删除,但是不删除本地"></a>6.9.3从版本库删除,但是不删除本地</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">我们可以如下操作,只删除服务器上的文件,但是本地文件并不删除<br><span class="hljs-section">备注: 删除之后需要提交,才会真正的从服务器删除</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572171572963.png" alt="1572171572963"></p><h2 id="6-10-忽略提交"><a href="#6-10-忽略提交" class="headerlink" title="6.10 忽略提交"></a>6.10 忽略提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">有时候我们一些文件是不需要提交的比如说idea/eclipse 开发的代码自动生成的配置文件<br>如何配置不提交呢<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572172137494.png" alt="1572172137494"></p><p>此时我们的根目录下会生成一个.gitignore 文件</p><p>忽略文件如何阅读,常见格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 所有以.a 结尾的文件讲被忽略(递归)</span><br><span class="hljs-string">*.a</span><br><span class="hljs-comment"># 不管其他规则怎样,强制不忽略  lib.a</span><br><span class="hljs-type">!lib.a</span><br><span class="hljs-comment"># 只忽略 文件 TODO (注意这里是文件)</span><br><span class="hljs-string">/TODO</span><br><span class="hljs-comment"># 忽略 build文件夹下所有内容(递归) 这里是文件夹</span><br><span class="hljs-string">build/</span><br><span class="hljs-comment"># 忽略 doc 目录下以 *.txt 结尾的文件 (不递归)</span><br><span class="hljs-string">doc/*.txt</span><br><span class="hljs-comment"># 忽略 doc 目录下以 *.pdf 结尾的文件 (递归)</span><br><span class="hljs-string">doc/**/*.pdf</span><br></code></pre></td></tr></table></figure><p>当然理解了上述规则,我们也可以手动编辑该文件,而不用通过窗口化操作(如果不嫌麻烦)</p><h1 id="7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支"><a href="#7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支" class="headerlink" title="7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)"></a>7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)</h1><h2 id="7-1-分支的概念"><a href="#7-1-分支的概念" class="headerlink" title="7.1 分支的概念"></a>7.1 分支的概念</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，避免影响开发主线。多线程开发,可以同时开启多个任务的开发,多个任务之间互不影响.<br></code></pre></td></tr></table></figure><h2 id="7-2-为何要使用分支"><a href="#7-2-为何要使用分支" class="headerlink" title="7.2 为何要使用分支"></a>7.2 为何要使用分支</h2><p>先看单线程开发</p><p><img src="/medias/img_Git_assets/1572173978185.png" alt="1572173978185"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">思考如下现象<br>    <span class="hljs-number">10.1</span> 日 业务部门提出需求 : 明年 元旦<span class="hljs-number">3</span>天做<span class="hljs-number">2</span>个促销活动<br><span class="hljs-number">1</span>) <span class="hljs-number">12.31</span> 号上线活动<span class="hljs-number">1</span>, <br><span class="hljs-number">2</span>) <span class="hljs-number">1.4</span> 号上线活动<span class="hljs-number">2</span> ,同时 要求撤销 活动<span class="hljs-number">1</span><br>    你所在 部门领导 为了保证能顺利完成,要求 <span class="hljs-number">11.15</span> 号完成 上述连个功能的开发工作<br>此时作为开发人员:我要面临两个文件, 活动<span class="hljs-number">1</span> 的代码,即要存在<span class="hljs-comment">(12.31 要用)</span>又要不存在<span class="hljs-comment">(1.4 号要求删除)</span> ,我们怎么做?<br>显然比较棘手,如果使用分支<span class="hljs-comment">(可以理解为将代码复制一份)</span>将很好解决<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572174740013.png" alt="1572174740013"></p><h2 id="7-3-创建分支"><a href="#7-3-创建分支" class="headerlink" title="7.3 创建分支"></a>7.3 创建分支</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">到现在为止,我们一直使用的时主分支(<span class="hljs-literal">master</span>)<br>在主分支上操作创建分支<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572178189980.png" alt="1572178189980"></p><h2 id="7-4-分支的查看切换"><a href="#7-4-分支的查看切换" class="headerlink" title="7.4 分支的查看切换"></a>7.4 分支的查看切换</h2><h3 id="7-4-1查看分支"><a href="#7-4-1查看分支" class="headerlink" title="7.4.1查看分支"></a>7.4.1查看分支</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">查看版本分支图,此时我们看到有两个分支<br>当然,我们可以创建多个分支<br>可以看到多个分支的图形<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572179420706.png" alt="1572179420706"></p><h3 id="7-4-2切换分支"><a href="#7-4-2切换分支" class="headerlink" title="7.4.2切换分支"></a>7.4.2切换分支</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">右键<span class="hljs-comment">--&gt; 检出</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572180057481.png" alt="1572180057481"></p><p>##7.5 分支的合并与删除</p><h3 id="7-5-1合并"><a href="#7-5-1合并" class="headerlink" title="7.5.1合并"></a>7.5.1合并</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">我们将代码切换到分支<span class="hljs-number">1</span>,然后写属于需求<span class="hljs-number">1</span> 的代码并提交<br>当我们把需求<span class="hljs-number">1</span> 开发完毕如何把需求<span class="hljs-number">1</span> 的代码合并到主分支呢?<br><span class="hljs-comment">--&gt;1 切换到 主版本</span><br><span class="hljs-comment">--&gt;2 右键 合并即可将需求1 写的代码合并至主分支</span><br><span class="hljs-comment">-----此时我们看到代码自动合并到了master分支</span><br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572180623156.png" alt="1572180623156"></p><h3 id="7-5-2删除分支"><a href="#7-5-2删除分支" class="headerlink" title="7.5.2删除分支"></a>7.5.2删除分支</h3><p><img src="/medias/img_Git_assets/1572183670465.png" alt="1572183670465"></p><p>5,冲突的处理<br>​5.1)冲突的概念</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">现象演示<br>开发人员A 开发需求<span class="hljs-number">1</span>,开发了一个工具类 MathUtil,里面第一行写了一个方法 <span class="hljs-built_in">add</span>(<span class="hljs-keyword">int</span> [] <span class="hljs-keyword">args</span>)<br> 同时开发人员B 开发需求<span class="hljs-number">2</span>,开发了一个工具类 MathUtil,里面第一行写了一个方法 <span class="hljs-built_in">add</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">b</span>)<br>他们在互相不知道对方需求的情况下同时提交了代码到自己的分支<br>   思考此时如果我们把需求<span class="hljs-number">1</span> 和需求<span class="hljs-number">2</span> 同时都合并到主分支上, 主分支的 工具类 MathUtil 的第一行应该使用谁的代码? <br>   此时主分支是不能智能判断第一行使用谁的代码,合并时会报错,我们叫做冲突.<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572181403239.png" alt="1572181403239"></p><p>​5.2) 如何处理冲突</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">分析一下冲突的原因:<br><span class="hljs-code">开发人员之间彼此没有沟通导致的同一个时间节点修改了同一个地方的代码,合并是冲突</span><br>思考:<br><span class="hljs-code">我们能直接把某个开发人员开发的代码删除吗?</span><br>显然不能<br><span class="hljs-section">所以在处理冲突时,第一步应该时找开发另一个需求的人员沟通,之后才是处理冲突</span><br><span class="hljs-section">-----</span><br>--&gt; 选中冲突的文件(带黄色感叹号的文件都是冲突的文件,如果有多个需要逐一处理)<br>--&gt; 右键--&gt; 编辑冲突,<br>--&gt;处理完毕后.标记已解决<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572182565594.png" alt="1572182565594"></p><p><img src="/medias/img_Git_assets/1572182727568.png" alt="1572182727568"></p><h1 id="8-tag-标签"><a href="#8-tag-标签" class="headerlink" title="8.tag  标签"></a>8.tag  标签</h1><h2 id="8-1-标签的概念"><a href="#8-1-标签的概念" class="headerlink" title="8.1 标签的概念"></a>8.1 标签的概念</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">如果你的项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以给它打上标签(<span class="hljs-keyword">tag</span>)<br>比如说，我们想为我们的项目发布一个<span class="hljs-string">&quot;1.0&quot;</span>版本。 我们给最新一次提交打上（HEAD）<span class="hljs-string">&quot;v1.0&quot;</span>的标签。<br>标签可以理解为项目里程碑的一个标记,一旦打上了这个标记则,表示当前的代码将不允许提交<br></code></pre></td></tr></table></figure><h2 id="8-2-标签的创建-tag"><a href="#8-2-标签的创建-tag" class="headerlink" title="8.2  标签的创建(tag)"></a>8.2  标签的创建(tag)</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">标签的创建和分支的创建操作几乎一样<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/1572183849972.png" alt="1572183849972"></p><h2 id="8-3-标签的切换与删除"><a href="#8-3-标签的切换与删除" class="headerlink" title="8.3 标签的切换与删除"></a>8.3 标签的切换与删除</h2><p><img src="/medias/img_Git_assets/1572184030612.png" alt="1572184030612"></p><p><img src="/medias/img_Git_assets/1572184109746.png" alt="1572184109746"></p><pre><code class="hljs">   `</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/medias/img_Git_assets/gitlogo.png&quot;/&gt;

&lt;hr/&gt;
# git 教程



&lt;h1 id=&quot;5-Git-工作流程&quot;&gt;&lt;a href=&quot;#5-Git-工作流程&quot; class=&quot;headerlink&quot; title=&quot;5. Gi</summary>
      
    
    
    
    <category term="git" scheme="https://iexlee.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Git  (1)</title>
    <link href="https://iexlee.github.io/41%E3%80%81Git%E6%95%99%E7%A8%8B.html"/>
    <id>https://iexlee.github.io/41%E3%80%81Git%E6%95%99%E7%A8%8B.html</id>
    <published>2022-08-18T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<img src="/medias/img_Git_assets/gitlogo.png"/><hr/># git 教程<p>[TOC]</p><h1 id="1-版本管理工具概念"><a href="#1-版本管理工具概念" class="headerlink" title="1.版本管理工具概念"></a>1.版本管理工具概念</h1><p>我在大学毕业写论文的时候的时候碰到过如下的现象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;<span class="hljs-tag">&lt;<span class="hljs-name">毕业论文第一版.doc</span>&gt;</span>&gt;<br>&lt;<span class="hljs-tag">&lt;<span class="hljs-name">毕业论文第二版.doc</span>&gt;</span>&gt;<br>&lt;<span class="hljs-tag">&lt;<span class="hljs-name">毕业论文第三版.doc</span>&gt;</span>&gt;<br>&lt;<span class="hljs-tag">&lt;<span class="hljs-name">毕业论文最终版.doc</span>&gt;</span>&gt;<br>&lt;<span class="hljs-tag">&lt;<span class="hljs-name">毕业论文最终版2.doc</span>&gt;</span>&gt;<br></code></pre></td></tr></table></figure><p>类似的问题我曾经也碰到过很多,例如:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">领导让写文档,写好了,领导让修改,改好了,领导觉得第一版不错,改回来吧,此时内心一脸懵,第一版长啥样没存档啊<br></code></pre></td></tr></table></figure><p>实际上,代码开发中也需要这样的软件来管理我们的代码. 例如我们经常会碰到如下的现象:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">改之前好好的,改完就报错了,也没怎么修改啊<br></code></pre></td></tr></table></figure><p>在这种情况下如果不能查看修改之前的代码,查找问题是非常困难的.</p><p>如果有一个软件能记录我们对文档的所有修改,所有版本,那么上面的问题讲迎刃而解.而这类软件我们一般叫做版本控制工具</p><p>版本管理工具一般具有如下特性:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1) 能够记录历史版本,回退历史版本<br>2) 团队开发,方便代码合并<br></code></pre></td></tr></table></figure><h1 id="2-版本管理工具介绍"><a href="#2-版本管理工具介绍" class="headerlink" title="2. 版本管理工具介绍"></a>2. 版本管理工具介绍</h1><p>现在比较流行的版本管理工具是git ,但是实际上git 是近几年才发展起来的,可能有一些老的项目,还在用一些老的软件,比如svn</p><h2 id="2-1版本管理发展简史-维基百科"><a href="#2-1版本管理发展简史-维基百科" class="headerlink" title="2.1版本管理发展简史(维基百科)"></a>2.1版本管理发展简史(维基百科)</h2><p><img src="/medias/img_Git_assets/1571983065236.png" alt="1571983065236"> </p><h3 id="2-1-1-SVN-SubVersion"><a href="#2-1-1-SVN-SubVersion" class="headerlink" title="2.1.1 SVN(SubVersion)"></a>2.1.1 SVN(SubVersion)</h3><p>工作流程</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang">SVN是集中式版本控制系统，版本库是集中放在中央服务器的.<br>工作流程如下:<br><span class="hljs-number">1</span>.从中央服务器远程仓库下载代码<br><span class="hljs-number">2</span>.修改后将代码提交到中央服务器远程仓库<br></code></pre></td></tr></table></figure><p>优缺点:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">优点: 简单,易操作</span><br><span class="hljs-section">缺点:所有代码必须放在中央服务器  </span><br>    1.服务器一旦宕机无法提交代码,即容错性较差<br>      2.离线无法提交代码,无法及时记录我们的提交行为<br></code></pre></td></tr></table></figure><p>svn流程图</p><p><img src="/medias/img_Git_assets/svn.jpg"></p><h3 id="2-1-2-Git"><a href="#2-1-2-Git" class="headerlink" title="2.1.2 Git"></a>2.1.2 Git</h3><p>工作流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS），分为两种类型的仓库：<br>本地仓库和远程仓库<br>工作流程如下<br>    1．从远程仓库中克隆或拉取代码到本地仓库(<span class="hljs-built_in">clone</span>/pull)<br>    2．从本地进行代码修改<br>    3．在提交前先将代码提交到暂存区<br>    4．提交到本地仓库。本地仓库中保存修改的各个历史版本<br>    5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库<br></code></pre></td></tr></table></figure><p><img src="/medias/img_Git_assets/git.png"></p><p>总结:git和svn的区别</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> svn 是集中式版本控制工具,git 是分布式版本控制工具<br><span class="hljs-bullet">2.</span> svn 不支持离线提交,git 支持离线提交代码<br></code></pre></td></tr></table></figure><h1 id="3-Git-发展简史"><a href="#3-Git-发展简史" class="headerlink" title="3. Git 发展简史"></a>3. Git 发展简史</h1><p> 林纳斯·本纳第克特·托瓦兹（Linus Benedict Torvalds, 1969年~ ） </p><p><img src="/medias/img_Git_assets/1571987252740.png" alt="1571987252740"></p><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过<strong>手工方式合并代码！</strong></p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？那个年代不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，<strong>而且必须联网才能使用</strong>。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是<strong>付费</strong>的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。而授权的前提是:Linux 社区的人不能开发具有相同功能的竞争产品! </p><p>另一方面,BitKeeper不是开源的. 显然与Linux 的开源精神不相符,所以linux 社区的很多人抱怨,不愿意使用.</p><p>典型的就是  Andrew Tridgell  (Samba 开发服务的创造者) 非常不满.偷偷违反了和 BitKeeper 的协议,反编译 BitKeeper 的源代码,开发了个爬虫,然后爬取信息被人发现了. BitKeeper 公司的领导非常不满意,然后开始发布消息说,(下个版本)不再为Linux 提供免费的服务. </p><p>Linus  本人就出面协调(几周或者几个月),但是不管用, 没办法. 估计谈判的过程感觉到了憋屈–”吃人嘴短,拿人手软”</p><p>Linus  本人 花了10天的时间Git 出来了,一个月之内，Linux系统的源码已经由Git管理了！</p><p> <img src="/medias/img_Git_assets/1571988966446.png" alt="Linus 采访记录"></p><p>Git 出来以后毕竟是一个人做的,开始并不好用(刚开始只能用勉强可以用来形容), 还是很多人抱怨,发展了很多年都没有干过其他软件.</p><p>直到 2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub,从此git 迎来了飞速发展,当下git 已经成为了最流行的版本控制工具</p><h1 id="4-Git-的安装"><a href="#4-Git-的安装" class="headerlink" title="4. Git 的安装"></a>4. Git 的安装</h1><h2 id="4-1-git-的下载"><a href="#4-1-git-的下载" class="headerlink" title="4.1 git 的下载"></a>4.1 git 的下载</h2><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="/medias/img_Git_assets/1571990833074.png" alt="1571990833074"></p><p>附件</p><p><img src="/medias/img_Git_assets/1571991253594.png" alt="1571991253594"></p><hr/>## 4.2 安装<ol><li><p>按照附件的 顺序直接下一步傻瓜式安装即可</p></li><li><p>其中安装的过程中需要填写一个邮箱和用户名(任意即可)</p></li></ol><p><img src="/assets/1572001054551.png" alt="1572001054551"></p><ol start="3"><li><p>$\color{red}{注意: 安装完毕请重启资源管理器,或者重启电脑!!!}$ </p></li><li><p>更改语言</p></li></ol><p><img src="/medias/img_Git_assets/1571992521110.png" alt="1571992521110"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/medias/img_Git_assets/gitlogo.png&quot;/&gt;

&lt;hr/&gt;
# git 教程

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1-版本管理工具概念&quot;&gt;&lt;a href=&quot;#1-版本管理工具概念&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="git" scheme="https://iexlee.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL 索引的数据结构</title>
    <link href="https://iexlee.github.io/13%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html"/>
    <id>https://iexlee.github.io/13%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html</id>
    <published>2022-08-06T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-08-章-索引的创建与设计原则"><a href="#第-08-章-索引的创建与设计原则" class="headerlink" title="第 08 章_索引的创建与设计原则"></a>第 08 章_索引的创建与设计原则</h1><h2 id="1-索引的声明与使用"><a href="#1-索引的声明与使用" class="headerlink" title="1. 索引的声明与使用"></a>1. 索引的声明与使用</h2><h3 id="1-1-索引的分类"><a href="#1-1-索引的分类" class="headerlink" title="1. 1 索引的分类"></a>1. 1 索引的分类</h3><p>MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p><ul><li><p>从<code>功能逻辑</code>上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。</p></li><li><p>按<code>照物理实现方式</code>，索引可以分为 2 种：聚簇索引和非聚簇索引。</p></li><li><p>按照<code>作用字段个数</code>进行划分，分成单列索引和联合索引。</p></li></ul><ol><li><p>普通索引</p></li><li><p>唯一性索引</p></li><li><p>主键索引</p></li><li><p>单列索引</p></li><li><p>多列(组合、联合)索引</p><p>最左前缀</p></li><li><p>全文索引</p></li><li><p>补充：空间索引</p><p>使用<code>参数SPATIAL</code>可以设置索引为<code>空间索引</code>。空间索引只能建立在空间数据类型上，这样可以提高系统获取空间数据的效率。MySQL中的空间数据类型包括GEONETRY、POINT、LINESTRING和POLYGON等。目前只有MyISAM存储引擎支持空间检索，而且索引的字段不能为空值。对于初学者来说，这类索引很少会用到。</p></li></ol><p>**小结：不同的存储引擎支持的索引类型也不一样 **</p><p><strong>InnoDB</strong> ： 支持 B-tree、Full-text 等索引，不支持 Hash索引；</p><p> <strong>MyISAM</strong> ： 支持 B-tree、Full-text 等索引，不支持 Hash 索引； </p><p>Memory ： 支持 B-tree、Hash 等索引，不支持 Full-text 索引；</p><p>NDB ： 支持 Hash 索引，不支持 B-tree、Full-text 等索引； </p><p>Archive ： 不支持 B-tree、Hash、Full-text 等索引；</p><h3 id="1-2-创建索引"><a href="#1-2-创建索引" class="headerlink" title="1. 2 创建索引"></a>1. 2 创建索引</h3><p>MySQL支持多种方法在单个或多个列上创建索引:在创建表的定义语句<code>CREATE TABLE</code>中指定索引列，使用<code>ALTER TABLE</code>语句在存在的表上创建索引，或者使用<code>CREATE INDEX</code>语句在已存在的表上添加索引。</p><h4 id="1-创建表的时候创建索引"><a href="#1-创建表的时候创建索引" class="headerlink" title="1. 创建表的时候创建索引"></a>1. 创建表的时候创建索引</h4><p>使用CREATE TABLE创建表时，除了可以定义列的数据类型外，还可以定义主键约束、外键约束或者唯一性约束，而不论创建哪种约束，在定义约束的同时相当于在指定列上创建了一个索引。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE dept(<br>dept_id INT PRIMARY KEY AUTO_INCREMENT,<br>dept_name VARCHAR( 20 )<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp(<br>emp_id INT PRIMARY KEY AUTO_INCREMENT,<br>emp_name VARCHAR( 20 ) UNIQUE,<br>dept_id INT,<br>CONSTRAINT emp_dept_id_fk FOREIGN KEY(dept_id) REFERENCES dept(dept_id)<br>);<br></code></pre></td></tr></table></figure><p>但是，如果显式创建表时创建索引的话，基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE table_name [col_name data_type]<br>[UNIQUE | FULLTEXT | SPATIAL][INDEX |KEY][index_name] (col_name [length]) [ASC | DESC]<br><br></code></pre></td></tr></table></figure><ul><li>UNIQUE、FULLTEXT和SPATIAL为可选参数，分别表示唯一索引、全文索引和空间索引；</li><li>INDEX与KEY为同义词，两者的作用相同，用来指定创建索引；</li><li>index_name指定索引的名称，为可选参数，如果不指定，那么MySQL默认col_name为索引名；</li><li>col_name为需要创建索引的字段列，该列必须从数据表中定义的多个列中选择；</li><li>length为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度；</li><li>ASC或DESC指定升序或者降序的索引值存储。</li></ul><p><strong>1.创建普通索引</strong></p><p>在book表中的year_publication字段上建立普通索引，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#显式的方式创建<br>#1创建普通的索引<br>CREATE TABLE book (<br>    book_id INT ,<br>    book_name VARCHAR (100) ,<br>    AUTHORS VARCHAR (100) ,<br>    info VARCHAR(100) ,<br>    COMMENT VARCHAR (100) ,<br>    year_publication YEAR,<br>    #声明索引<br>INDEX idx_bname (book_name))<br>;<br><br>#通过命令查看索引<br>#方式l:<br>mysql&gt; show  create table book \G<br>*************************** 1. row ***************************<br>       Table: book<br>Create Table: CREATE TABLE `book` (<br>  `book_id` int(11) DEFAULT NULL,<br>  `book_name` varchar(100) DEFAULT NULL,<br>  `AUTHORS` varchar(100) DEFAULT NULL,<br>  `info` varchar(100) DEFAULT NULL,<br>  `COMMENT` varchar(100) DEFAULT NULL,<br>  `year_publication` year(4) DEFAULT NULL,<br>  KEY `idx_bname` (`book_name`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br>1 row in set (0.00 sec)<br><br># 方式2： <br>show index from book;<br></code></pre></td></tr></table></figure><h4 id="show-index-from-book"><a href="#show-index-from-book" class="headerlink" title="show index from book"></a>show index from book</h4><p>太好用了，必须要会</p><p><strong>2.创建唯一索引</strong></p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建唯一索引<br>CREATE TABLE book (<br>    book_id INT ,<br>    book_name VARCHAR (100) ,<br>    #声明索引<br>UNIQUE INDEX uk_idx_bname (book_name))<br>;<br><br>show index from book;<br></code></pre></td></tr></table></figure><p>该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：</p><p><strong>3.主键索引</strong></p><p>设定为主键后数据库会自动建立索引，innodb为聚簇索引，语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE book (<br>    # 创建主键索引<br>    book_id INT  primary key,<br>    book_name VARCHAR (100)<br>;<br><br></code></pre></td></tr></table></figure><p>删除主键索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student<br>drop PRIMARY KEY ;<br></code></pre></td></tr></table></figure><p>修改主键索引：必须先删除掉(drop)原索引，再新建(add)索引</p><p><strong>4.创建组合索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建唯一索引<br>CREATE TABLE book (<br>    book_id INT ,<br>    book_name VARCHAR (100) ,<br>    author VARCHAR (100) ,<br>    #声明索引<br>INDEX union_key_ba (book_name,author))<br>;<br><br>show index from book;<br></code></pre></td></tr></table></figure><p><strong>5.创建全文索引</strong></p><p><strong>6.创建空间索引</strong></p><p>空间索引创建中，要求空间类型的字段必须为非空。</p><p>举例：创建表test5，在空间类型为GEOMETRY的字段上创建空间索引，SQL语句如下：</p><h4 id="2-在已经存在的表上创建索引"><a href="#2-在已经存在的表上创建索引" class="headerlink" title="2.在已经存在的表上创建索引"></a>2.在已经存在的表上创建索引</h4><p>在已经存在的表中创建索引可以使用ALTER TABLE语句或者CREATE INDEX语句。</p><ol><li><p>使用ALTER TABLE语句创建索引 ALTER TABLE语句创建索引的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE table_name ADD [UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY]<br>[index_name] (col_name[length],...) [ASC | DESC]<br><br>ALTER TABLE book ADD INDEX index_name(book_name);<br>ALTER TABLE book ADD UNIQUE uk_idx_bname(book_name);<br>ALTER TABLE book ADD UNIQUE mul_bid_na(book_name,author);<br></code></pre></td></tr></table></figure></li><li><p>使用CREATE INDEX创建索引 CREATE INDEX语句可以在已经存在的表上添加索引，在MySQL中，CREATE INDEX被映射到一个ALTER TABLE语句上，基本语法结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name<br>ON table_name (col_name[length],...) [ASC | DESC]<br><br>create 索引类型 索引名称 on 表名(字段);<br>create index idx_cmt on book(comment);<br>create unique index idx_cmt on book(comment);<br>create index idx_cmt on book(comment,author);<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3 删除索引"></a>3 删除索引</h4><ol><li><p>使用ALTER TABLE删除索引 ALTER TABLE删除索引的基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE table_name DROP INDEX index_name;<br></code></pre></td></tr></table></figure></li><li><p>使用DROP INDEX语句删除索引 DROP INDEX删除索引的基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP INDEX index_name ON table_name;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>在需要大量删除表数据，修改表数据时，可以考虑先删除索引。等修改完数据之后再插入</p></blockquote><blockquote><p>AUTO_INCREMENT 约束字段的唯一索引不能被删除</p></blockquote><blockquote><p> 提示 删除表中的列时，如果要删除的列为索引的组成部分，则该列也会从索引中删除。如果组成索引的所有列都被删除，则整个索引将被删除。</p></blockquote><h2 id="2-MySQL-8-0-索引新特性"><a href="#2-MySQL-8-0-索引新特性" class="headerlink" title="2.MySQL 8. 0 索引新特性"></a>2.MySQL 8. 0 索引新特性</h2><h3 id="2-1-支持降序索引"><a href="#2-1-支持降序索引" class="headerlink" title="2. 1 支持降序索引"></a>2. 1 支持降序索引</h3><p>降序索引以降序存储键值。虽然在语法上，从MySQL 4版本开始就已经支持降序索引的语法了，但实际上该DESC定义是被忽略的，直到MySQL 8.x版本才开始真正支持降序索引(仅限于InnoDB存储引擎)。</p><p>MySQL在8.0<strong>版本之前创建的仍然是升序索引，使用时进行反向扫描，这大大降低了数据库的效率</strong>。在某些场景下，降序索引意义重大。例如，如果一个查询，需要对多个列进行排序，且顺序要求不一致，那么使用降序索引将会避免数据库使用额外的文件排序操作，从而提高性能。</p><p>举例：分别在MySQL 5. 7 版本和MySQL 8. 0 版本中创建数据表ts 1 ，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE ts1(a int, b int, index idx_a_b(a, b desc) ) ;<br></code></pre></td></tr></table></figure><p>在MySQL 5. 7 版本中查看数据表ts 1 的结构，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show create table ts1 \G<br>*************************** 1. row ***************************<br>       Table: ts1<br>Create Table: CREATE TABLE `ts1` (<br>  `a` int(11) DEFAULT NULL,<br>  `b` int(11) DEFAULT NULL,<br>  KEY `idx_a_b` (`a`,`b`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，索引仍然是默认的升序。</p><p>在MySQL 8. 0 版本中查看数据表ts 1 的结构，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show create table ts1 \G<br>*************************** 1. row ***************************<br>       Table: ts1<br>Create Table: CREATE TABLE `ts1` (<br>  `a` int DEFAULT NULL,<br>  `b` int DEFAULT NULL,<br>  KEY `idx_a_b` (`a`,`b` DESC)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，索引已经是降序了。下面继续测试降序索引在执行计划中的表现。</p><p>分别在MySQL 5. 7 版本和MySQL 8. 0 版本的数据表ts 1 中插入 800 条随机数据，执行语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE ts1(a int,b int,index idx_a_b(a,b desc));<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE ts_insert () BEGIN<br>DECLARE<br>i INT DEFAULT 1;<br>WHILE<br>i &lt; 800 DO<br>INSERT INTO ts1 SELECT<br>rand()* 80000,<br>rand()* 80000;<br><br>SET i = i + 1;<br><br>END WHILE;<br>COMMIT;<br><br>END // <br>DELIMITER;<br>#调用<br>CALL ts_insert ();<br></code></pre></td></tr></table></figure><p>在MySQL 5.7版本中查看数据表ts1的执行计划，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from ts1 order by a, b desc limit 5;<br>+----+------+----------+-----------------------------+<br>| id | rows | filtered | Extra                       |<br>+----+------+----------+-----------------------------+<br>|  1 | 1598 |   100.00 | Using index; Using filesort |<br>+----+------+----------+-----------------------------+<br>1 row in set, 1 warning (0.01 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，执行计划中扫描数为 1598，而且使用了Using filesort。</p><blockquote><p> 提示 Using filesort是MySQL中一种速度比较慢的外部排序，能避免是最好的。多数情况下，管理员可以通过优化索引来尽量避免出现Using filesort，从而提高数据库执行速度。</p></blockquote><p>在MySQL 8.0版本中查看数据表ts1的执行计划。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from ts1 order by a, b desc limit 5;<br>+----+---------+-----+----------+-------------+<br>| id | key     |rows | filtered | Extra       |<br>+----+---------+-----+----------+-------------+<br>|  1 | idx_a_b |   5 |   100.00 | Using index |<br>+----+---------+-----+----------+-------------+<br>1 row in set, 1 warning (0.03 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，执行计划中扫描数为 5 ，而且没有使用Using filesort。</p><blockquote><p>注意 降序索引只对查询中特定的排序顺序有效，如果使用不当，反而查询效率更低。例如，上述查询排序条件改为order by a desc, b desc，MySQL 5.7的执行计划要明显好于MySQL 8.0。</p></blockquote><h3 id="2-2-隐藏索引"><a href="#2-2-隐藏索引" class="headerlink" title="2.2 隐藏索引"></a>2.2 隐藏索引</h3><p>在MySQL 5.7版本及之前，只能通过显式的方式删除索引。此时，如果发现删除索引后出现错误，又只能通过显式创建索引的方式将删除的索引创建回来。如果数据表中的数据量非常大，或者数据表本身比较大，这种操作就会消耗系统过多的资源，操作成本非常高。</p><p>从MySQL 8.x开始支持<code>隐藏索引（invisible indexes）</code>，只需要将待删除的索引设置为隐藏索引，使查询优化器不再使用这个索引（即使使用force index（强制使用索引），优化器也不会使用该索引）确认将索引设置为隐藏索引后系统不受任何响应，就可以彻底删除索引。<code>这种通过先将索引设置为隐藏索引，再删除索引的方式就是软删除</code>。</p><p>同时，你想验证某个索引删除之后的<code>查询性能影响</code>，就可以暂时先隐藏该索引</p><blockquote><p> 注意:</p><p>主键不能被设置为隐藏索引。当表中没有显式主键时，表中第一个唯一非空索引会成为隐式主键，也不能设置为隐藏索引。</p></blockquote><p>索引默认是可见的，在使用CREATE TABLE，CREATE INDEX或者ALTERTABLE等语句时可以通过VISIBLE或者INVISIBLE关键词设置索引的可见性。</p><p>创建表时直接创建 </p><p><strong>1.在MySQL中创建</strong></p><p>隐藏索引通过SQL语句INVISIBLE来实现，其语法形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE tablename(<br>propname1 type1 [ CONSTRAINT1],propname2 type2[ CONSTRAINT2],<br>    ...<br>propnamen typen,<br>INDEX [indexname ](propname1 [ ( length)]) INVISIBLE<br>);<br><br>create table book2(<br>id int primary key,<br>    book_name varchar(32)<br>);<br><br></code></pre></td></tr></table></figure><p>上述语句比普通索引多了一个关键字INVISIBLE，用来标记索引为不可见索引。</p><p><strong>2.在已经存在的表上创建</strong></p><p>可以为已经存在的表设置隐藏索引，其语法形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name ON table_name (col_name[length] [ASC | DESC] ,...) [INVISIBLE|VISIBLE]<br></code></pre></td></tr></table></figure><p><strong>3.通过ALTER TABLE语句创建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE book2 ADD index idx_name(book_name) INVISIBLE;<br></code></pre></td></tr></table></figure><p><strong>4.切换索引可见状态</strong> </p><p>已存在的索引可通过如下语句切换可见状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE book2 alter index idx_name visible; # 切换成非隐藏索引<br>ALTER TABLE book2 alter index idx_name invisible; # 切换成非隐藏索引<br></code></pre></td></tr></table></figure><p>如果将index_cname索引切换成可见状态，通过explain查看执行计划，发现优化器选择了idx_name索引。</p><blockquote><p> 注意 当索引被隐藏时，它的内容仍然是和正常索引一样实时更新的。如果一个索引需要长期被隐藏，那么可以将其删除，因为索引的存在会影响插入、更新和删除的性能。</p></blockquote><p>通过设置隐藏索引的可见性可以查看索引对调优的帮助。</p><p><strong>5.使隐藏索引对查询优化器可见</strong></p><blockquote><p>只是有个全局的地方设置可见性，没什么用</p></blockquote><p>在MySQL 8.x版本中，为索引提供了一种新的测试方式，可以通过查询优化器的一个开关（use_invisible_indexes）来打开某个设置，使隐藏索引对查询优化器可见。如果 use_invisible_indexes设置为off(默认)，优化器会忽略隐藏索引。如果设置为on，即使隐藏索引不可见，优化器在生成执行计划时仍会考虑使用隐藏索引。</p><p>（ 1 ）在MySQL命令行执行如下命令查看查询优化器的开关设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select @@optimizer_switch \G<br>*************************** 1. row ***************************<br>@@optimizer_switch: index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on,engine_condition_pushdown=on,index_condition_pushdown=on,mrr=on,mrr_cost_based=on,block_nested_loop=on,batched_key_access=off,materialization=on,semijoin=on,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on,use_index_extensions=on,condition_fanout_filter=on,derived_merge=on,use_invisible_indexes=off,skip_scan=on,hash_join=on,subquery_to_derived=off,prefer_ordering_index=on,hypergraph_optimizer=off,derived_condition_pushdown=on<br>1 row in set (0.12 sec)<br></code></pre></td></tr></table></figure><p>在输出的结果信息中找到如下属性配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">use_invisible_indexes</span>=<span class="hljs-string">off</span><br></code></pre></td></tr></table></figure><p>此属性配置值为off，说明隐藏索引默认对查询优化器不可见。</p><p>（ 2 ）使隐藏索引对查询优化器可见，需要在MySQL命令行执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set session optimizer_switch=&quot;use_invisible_indexes=on&quot; ;<br>Query OK, 0 rows affected (0.06 sec)<br></code></pre></td></tr></table></figure><p>SQL语句执行成功，再次查看查询优化器的开关设置。</p><p>此时，在输出结果中可以看到如下属性配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select @@optimizer_switch \G<br>*************************** 1. row ***************************<br>@@optimizer_switch: index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on,engine_condition_pushdown=on,index_condition_pushdown=on,mrr=on,mrr_cost_based=on,block_nested_loop=on,batched_key_access=off,materialization=on,semijoin=on,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on,use_index_extensions=on,condition_fanout_filter=on,derived_merge=on,use_invisible_indexes=on,skip_scan=on,hash_join=on,subquery_to_derived=off,prefer_ordering_index=on,hypergraph_optimizer=off,derived_condition_pushdown=on<br>1 row in set (0.03 sec)<br></code></pre></td></tr></table></figure><p>use_invisible_indexes属性的值为on，说明此时隐藏索引对查询优化器可见。</p><h2 id="3-索引的设计原则"><a href="#3-索引的设计原则" class="headerlink" title="3. 索引的设计原则"></a>3. 索引的设计原则</h2><h3 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3. 1 数据准备"></a>3. 1 数据准备</h3><p>第 1 步：创建数据库、创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE atguigudb1;<br>USE atguigudb1;<br><br>#1.创建学生表和课程表<br>CREATE TABLE `student_info` (<br>`id` INT( 11 ) NOT NULL AUTO_INCREMENT,<br>`student_id` INT NOT NULL ,<br>`name` VARCHAR( 20 ) DEFAULT NULL,<br>`course_id` INT NOT NULL ,<br>`class_id` INT( 11 ) DEFAULT NULL,<br>`create_time` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,<br>PRIMARY KEY (`id`)<br>) ENGINE=INNODB AUTO_INCREMENT= 1 DEFAULT CHARSET=utf8;<br><br>CREATE TABLE `course` (<br>`id` INT( 11 ) NOT NULL AUTO_INCREMENT,<br>`course_id` INT NOT NULL ,<br>`course_name` VARCHAR( 40 ) DEFAULT NULL,<br>PRIMARY KEY (`id`)<br>) ENGINE=INNODB AUTO_INCREMENT= 1 DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>第 2 步：创建模拟数据必需的存储函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#函数 1 ：创建随机产生字符串函数<br><br>DELIMITER //<br>CREATE FUNCTION rand_string(n INT)<br>RETURNS VARCHAR( 255 ) #该函数会返回一个字符串<br>BEGIN<br>DECLARE chars_str VARCHAR( 100 ) DEFAULT<br>&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;;<br>DECLARE return_str VARCHAR( 255 ) DEFAULT &#x27;&#x27;;<br>DECLARE i INT DEFAULT 0 ;<br>    WHILE i &lt; n DO<br>        SET return_str =CONCAT(return_str,SUBSTRING(chars_str,FLOOR( 1 +RAND()* 52 ), 1 ));<br>        SET i = i + 1 ;<br>    END WHILE;<br>    RETURN return_str;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#函数 2 ：创建随机数函数<br>DELIMITER //<br>CREATE FUNCTION rand_num (from_num INT ,to_num INT) RETURNS INT( 11 )<br>BEGIN<br>DECLARE i INT DEFAULT 0 ;<br>SET i = FLOOR(from_num +RAND()*(to_num - from_num+ 1 )) ;<br>RETURN i;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>创建函数，假如报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">This function has none of DETERMINISTIC......<br></code></pre></td></tr></table></figure><p>由于开启过慢查询日志bin-log, 我们就必须为我们的function指定一个参数。</p><p>主从复制，主机会将写操作记录在bin-log日志中。从机读取bin-log日志，执行语句来同步数据。如果使用函数来操作数据，会导致从机和主键操作时间不一致。所以，默认情况下，mysql不开启创建函数设置。</p><ul><li><p>查看mysql是否允许创建函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;log_bin_trust_function_creators&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>命令开启：允许创建函数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global log_bin_trust_function_creators= 1 ;  # 不加global只是当前窗口有效。<br></code></pre></td></tr></table></figure></li><li><p>mysqld重启，上述参数又会消失。永久方法：</p><ul><li><p>windows下：my.ini[mysqld]加上：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log_bin_trust_function_creators</span>= <span class="hljs-string">1</span><br></code></pre></td></tr></table></figure></li><li><p>linux下：&#x2F;etc&#x2F;my.cnf下my.cnf[mysqld]加上：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log_bin_trust_function_creators</span>= <span class="hljs-string">1</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>第 3 步：创建插入模拟数据的存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#存储过程 1 ：创建插入课程表存储过程<br>DELIMITER //<br>CREATE PROCEDURE insert_course( max_num INT )<br>BEGIN<br>    DECLARE i INT DEFAULT 0 ;<br>    SET autocommit = 0 ;  #设置手动提交事务<br>    REPEAT #循环<br>    SET i = i + 1 ;  #赋值<br>    INSERT INTO course (course_id, course_name ) VALUES<br>    (rand_num( 10000 , 10100 ),rand_string( 6 ));<br>    UNTIL i = max_num<br>    END REPEAT;<br>COMMIT;  #提交事务<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#存储过程 2 ：创建插入学生信息表存储过程<br><br>DELIMITER //<br>CREATE PROCEDURE insert_stu( max_num INT )<br>BEGIN<br>DECLARE i INT DEFAULT 0 ;<br>SET autocommit = 0 ;  #设置手动提交事务<br>REPEAT #循环<br>    SET i = i + 1 ;  #赋值<br>    INSERT INTO student_info (course_id, class_id ,student_id ,NAME ) VALUES<br>    (rand_num( 10000 , 10100 ),rand_num( 10000 , 10200 ),rand_num( 1 , 200000 ),rand_string( 6 ));<br>    UNTIL i = max_num<br>END REPEAT;<br>COMMIT;  #提交事务<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>第 4 步：调用存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL insert_course( 100 );<br>CALL insert_stu( 1000000 );<br></code></pre></td></tr></table></figure><h3 id="3-2-哪些情况适合创建索引"><a href="#3-2-哪些情况适合创建索引" class="headerlink" title="3.2 哪些情况适合创建索引"></a>3.2 哪些情况适合创建索引</h3><h4 id="1-字段的数值有唯一性的限制"><a href="#1-字段的数值有唯一性的限制" class="headerlink" title="1.字段的数值有唯一性的限制"></a>1.字段的数值有唯一性的限制</h4><blockquote><p>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。（来源：Alibaba）</p><p>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的。</p></blockquote><h4 id="2-频繁作为-WHERE-查询条件的字段"><a href="#2-频繁作为-WHERE-查询条件的字段" class="headerlink" title="2.频繁作为 WHERE 查询条件的字段"></a>2.频繁作为 WHERE 查询条件的字段</h4><p>某个字段在SELECT语句的 WHERE 条件中经常被使用到，那么就需要给这个字段创建索引了。尤其是在数据量大的情况下，创建普通索引就可以大幅提升数据查询的效率。</p><p>比如student_info数据表（含 100 万条数据），假设我们想要查询 student_id&#x3D;123110 的用户信息。</p><h4 id="3-经常-GROUP-BY-和-ORDER-BY-的列"><a href="#3-经常-GROUP-BY-和-ORDER-BY-的列" class="headerlink" title="3.经常 GROUP BY 和 ORDER BY 的列"></a>3.经常 GROUP BY 和 ORDER BY 的列</h4><p>索引就是让数据按照某种顺序进行存储或检索，因此当我们使用 GROUP BY 对数据进行分组查询，或者使用 ORDER BY 对数据进行排序的时候，就需要<code>对分组或者排序的字段进行索引</code>。如果待排序的列有多个，那么可以在这些列上建立组合索引。</p><h4 id="4-UPDATE、DELETE-的-WHERE-条件列"><a href="#4-UPDATE、DELETE-的-WHERE-条件列" class="headerlink" title="4.UPDATE、DELETE 的 WHERE 条件列"></a>4.UPDATE、DELETE 的 WHERE 条件列</h4><p>对数据按照某个条件进行查询后再进行 UPDATE 或 DELETE 的操作，如果对 WHERE 字段创建了索引，就能大幅提升效率。原理是因为我们需要先根据 WHERE 条件列检索出来这条记录，然后再对它进行更新或删除。 如果进行更新的时候，更新的字段是<code>非索引字段</code>，提升的效率会更明显，这是因为非索引字段更新不需要对索引进行维护。</p><h4 id="5-DISTINCT-字段需要创建索引"><a href="#5-DISTINCT-字段需要创建索引" class="headerlink" title="5.DISTINCT 字段需要创建索引"></a>5.DISTINCT 字段需要创建索引</h4><p>有时候我们需要对某个字段进行去重，使用 DISTINCT，那么对这个字段创建索引，也会提升查询效率。</p><p>比如，我们想要查询课程表中不同的 student_id 都有哪些，如果我们没有对 student_id 创建索引，执行</p><p>SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT( student_id)FROM &#x27;student_info `;<br></code></pre></td></tr></table></figure><p>运行结果（ 600637 条记录，运行时间 0.683s）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">... 加索引语句<br>SELECT DISTINCT( student_id)FROM &#x27;student_info `;<br></code></pre></td></tr></table></figure><p>如果我们对 student_id 创建索引，再执行 SQL 语句：</p><p>运行结果（ 600637 条记录，运行时间 0.010s）：</p><p>你能看到 SQL 查询效率有了提升，同时显示出来的 student_id 还是按照<code>递增的顺序</code>进行展示的。这是因</p><p>为索引会对数据按照某种顺序进行排序，所以在去重的时候也会快很多。 因为紧挨着所以去重特别方便</p><h4 id="6-多表-JOIN-连接操作时，创建索引注意事项"><a href="#6-多表-JOIN-连接操作时，创建索引注意事项" class="headerlink" title="6.多表 JOIN 连接操作时，创建索引注意事项"></a>6.多表 JOIN 连接操作时，创建索引注意事项</h4><p>首先，<code>连接表的数量尽量不要超过 3 张</code>，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增</p><p>长会非常快，严重影响查询的效率。</p><p>其次，对 <code>WHERE 条件创建索引，</code>因为 WHERE 才是对数据条件的过滤。如果在数据量非常大的情况下，</p><p>没有 WHERE 条件过滤是非常可怕的。</p><p>最后，<code>对用于连接的字段创建索引，</code>并且该字段在多张表中的<code>类型必须一致</code>。比如 course_id 在</p><p>student_info 表和 course 表中都为 int(11) 类型，而不能一个为 int 另一个为 varchar 类型。</p><p>举个例子，如果我们只对 student_id 创建索引，执行 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT course_id,name，student_info.student_id, course_name<br>FROM student_info JOIN course<br>ON student_info .course_id = course.course_id<br>WHERE name = &#x27;462eed7ac6e791292a79&#x27; ;<br></code></pre></td></tr></table></figure><p>运行结果（ 1 条数据，运行时间 0.189s）：</p><p>这里我们对 name 创建索引，再执行上面的 SQL 语句，运行时间为 0.002s。</p><h4 id="7-使用列的类型小的创建索引"><a href="#7-使用列的类型小的创建索引" class="headerlink" title="7.使用列的类型小的创建索引"></a>7.使用列的类型小的创建索引</h4><p>我们这里所说的<code>类型大小</code>指的就是该类型表示的数据范围的大小。</p><p>我们在定义表结构的时候要显式的指定列的类型，以整数类型为例，有<code>TINYINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、<br><code>BIGINT</code>等，它们占用的存储空间依次递增，能表示的整数范围当然也是依次递增。如果我们想要对某个整数列建立索引的话，在表示的整数范围允许的情况下，尽量让索引列使用较小的类型，比如我们能使用<code>INT</code>就不要使用<code>BIGINT</code>，能使用<code>MEDIUMINT</code> 就不要使用<code>INT</code>。这是因为:</p><ul><li>数据类型越小，在查询时进行的比较操作越快</li><li>数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录，从而减少磁盘I&#x2F;0带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。</li></ul><p>这个建议对于表的<code>主键来说更加适用</code>，因为不仅是聚簇索引中会存储主键值，其他所有的二级索引的节点处都会存储一份记录的主键值，如果主键使用更小的数据类型，也就意味着节省更多的存储空间和更高效的I&#x2F;O。</p><h4 id="8-使用字符串前缀创建索引"><a href="#8-使用字符串前缀创建索引" class="headerlink" title="8.使用字符串前缀创建索引"></a>8.使用字符串前缀创建索引</h4><p>假设我们的字符串很长，那存储一个字符串就需要占用很大的存储空间。在我们需要为这个字符串列建立索引时，那就意味着在对应的B+树中有这么两个问题:</p><ul><li>B+树索引中的记录需要把该列的完整字符串存储起来，更费时。而且字符串越长，<code>在索引中占用的存储空间越大。</code></li><li>如果B+树索引中索引列存储的字符串很长，那在做字符串<code>比较时会占用更多的时间。</code></li></ul><p>我们可以通过截取字段的前面一部分内容建立索引，这个就叫<code>前缀索引</code>。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值。既<code>节约空间</code>，又<code>减少了字符串的比较时间</code>，还大体能解决排序的问题。</p><p>例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间，如果只检索字段前面的若干字符，这样可以提高检索速度。</p><p>创建一张商户表，因为地址字段比较长，在地址字段上建立前缀索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table shop(address varchar( 120 ) not null);<br><br>alter table shop add index(address( 12 ));<br></code></pre></td></tr></table></figure><p>问题是，截取多少呢？截取得多了，达不到节省索引存储空间的目的；截取得少了，重复内容太多，字段的散列度(选择性)会降低。 <strong>怎么计算不同的长度的选择性呢</strong>？</p><p>先看一下字段在全部数据中的选择度：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(distinct address) / count(*) from shop;<br></code></pre></td></tr></table></figure><p>通过不同长度去计算，与全表的选择性对比：</p><p>公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">count(distinct left(列名, 索引长度))/count(*)<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(distinct left(address, 10 )) / count(*) as sub10, -- 截取前 10 个字符的选择度<br>count(distinct left(address, 15 )) / count(*) as sub11, -- 截取前 15 个字符的选择度<br>count(distinct left(address, 20 )) / count(*) as sub12, -- 截取前 20 个字符的选择度<br>count(distinct left(address, 25 )) / count(*) as sub13 -- 截取前 25 个字符的选择度<br>from shop;<br></code></pre></td></tr></table></figure><p><strong>引申另一个问题：索引列前缀对排序的影响</strong></p><p>如果使用了索引列前缀，比方说前边只把address列的前12个字符放到了二级索引中，下边这个查询可能就有点儿尴尬了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM shop<br>ORDER BY address  # 这个地方order by 就不准了 如果用前12个建立索引的话<br>LIMIT 12;<br></code></pre></td></tr></table></figure><p>因为二级索引中不包含完整的address列信息，所以无法对前12个字符相同，后边的字符不同的记录进行排序，也<br>就是使用索引列前缀的方式<code>无法支持使用索引排序</code>，只能使用文件排序。</p><p><strong>拓展：Alibaba《Java开发手册》</strong></p><p>【<code>强制</code>】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</p><p>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达<code>90% 以上</code>，可以使用 count(distinct left(列名, 索引长度))&#x2F;count(*)的区分度来确定。</p><h4 id="9-区分度高-散列性高-的列适合作为索引"><a href="#9-区分度高-散列性高-的列适合作为索引" class="headerlink" title="9.区分度高(散列性高)的列适合作为索引"></a>9.区分度高(散列性高)的列适合作为索引</h4><p><code>列的基数</code>指的是某一列中不重复数据的个数，比方说某个列包含值2，5，8，2，5，8，2，5，8，虽然有9条记录，但该列的基数却是<code>3</code>。也就是说，<strong>在记录行数一定的情况下，列的基数越大，该列中的值越分散;列的基数越小，该列中的值越集中</strong>。这个列的基数指标非常重要，直接影响我们是否能有效的利用索引。最好为列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。</p><p>可以使用公式 <code>select count(distinct a)/count(*) from t1</code>计算区分度，越接近1越好，一般超过33%就算是比较高效的索引了。</p><p>拓展:联合索引把区分度高(散列性高)的列放在前面。</p><h4 id="10-使用最频繁的列放到联合索引的左侧"><a href="#10-使用最频繁的列放到联合索引的左侧" class="headerlink" title="10.使用最频繁的列放到联合索引的左侧"></a>10.使用最频繁的列放到联合索引的左侧</h4><p>这样也可以较少的建立一些索引。同时，由于”最左前缀原则”，可以增加联合索引的使用率。</p><h4 id="11-在多个字段都要创建索引的情况下，联合索引优于单值索引"><a href="#11-在多个字段都要创建索引的情况下，联合索引优于单值索引" class="headerlink" title="11.在多个字段都要创建索引的情况下，联合索引优于单值索引"></a>11.在多个字段都要创建索引的情况下，联合索引优于单值索引</h4><h3 id="3-3-限制索引的数目"><a href="#3-3-限制索引的数目" class="headerlink" title="3. 3 限制索引的数目"></a>3. 3 限制索引的数目</h3><p>在实际工作中，我们也需要注意平衡，索引的数目不是越多越好。我们需要限制每张表上的索引数量，建议单张表索引数量<code>不超过6个</code>。原因:</p><p>① 每个索引都需要占用<code>磁盘空间</code>，索引越多，需要的磁盘空间就越大。</p><p>② 索引会影响<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>等语句的性能，因为表中的数据更改的同时，索引也会进行调整和更新，会造成负担。</p><p>③优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的<code>索引来进行评估</code>，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，会增加MySQL优化器生成执行计划时间，降低查询性能。</p><h3 id="3-4-哪些情况不适合创建索引"><a href="#3-4-哪些情况不适合创建索引" class="headerlink" title="3. 4 哪些情况不适合创建索引"></a>3. 4 哪些情况不适合创建索引</h3><h4 id="1-在where中使用不到的字段，不要设置索引"><a href="#1-在where中使用不到的字段，不要设置索引" class="headerlink" title="1. 在where中使用不到的字段，不要设置索引"></a>1. 在where中使用不到的字段，不要设置索引</h4><p>WHERE条件(包括GROUP BY、ORDER BY)里用不到的字段不需要创建索引，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的。举个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT course_id,student_id, create_time<br>FROM student_info<br>WHERE student_id = 41251;<br></code></pre></td></tr></table></figure><p>因为我们是按照student_id来进行检索的，所以不需要对其他字段创建索引，即使这些字段出现在SELECT 字段中。</p><h4 id="2-数据量小的表最好不要使用索引"><a href="#2-数据量小的表最好不要使用索引" class="headerlink" title="2. 数据量小的表最好不要使用索引"></a>2. 数据量小的表最好不要使用索引</h4><p>如果表记录太少，比如少于1000个，那么是不需要创建索引的。表记录太少，是否创建索引<code>对查询效率的影响并不大</code>。甚至说，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</p><p>举例：创建表 1 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_without_index(<br>a INT PRIMARY KEY AUTO_INCREMENT,<br>b INT<br>);<br></code></pre></td></tr></table></figure><p>提供存储过程 1 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#创建存储过程<br><br>DELIMITER //<br>CREATE PROCEDURE t_wout_insert()<br>BEGIN<br>DECLARE i INT DEFAULT 1 ;<br>    WHILE i &lt;= 900<br>    DO<br>INSERT INTO t_without_index(b) SELECT RAND()* 10000 ;<br>SET i = i + 1 ;<br>END WHILE;<br>COMMIT;<br>END //<br>DELIMITER ;<br><br>#调用<br>CALL t_wout_insert();<br></code></pre></td></tr></table></figure><p>创建表 2 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_with_index(<br>a INT PRIMARY KEY AUTO_INCREMENT,<br>b INT,<br>INDEX idx_b(b)<br>);<br></code></pre></td></tr></table></figure><p>创建存储过程 2 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#创建存储过程<br><br>DELIMITER //<br>CREATE PROCEDURE t_with_insert()<br>BEGIN<br>DECLARE i INT DEFAULT 1 ;<br>WHILE i &lt;= 900<br>DO<br>INSERT INTO t_with_index(b) SELECT RAND()* 10000 ;<br>SET i = i + 1 ;<br>END WHILE;<br>COMMIT;<br>END //<br>DELIMITER ;<br>#调用<br>CALL t_with_insert();<br></code></pre></td></tr></table></figure><p>查询对比：</p><p>你能看到运行结果相同，但是在数据量不大的情况下，索引就发挥不出作用了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from t_without_index where b = 9879 ;<br>+------+------+<br>| a | b |<br>+------+------+<br>| 1242 | 9879 |<br>+------+------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select * from t_with_index where b = 9879 ;<br>+-----+------+<br>| a | b |<br>+-----+------+<br>| 112 | 9879 |<br>+-----+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><blockquote><p>结论：在数据表中的数据行数比较少的情况下，比如不到 1000 行，是不需要创建索引的。</p></blockquote><h4 id="3-有大量重复数据的列上不要建立索引"><a href="#3-有大量重复数据的列上不要建立索引" class="headerlink" title="3. 有大量重复数据的列上不要建立索引"></a>3. 有大量重复数据的列上不要建立索引</h4><p>在条件表达式中经常用到的不同值较多的列上建立索引，但字段中如果有大量重复数据，也不用创建索引。比如在学生表的”<code>性别</code>“字段上只有“男”与“·女”两个不同值，因此无须建立索引。如果建立索引，不但不会提高查询效率，反而会<code>严重降低数据更新速度</code>。</p><p>举例 1 ：要在 100 万行数据中查找其中的 50 万行（比如性别为男的数据），一旦创建了索引，你需要先访问 50 万次索引，然后再访问 50 万次数据表，这样加起来的开销比不使用索引可能还要大。</p><p>举例 2 ：假设有一个学生表，学生总数为 100 万人，男性只有 10 个人，也就是占总人口的 10 万分之 1 。</p><p>学生表 student_gender 结构如下。其中数据表中的 student_gender 字段取值为 0 或 1 ， 0 代表女性， 1 代表男性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE student_gender(<br>student_id INT( 11 ) NOT NULL,<br>student_name VARCHAR( 50 ) NOT NULL,<br>student_gender TINYINT( 1 ) NOT NULL,<br>PRIMARY KEY(student_id)<br>)ENGINE = INNODB;<br></code></pre></td></tr></table></figure><p>如果我们要筛选出这个学生表中的男性，可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM student_gender WHERE student_gender = 1<br></code></pre></td></tr></table></figure><p>运行结果（ 10 条数据，运行时间 0.696s）：</p><p><img src="/medias/13%E3%80%81MySQL_%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.assets/image-20220325170858020.png" alt="image-20220325170858020"></p><p>你能看到在未创建索引的情况下，运行的效率并不高。如果针对 student_gender字段创建索引呢?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM student gender WHERE student_gender = 1<br></code></pre></td></tr></table></figure><p>同样是10条数据，运行结果相同，时间却缩短到了0.052s，大幅提升了查询的效率。</p><p>其实通过这两个实验你也能看出来，索引的价值是帮你快速定位。如果想要定位的数据有很多，那么索引就失去了它的使用价值，比如通常情况下的性别字段。</p><blockquote><p>在这个例子中，索引可以快速定位出男生是有用的。</p></blockquote><h4 id="4-避免对经常更新的表创建过多的索引"><a href="#4-避免对经常更新的表创建过多的索引" class="headerlink" title="4.避免对经常更新的表创建过多的索引"></a>4.避免对经常更新的表创建过多的索引</h4><p>第一层含义: 频繁<code>更新的字段</code>不一定要创建索引。因为更新数据的时候，也需要更新索引，如果索引太多，在更新索引的时候也会造成负担，从而影响效率。</p><p>第二层含义: 避免对<code>经常更新的表</code>创建过多的索引，并且索引中的列尽可能少。此时，虽然提高了查询速度，同时却会降低更新表的速度。</p><h4 id="5-不建议用无序的值作为索引"><a href="#5-不建议用无序的值作为索引" class="headerlink" title="5.不建议用无序的值作为索引"></a>5.不建议用无序的值作为索引</h4><p>例如身份证、UUID(在索引比较时需要转为ASCII，并且插入时可能造<code>成页分裂</code>)、MD5、HASH、无序长字符串等。</p><h4 id="6-删除不再使用或者很少使用的索引"><a href="#6-删除不再使用或者很少使用的索引" class="headerlink" title="6.删除不再使用或者很少使用的索引"></a>6.删除不再使用或者很少使用的索引</h4><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h4 id="7-不要定义冗余或重复的索引"><a href="#7-不要定义冗余或重复的索引" class="headerlink" title="7.不要定义冗余或重复的索引"></a>7.不要定义冗余或重复的索引</h4><p><strong>① 冗余索引</strong></p><p>举例：建表语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE person_info(<br>    id INT UNSIGNED NOT NULL AUTO_INCREMENT,<br>    name VARCHAR( 100 ) NOT NULL,<br>    birthday DATE NOT NULL,<br>    phone_number CHAR( 11 ) NOT NULL,<br>    country varchar( 100 ) NOT NULL,<br>    PRIMARY KEY (id),<br>    KEY idx_name_birthday_phone_number (name( 10 ), birthday, phone_number),<br>    KEY idx_name (name( 10 ))<br>);<br></code></pre></td></tr></table></figure><p>我们知道，通过<code>idx_name_birthday_phone_number</code>索引就可以对<code>name</code>列进行快速搜索，再创建一个专门针对<code>name</code>列的索引就算是一个<code>冗余索引</code>，维护这个索引只会增加维护的成本，并不会对搜索有什么好处。</p><p><strong>② 重复索引</strong></p><p>另一种情况，我们可能会对某个列<code>重复建立索引</code>，比方说这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE repeat_index_demo (<br>col1 INT PRIMARY KEY,<br>col2 INT,<br>UNIQUE uk_idx_c1 (col1),<br>INDEX idx_c1 (col1)<br>);<br></code></pre></td></tr></table></figure><p>我们看到，col 1 既是主键、又给它定义为一个唯一索引，还给它定义了一个普通索引，可是主键本身就会生成聚簇索引，所以定义的唯一索引和普通索引是重复的，这种情况要避免。</p><h2 id="3-5小结"><a href="#3-5小结" class="headerlink" title="3.5小结"></a>3.5小结</h2><p>索引是一把<code>双刃剑</code>，可提高查询效率，但也会降低插入和更新的速度并占用磁盘空间。</p><p>选择索引的最终目的是为了使查询的速度变快，上面给出的原则是最基本的准则，但不能拘泥于上面的准则，在以后的学习和工作中进行不断的实践，根据应用的实际情况进行分析和判断，选择最合适的索引方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-08-章-索引的创建与设计原则&quot;&gt;&lt;a href=&quot;#第-08-章-索引的创建与设计原则&quot; class=&quot;headerlink&quot; title=&quot;第 08 章_索引的创建与设计原则&quot;&gt;&lt;/a&gt;第 08 章_索引的创建与设计原则&lt;/h1&gt;&lt;h2 id=&quot;1-索引的</summary>
      
    
    
    
    <category term="数据库" scheme="https://iexlee.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL 索引的数据结构</title>
    <link href="https://iexlee.github.io/12%E3%80%81InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html"/>
    <id>https://iexlee.github.io/12%E3%80%81InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html</id>
    <published>2022-08-02T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第07章-InnoDB数据存储结构"><a href="#第07章-InnoDB数据存储结构" class="headerlink" title="第07章_InnoDB数据存储结构"></a>第07章_InnoDB数据存储结构</h1><p>1.数据库的存储结构:页</p><p>​1.1磁盘与内存交互基本单位:页</p><p>​1.2页结构概述</p><p>​1.3页的大小</p><p>​1.4页的上层结构</p><p>2.页的内部结构<br>​</p><p>第1部分:File Header(文件头部）和File Trailer (文件尾部)</p><h2 id="1-数据库的存储结构-页"><a href="#1-数据库的存储结构-页" class="headerlink" title="1.数据库的存储结构:页"></a>1.数据库的存储结构:页</h2><p>索引结构给我们提供了高效的索引方式，不过索引信息以及数据记录都是保存在文件上的，确切说是存储在页结构中。另一方面，索引是在存储引擎中实现的，MySQL服务器上的<strong>存储引擎</strong>负责对表中数据的读取和写入工作。不同存储引擎中<strong>存放的格式</strong>一般是不同的，甚至有的存储引擎比如Memory都不用磁盘来存储数据。</p><p>由于InnoDB是MySQL的默认存储引擎，所以本章剖析InnoDB存储引擎的数据存储结构。</p><h3 id="1-1磁盘与内存交互基本单位-页"><a href="#1-1磁盘与内存交互基本单位-页" class="headerlink" title="1.1磁盘与内存交互基本单位:页"></a>1.1磁盘与内存交互基本单位:页</h3><p>InnoDB将数据划分为若干个页，InnoDB中页的大小默认为 <strong>16KB</strong></p><p>以<code>页</code>作为磁盘和内存之间交互的<code>基本单位</code>，也就是一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB内容刷新到磁盘中。也就是说，<strong>在数据库中，不论读一行，还是读多行，都是将这些行所在的页进行加载。也就是说，数据库管理存储空间的基本单位是页(Page)，数据库I&#x2F;O操作的最小单位是页。</strong>一个页中可以存储多个行记录</p><blockquote><p>记录是按照行来存储的，但是数据库的读取并不以行为单位，否则一次读取（也就是一次I&#x2F;O操作)只能处理一行数据，效率会非常低。</p></blockquote><p><img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/image-20220324200116204.png" alt="image-20220324200116204"></p><h3 id="1-2页结构概述"><a href="#1-2页结构概述" class="headerlink" title="1.2页结构概述"></a>1.2页结构概述</h3><p>页a、页b、页c …页n这些页可以不<code>在物理结构上相连</code>，只要通过<code>双向链表</code>相关联即可。每个数据页中的记录会按照主键值从小到大的顺序组成一个<code>单向链表</code>，每个数据页都会为存储在它里边的记录生成一个<code>页目录</code>，在通过主键查找某条记录的时候可以在页目录<code>中使用二分法</code>快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</p><h3 id="1-3页的大小"><a href="#1-3页的大小" class="headerlink" title="1.3页的大小"></a>1.3页的大小</h3><p>不同的数据库管理系统（简称DBMS）的页大小不同。比如在MySQL的InnoDB存储引擎中，默认页的大小是<strong>16KB</strong>，可以通过下面的命令来进行查看:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">show variables like <span class="hljs-string">&#x27;%innodb_page_size%&#x27;</span>;<br>/*<br>+------------------+-------+<br>| Variable_name    | Value |<br>+------------------+-------+<br>| innodb_page_size | 16384 |<br>+------------------+-------+<br>*/<br></code></pre></td></tr></table></figure><p>SQL Server中页的大小为 <code>8KB</code>，而在oracle中用术语’’<code>块</code>’’(Block)来代表”页”，Oralce支持的块大小为2KB，4KB，8KB，16K8，32KB和64KB。</p><h3 id="1-4页的上层结构"><a href="#1-4页的上层结构" class="headerlink" title="1.4页的上层结构"></a>1.4页的上层结构</h3><p>另外在数据库中，还存在区（Extent)、段(Segment)和表空间（Tablespace)的概念。行、页、区、段、表空间的关系如下图所示:</p><p><img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/image-20220324200502569.png" alt="image-20220324200502569"></p><p>区(Extent)是比页大一级的存储结构，在InnoDB存储引擎中，一个区会分配<code>64个连续的页</code>。因为InnoDB中的页大小默认是16KB，所以一个区的大小是64*16KB&#x3D; 1MB。</p><p>段(Segment)由一个或多个区组成，区在文件系统是一个连续分配的空间（在InnoDB中是连续的64个页)，不过在段中不要求区与区之间是相邻的。<code>段是数据库中的分配单位，不同类型的数据库对象以不同的段形式存在。</code> 当创建数据表、索引的时候，就会相应创建对应的段，比如创建一张表时会创建一个表段，创建一个索引时会创建一个索引段。</p><p>表空间（Tablespace)是一个逻辑容器，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只能属于一个表空间。数据库由一个或多个表空间组成，表空间从管理上可以划分为系统表空间，<code>用户表空间</code>、<code>撤销表空间</code>、<code>临时表空间</code>等。</p><h2 id="2-页的内部结构"><a href="#2-页的内部结构" class="headerlink" title="2.页的内部结构"></a>2.页的内部结构</h2><p>页如果按类型划分的话，常见的有<code>数据页（保存B+树节点）</code>、<code>系统页</code>、<code>Undo页</code>和<code>事务数据页</code>等。数据页是我们最常使用的页。<br>数据页的<code>16KB</code>大小的存储空间被划分为七个部分，分别是文件头(File Header)、页头(Page Header)、最大最小记录(Infimum+supremum)、用户记录(User Records)、空闲空间(Free Space)、页目录(Page Directory)和文件尾(File Tailer) 。</p><p>页结构的示意图如下所示:</p><p><img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/image-20220324200934245.png" alt="image-20220324200934245"></p><p>这7个部分作用分别如下，简单梳理如下表所示:</p><table><thead><tr><th>名称</th><th>占用大小</th><th>说明</th></tr></thead><tbody><tr><td>File Header</td><td>38字节</td><td>文件头，描述页的信息</td></tr><tr><td>Page Header</td><td>56字节</td><td>页头,页的状态信息</td></tr><tr><td>lnfimum-Supremum</td><td>26字节</td><td>最大和最小记录，这是两个虚拟的行记录</td></tr><tr><td>User Records</td><td>不确定</td><td>用户记录，存储行记录内容</td></tr><tr><td>Free Space</td><td>不确定</td><td>空闲记录，页中还没有被使用的空间</td></tr><tr><td>Page Directory</td><td>不确定</td><td>页目录，存储用户记录的相对位置</td></tr><tr><td>File Trailer</td><td>8字节</td><td>文件尾,校验页是否完整</td></tr></tbody></table><p>我们可以把这7个结构分成3个部分</p><h3 id="第1部分-File-Header-文件头部）和File-Trailer-文件尾部"><a href="#第1部分-File-Header-文件头部）和File-Trailer-文件尾部" class="headerlink" title="第1部分: File Header(文件头部）和File Trailer (文件尾部)"></a>第1部分: File Header(文件头部）和File Trailer (文件尾部)</h3><p>首先是<code>文件通用部分</code>，也就是<code>文件头</code>和<code>文件尾</code>。</p><p><strong>① 文件头部信息</strong></p><p><img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/image-20220324201808920.png" alt="image-20220324201808920"></p><h3 id="2-3-从数据页角度看B-树如何查询"><a href="#2-3-从数据页角度看B-树如何查询" class="headerlink" title="2.3 从数据页角度看B + 树如何查询"></a>2.3 从数据页角度看B + 树如何查询</h3><p>一棵B+树按照节点类型可以分成两部分:<br>1．叶子节点，B+树最底层的节点，节点的高度为o，存储行记录。<br>2．非叶子节点，节点的高度大于0，存储索引键和页面指针，并不存储行记录本身。</p><p><img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/image-20220324224809508.png" alt="image-20220324224809508"></p><p>当我们从页结构来理解B+树的结构的时候，可以帮我们理解一些通过索引进行检索的原理:</p><p><strong>1.B+树是如何进行记录检索的?</strong></p><p>如果通过B+树的索引查询行记录，首先是从B+树的根开始，逐层检索，直到找到叶子节点，也就是找到对应的数据页为止，将数据页加载到内存中，页目录中的槽(slot)采用<code>二分查找</code>的方式先找到一个粗略的记录分组然后再在分组中通过<code>链表遍历</code>的方式查找记录。</p><p><strong>2.普通索引和唯一索引在查询效率上有什么不同?</strong></p><p>我们创建索引的时候可以是普通索引，也可以是唯一索引，那么这两个索引在查询效率上有什么不同呢?</p><p>唯一索引就是在普通索引上增加了约束性，也就是关键字唯一，找到了关键字就停止检索。而普通索引，可能会存在用户记录中的关键字相同的情况，根据页结构的原理，当我们读取一条记录的时候，不是单独将这条记录从磁盘中读出去，而是将这个记录所在的页加载到内存中进行读取。InnoDB存储引擎的页大小为16KB，在一个页中可能存储着上千个记录，因此在普通索引的字段上进行查找也就是在内存中多几次“<code>判断下一条记录</code>”的操作，对于CPU来说，这些操作所消耗的时间是可以忽略不计的。所以对一个索引字段进行检索，采用普通索引还是唯一索引在检索效率上基本上没有差别。</p><h2 id="3-InnoDB行格式-或记录格式"><a href="#3-InnoDB行格式-或记录格式" class="headerlink" title="3.InnoDB行格式(或记录格式)"></a>3.InnoDB行格式(或记录格式)</h2><p>我们平时的数据以行为单位来向表中插入数据，这些记录在磁盘上的存放方式也被称为行格式或者记录格式。</p><p>InnoDB存储引擎设计了4种不同类型的行格式，分别是Compact（紧密）、Redundant（冗余）、Dynamic（动态）和Compressed（压缩）行格式。查看</p><p>MySQL8 与 MySQL5.7的默认行格式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-keyword">select</span> @@innodb_default_row_format;<br>+-----------------------------+<br>| @@innodb_default_row_format |<br>+-----------------------------+<br>| dynamic                     |<br>+-----------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment"># 查询单张表行格式</span><br>mysql&gt; show table status like <span class="hljs-string">&#x27;departments&#x27;</span> \G<br>*************************** 1. row ***************************<br>           Name: departments<br>         Engine: InnoDB<br>        Version: 10<br> <span class="hljs-comment">#行格式  Row_format: Dynamic</span><br>           Rows: 27<br> Avg_row_length: 606<br>    Data_length: 16384<br>Max_data_length: 0<br>   Index_length: 49152<br>      Data_free: 0<br> Auto_increment: NULL<br>    Create_time: 2022-03-23 14:56:38<br>    Update_time: 2022-03-23 14:56:38<br>     Check_time: NULL<br>      Collation: utf8_general_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="4-区、段与碎片区"><a href="#4-区、段与碎片区" class="headerlink" title="4.区、段与碎片区"></a>4.区、段与碎片区</h2><h3 id="4-1为什么要有区"><a href="#4-1为什么要有区" class="headerlink" title="4.1为什么要有区?"></a>4.1为什么要有区?</h3><p><code>B+</code>树的每一层中的页都会形成一个双向链表，如果是以<code>页为单位</code>来分配存储空间的话，双向链表相邻的两个页之间的<code>物理位置</code>可能离得非常远。我们介绍B+树索引的适用场景的时候特别提到范围查询只需要定位到最左边的记录和最右边的记录,然后沿着双向链表一直扫描就可以了，而如果链表中相邻的两个页物理位置离得非常远，就是所谓的<code>随机I/0</code>。再一次强调，磁盘的速度和内存的速度差了好几个数量级，<code>随机I/0是非常慢的</code>，所以我们应该尽量让链表中相邻的页的物理位置也相邻，这样进行范围查询的时候才可以使用所谓的<code>顺序I/0</code>。</p><blockquote><p>这样利用了磁盘的预读特性</p></blockquote><p>[查看4.n 扩展 理解mysql如何利用预读特性](#4.n 扩展)</p><p>引入<code>区</code>的概念，一个区就是在物理位置上<strong>连续</strong>的<code>64个页</code>。因为InnoDB 中的页大小默认是16KB，所以一个区的大小是64*16KB&#x3D;<code>1MB</code>。在表中<code>数据量大</code>的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照<code>区为单位</code>分配，甚至在表中的数据特别多的时候，可以一次性分配多个连续的区。虽然可能造成<code>一点点空间的浪费</code>（数据不足以填充满整个区)，但是从性能角度看，可以消除很多的随机I&#x2F;O，<code>功大于过</code>!</p><blockquote><p>这里是连续的64个页， 但是具体的两个页之间还是用指针相连的。保证一大块区域连续。</p></blockquote><h3 id="4-2为什么要有段"><a href="#4-2为什么要有段" class="headerlink" title="4.2为什么要有段?"></a>4.2为什么要有段?</h3><p>对于范围查询，其实是对B+树叶子节点中的记录进行顺序扫描，而如果不区分叶子节点和非叶子节点，统统把节点代表的页面放到申请到的区中的话，进行范围扫描的效果就大打折扣了。所以InnoDB对B+树的<code>叶子节点</code>和<code>非叶子节点</code>进行了区别对待，也就是说叶子节点有自己独有的区，非叶子节点也有自己独有的区。存放叶子节点的区的集合就算是一个<code>段( segment)</code>，存放非叶子节点的区的集合也算是一个段。也就是说一个索引会生成2个段，一个<code>叶子节点段</code>，一个<code>非叶子节点段</code>。</p><p>除了索引的叶子节点段和非叶子节点段之外，InnoDB中还有为存储一些特殊的数据而定义的段，比如回滚段。所以，常见的段有<code>数据段</code>、<code>索引段</code>、<code>回滚段</code>。数据段即为B+树的叶子节点，索引段即为B+树的非叶子节点。</p><p>在InnoDB存储引擎中，对段的管理都是由引擎自身所完成，DBA不能也没有必要对其进行控制。这从一定程度上简化了DBA对于段的管理。</p><p>段其实不对应表空间中某一个连续的物理区域，而是一个逻辑上的概念，由若干个零散的页面以及一些完整的区组成。</p><blockquote><p>零散的页面，看碎片区</p></blockquote><h3 id="4-3为什么要有碎片区"><a href="#4-3为什么要有碎片区" class="headerlink" title="4.3为什么要有碎片区?"></a>4.3为什么要有碎片区?</h3><p>默认情况下，一个使用InnoDB存储引擎的表只有一个聚簇索引，一个索引会生成2个段，而段是以区为单位申请存储空间的，一个区默认占用1M (64*16Kb&#x3D;1024Kb）存储空间，所以<strong>默认情况下一个只存了几条记录的小表也需要2M的存储空间么?<strong>以后每次添加一个索引都要多申请2M的存储空间么?这对于存储记录比较少的表简直是天大的浪费。这个问题的症结在于到现在为止我们介绍的区都是非常</strong>纯粹的</strong>，也就是一个区被整个分配给某一个段，或者说区中的所有页面都是为了存储同一个段的数据而存在的，即使段的数据填不满区中所有的页面，那余下的页面也不能挪作他用。</p><p>为了考虑以完整的区为单位分配给某个段对于<code>数据量较小</code>的表太浪费存储空间的这种情况，InnoDB提出了一个<code>碎片(fragment)区</code>的概念。在一个碎片区中，并不是所有的页都是为了存储同一个段的数据而存在的，而是碎片区中的页可以用于不同的目的，比如有些页用于段A，有些页用于段B，有些页甚至哪个段都不属于。<code>碎片区直属于表空间</code>，并不属于任何一个段。</p><p>所以此后为某个段分配存储空间的策略是这样的:</p><ul><li>在刚开始向表中插入数据的时候，段是从某个碎片区以单个页面为单位来分配存储空间的</li><li>当某个段已经占用了<code>32个碎片区</code>页面之后，就会申请以完整的区为单位来分配存储空间。</li></ul><p>所以现在段不能仅定义为是某些区的集合，更精确的应该是<strong>某些零散的页面</strong>以及<strong>一些完整的区</strong>的集合。</p><h3 id="4-4区的分类"><a href="#4-4区的分类" class="headerlink" title="4.4区的分类"></a>4.4区的分类</h3><p>区大体上可以分为4种类型:</p><ul><li><code>空闲的区(FREE)</code>:  现在还没有用到这个区中的任何页面。</li><li><code>有剩余空间的碎片区(FREE_FRAG):</code>  表示碎片区中还有可用的页面。</li><li><code>没有剩余空间的碎片区(FULL_FRAG)</code>︰表示碎片区中的所有页面都被使用，没有空闲页面。</li><li><code>附属于某个段的区(FSEG):</code>每一个索引都可以分为叶子节点段和非叶子节点段。</li></ul><p>处于<code>FREE</code>、<code>FREE_FRAG</code>以及<code>FULL_FRAG</code>这三种状态的区都是独立的，直属于表空间。而处于FSEG状态的区是附属于某个段的。</p><blockquote><p>如果把表空间比作是一个集团军，段就相当于师，区就相当于团。一般的团都是隶属于某个师的，就像是处于<code>FSEG</code>的区全都隶属于某个段，而处于<code>FREE</code>、<code>FREE_FRAG</code>以及<code>FULL_FRAG</code>这三种状态的区却直接隶属于表空间，就像独立团直接听命于军部一样。</p></blockquote><h3 id="4-n-扩展"><a href="#4-n-扩展" class="headerlink" title="4.n 扩展"></a>4.n 扩展</h3><p>那么，计算机怎样才能判断一个数据接下来可能被用到？</p><blockquote><p>时间局部性（Temporal Locality）</p></blockquote><p>时间局部性：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</p><p>&#x2F;&#x2F; 这是可以理解的，用过的数据当然可能再次被用到。</p><blockquote><p>空间局部性（Spatial Locality）</p></blockquote><p> 空间局部性：在最近的将来将用到的信息很可能与现在正在使用的信息在空间地址上是临近的。</p><p>&#x2F;&#x2F; 正在使用的某个数据地址旁边的数据，当然也是很可能被用到的，比如某个数组、集合等等。</p><blockquote><p>顺序局部性（Order Locality）</p></blockquote><p> 顺序局部性：在典型程序中，除转移类指令外，大部分指令是顺序进行的。顺序执行和非顺序执行的比例大致是5:1。此外，对大型数组访问也是顺序的。</p><p>指令的顺序执行、数组的连续存放等是产生顺序局部性的原因。</p><p>&#x2F;&#x2F; 正在执行的某个指令以及还在排队等候处理的指令，大部分是按照顺序来执行的。</p><blockquote><p>磁盘预读原理</p></blockquote><p> 内存比磁盘的读写速度要快很多，但内存容量要远小于磁盘，而数据、程序的执行要调入内存后才能执行，所以内存和磁盘要经常进行I&#x2F;O操作，I&#x2F;O操作是个费事的过程，虽然现代系统已经有了通道（I&#x2F;O处理机）技术的支持，但这远远不够（CPU的处理速度远远大于磁盘I&#x2F;O的速度）。</p><p><strong>所以磁盘读取的时候会顺带加载附近的数据到缓存</strong></p><blockquote><p> 磁盘读取（详细）</p></blockquote><p>磁盘存取，磁盘I&#x2F;O涉及机械操作。磁盘是由大小相同且同轴的圆形盘片组成，磁盘可以转动(各个磁盘须同时转动)。磁盘的一侧有磁头支架，磁头支架固定了一组磁头，每个磁头负责存取一个磁盘的内容。磁头不动，磁盘转动，但磁臂可以前后动，用于读取不同磁道上的数据。磁道就是以盘片为中心划分出来的一系列同心环。磁道又划分为一个个小段，叫扇区，是磁盘的最小存储单元。 </p><p>磁盘读取时，系统将数据逻辑地址传给磁盘，磁盘的控制电路会解析出物理地址（哪个磁道，哪个扇区），于是磁头需要前后移动到相应的磁道——寻道，消耗的时间叫——寻道时间，磁盘旋转将对应的扇区转到磁头下（磁头找到对应磁道的对应扇区），消耗的时间叫——旋转时间，这一系列操作是非常耗时。</p><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p>为了尽量减少I&#x2F;O操作，计算机系统一般采取预读的方式，预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后<code>连续读取一页或几页载入内存中</code>，然后异常返回，程序继续运行。</p><p>计算机系统是分页读取和存储的，一般一页为4KB（8个扇区，每个扇区125B，8<em>125B&#x3D;4KB），每次读取和存取的最小单元为一页，而</em>*<code>磁盘预读时通常会读取页的整倍数</code>**。根据文章上述的【局部性原理】①当一个数据被用到时，其附近的数据也通常会马上被使用。②程序运行期间所需要的数据通常比较集中。由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），所以即使只需要读取一个字节，磁盘也会读取一页的数据。</p><p>至于磁盘分页，参考计算机操作系统的分页，分段存储管理——逻辑地址和物理地址被分为大小相同的页面，逻辑地址中叫页，物理地址中叫块。</p><h4 id="为什么使用B-Tree-x2F-B-Tree"><a href="#为什么使用B-Tree-x2F-B-Tree" class="headerlink" title="为什么使用B-Tree&#x2F;B+Tree"></a>为什么使用B-Tree&#x2F;B+Tree</h4><p>二叉查找树进化品种的红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用B-Tree&#x2F;B+Tree作为索引结构。</p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I&#x2F;O消耗，相对于内存存取，I&#x2F;O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I&#x2F;O操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘I&#x2F;O的存取次数。</p><p>分析B-Tree&#x2F;B+Tree检索一次最多需要访问节点：</p><p>h&#x3D;<img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/format,png.png" alt="img"></p><p>数据库系统巧妙利用了磁盘预读原理，将<code>一个节点的大小设为等于一个页</code>，这样每个节点只需要一次I&#x2F;O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：</p><pre><code class="hljs">  每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。</code></pre><p>　　B-Tree中一次检索最多需要h-1次I&#x2F;O（根节点常驻内存），渐进复杂度为O（h）&#x3D;O（logmN）。一般实际应用中，m是非常大的数字，通常超过100，因此h非常小（通常不超过3）。</p><p>　　综上所述，用B-Tree作为索引结构效率是非常高的。</p><p>　　而红黑树这种结构，h明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的I&#x2F;O渐进复杂度也为O（h），效率明显比B-Tree差很多。</p><p><strong>B树与B+Tree</strong></p><p>B-Tree：如果一次检索需要访问4个节点，数据库系统设计者利用磁盘预读原理，把节点的大小设计为一个页，那读取一个节点只需要一次I&#x2F;O操作，完成这次检索操作，最多需要3次I&#x2F;O(根节点常驻内存)。数据记录越小，每个节点存放的数据就越多，树的高度也就越小，I&#x2F;O操作就少了，检索效率也就上去了。</p><p>B+Tree：非叶子节点只存key，大大滴减少了非叶子节点的大小，那么每个节点就可以存放更多的记录，树更矮了，I&#x2F;O操作更少了。所以B+Tree拥有更好的性能。</p><h2 id="5-表空间"><a href="#5-表空间" class="headerlink" title="5.表空间"></a>5.表空间</h2><p>表空间可以看做是InnoDB存储引擎逻辑结构的最高层，所有的数据都存放在表空间中。</p><p>表空间是一个<code>逻辑容器</code>，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只能属于一个表空间。表空间数据库由一个或多个表空间组成，表空间从管理上可以划分为<code>系统表空间</code> (System<br>tablespace)、<code>独立表空间</code>(File-per-table tablespace)、<code>撤销表空间</code>(Undo Tablespace)和<code>临时表空间</code>(Temporary Tablespace）等。</p><h3 id="5-1独立表空间"><a href="#5-1独立表空间" class="headerlink" title="5.1独立表空间"></a>5.1独立表空间</h3><p>独立表空间，即每张表有一个独立的表空间，也就是数据和索引信息都会保存在自己的表空间中。独立的表空间(即:单表)可以在不同的数据库之间进行<code>迁移</code>。</p><p>空间可以回收(DROPTABLE操作可自动回收表空间;其他情况，表空间不能自己回收)。如果对于统计分析或是日志表，删除大量数据后可以通过: <code>alter table TableName engine=innodb</code>;回收不用的空间。对于使用独立表空间的表，不管怎么删除，表空间的碎片不会太严重的影响性能，而且还有机会处理。</p><p><strong>独立表空间结构</strong></p><p>独立表空间由段、区、页组成。前面已经讲解过了。</p><p><strong>真实表空间对应的文件大小</strong><br>我们到数据目录里看，会发现一个新建的表对应的<code>.ibd</code>文件只占用了<code>96K</code>，才6个页面大小(MySQL5.7中)，这是因为一开始表空间占用的空间很小，因为表里边都没有数据。不过别忘了这些.ibd文件是<code>自扩展的</code>，随着表中数据的增多，表空间对应的文件也逐渐增大。</p><p>查看InnoDB的表空间类型:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看是否独立表空间</span><br>mysql&gt; show variables like <span class="hljs-string">&#x27;innodb_file_per_table&#x27;</span>;<br>+-----------------------+-------+<br>| Variable_name         | Value |<br>+-----------------------+-------+<br>| innodb_file_per_table | ON    |<br>+-----------------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>MySQL8.0中 7个页面大小。原因.idb 还存了 表结构。。。表结构.frm取消了</p><h3 id="5-2系统表空间"><a href="#5-2系统表空间" class="headerlink" title="5.2系统表空间"></a>5.2系统表空间</h3><p>系统表空间的结构和独立表空间基本类似，只不过由于整个MySQL进程只有一个系统表空间，在系统表空间中会额外记录一些有关整个系统信息的页面，这部分是独立表空间中没有的。</p><p><strong>lnnoDB数据字典</strong></p><p>每当我们向一个表中插入一条记录的时候，<code>MySQL校验过程</code>如下:</p><p>先要校验一下插入语句对应的表存不存在，插入的列和表中的列是否符合，如果语法没有问题的话，还需要知道该表的聚簇索引和所有二级索引对应的根页面是哪个表空间的哪个页面，然后把记录插入对应索引的B+树中。所以说，MySQL除了保存着我们插入的用户数据之外，还需要保存许多额外的信息，比方说:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">-某个表属于哪个表空间，表里边有多少列<br>-表对应的每一个列的类型是什么<br>-该表有多少索引，每个索引对应哪几个字段，该索引对应的根页面在哪个表空间的哪个页面<br>-该表有哪些外键，外键对应哪个表的哪些列<br>-某个表空间对应文件系统上文件路径是什么<br>- ...<br></code></pre></td></tr></table></figure><p>上述这些数据并不是我们使用<code>INSERT</code>语句插入的用户数据，实际上是为了更好的管理我们这些用户数据而不得已引入的一些额外数据，这些数据也称为<code>元数据</code>。InnoDB存储引擎特意定义了一些列的<code>内部系统表</code>(internalsystem table)来记录这些这些元数据:</p><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td><code>SYS_TABLES</code></td><td>整个InnoDB存储引擎中所有的表的信息</td></tr><tr><td><code>SYS_COLUMNS</code></td><td>整个InnoDB存储引擎中所有的列的信息</td></tr><tr><td><code>SYS_INDEXES</code></td><td>整个InnoDB存储引擎中所有的索引的信息</td></tr><tr><td><code>SYS_FIELDS</code></td><td>整个InnoDB存储引擎中所有的索引对应的列的信息</td></tr><tr><td>SYS_FOREIGN</td><td>整个InnoDB存储引擎中所有的外键的信息</td></tr><tr><td>SYS_FOREIGN_COLS</td><td>整个InnoDB存储引擎中所有的外键对应列的信息</td></tr><tr><td>SYS_TABLESPACES</td><td>整个InnoDB存储引擎中所有的表空间信息</td></tr><tr><td>SYS_DATAFILES</td><td>整个InnoDB存储引擎中所有的表空间对应文件系统的文件路</td></tr><tr><td>SYS_VIRTUAL</td><td>整个InnoDB存储引擎中所有的虚拟生成列的信息</td></tr></tbody></table><p>这些系统表也被称为<code>数据字典</code>，它们都是以<code>B+</code>树的形式保存在系统表空间的某些页面中，其中<code>SYS_TABLES</code>.<br><code>SYS_COLUNNS</code>、<code>SYS_INDEXES</code>、<code>SYS_FIELDS</code>这四个表尤其重要，称之为基本系统表(basic system tables) </p><p>注意:用户是<code>不能直接访问</code>InnoDB的这些内部系统表，除非你直接去解析系统表空间对应文件系统上的文件。不过考虑到查看这些表的内容可能有助于大家分析问题，所以在系统数据库<code>information_schema</code>中提供了一些以innodb_sys开头的表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; USE information_schema ;<br>Database changed<br>mysql&gt; SHOW TABLES LIKE <span class="hljs-string">&#x27;innodb_sys%&#x27;</span>;<br>+--------------------------------------------+<br>| Tables_in_information_schema (innodb_sys%) |<br>+--------------------------------------------+<br>| INNODB_SYS_DATAFILES                       |<br>| INNODB_SYS_VIRTUAL                         |<br>| INNODB_SYS_INDEXES                         |<br>| INNODB_SYS_TABLES                          |<br>| INNODB_SYS_FIELDS                          |<br>| INNODB_SYS_TABLESPACES                     |<br>| INNODB_SYS_FOREIGN_COLS                    |<br>| INNODB_SYS_COLUMNS                         |<br>| INNODB_SYS_FOREIGN                         |<br>| INNODB_SYS_TABLESTATS                      |<br>+--------------------------------------------+<br>10 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>在<code>information_schema</code>数据库中的这些以<code>INNODB_SYS</code>开头的表并不是真正的内部系统表(内部系统表就是我们上边以SYS开头的那些表)，而是在存储引擎启动时读取这些以<code>SYS</code>开头的系统表，然后填充到这些以<br><code>INNODB_SYS</code>开头的表中。以<code>INNODB_SYS</code>开头的表和以<code>SYS</code>开头的表中的字段并不完全一样，但供大家参考已经足矣。</p><h2 id="附录-数据页加载的三种方式"><a href="#附录-数据页加载的三种方式" class="headerlink" title="附录:数据页加载的三种方式"></a>附录:数据页加载的三种方式</h2><p>InnoDB从磁盘中读取数据的<code>最小单位</code>是数据页。而你想得到的id &#x3D; xoxx的数据，就是这个数据页众多行中的一行。</p><p>对于MySQL存放的数据，逻辑概念上我们称之为表，在磁盘等物理层面而言是<code>按数据页</code>形式进行存放的，当其加载到MysQL中我们称之为<code>缓存页</code>。</p><p>如果缓冲池中没有该页数据，那么缓冲池有以下三种读取数据的方式,每种方式的读取效率都是不同的:</p><h3 id="1-内存读取"><a href="#1-内存读取" class="headerlink" title="1.内存读取"></a>1.内存读取</h3><p>如果该数据存在于内存中，基本上执行时间在1ms左右，效率还是很高的。</p><p><img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/image-20220325104247259.png" alt="image-20220325104247259"></p><h3 id="2-随机读取"><a href="#2-随机读取" class="headerlink" title="2.随机读取"></a>2.随机读取</h3><p>如果数据没有在内存中，就需要在磁盘上对该页进行查找，整体时间预估在<code>10ms</code>左右，这10ms 中有6ms是磁盘的实际繁忙时间(包括了<code>寻道和半圈旋转时间</code>），有3ms是对可能发生的排队时间的估计值，另外还有1ms的传输时间，将页从磁盘服务器缓冲区传输到数据库缓冲区中。这10ms 看起来很快，但实际上对于数据库来说消耗的时间已经非常长了，因为这还只是一个页的读取时间。</p><p><img src="/medias/12%E3%80%81MySQL_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.assets/image-20220325104508228.png" alt="image-20220325104508228"></p><h3 id="3-顺序读取"><a href="#3-顺序读取" class="headerlink" title="3.顺序读取"></a>3.顺序读取</h3><p>顺序读取其实是一种批量读取的方式，因为我们请求的<code>数据在磁盘上往往都是相邻存储的</code>，顺序读取可以帮我们批量读取页面，这样的话，一次性加载到缓冲池中就不需要再对其他页面单独进行磁盘I&#x2F;O操作了。如果一个磁盘的吞吐量是40MB&#x2F;S，那么对于一个16KB大小的页来说，一次可以顺序读取2560 (40MB&#x2F;16KB)个页，相当于一个页的读取时间为0.4ms。采用批量读取的方式，即使是从磁盘上进行读取，效率也比从内存中只单独读取一个页的效率要高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第07章-InnoDB数据存储结构&quot;&gt;&lt;a href=&quot;#第07章-InnoDB数据存储结构&quot; class=&quot;headerlink&quot; title=&quot;第07章_InnoDB数据存储结构&quot;&gt;&lt;/a&gt;第07章_InnoDB数据存储结构&lt;/h1&gt;&lt;p&gt;1.数据库的存储结构</summary>
      
    
    
    
    <category term="数据库" scheme="https://iexlee.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL 索引的数据结构</title>
    <link href="https://iexlee.github.io/11%E3%80%81MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.html"/>
    <id>https://iexlee.github.io/11%E3%80%81MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.html</id>
    <published>2022-07-26T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第06章-索引的数据结构"><a href="#第06章-索引的数据结构" class="headerlink" title="第06章_索引的数据结构"></a>第06章_索引的数据结构</h1><h2 id="1-为什么使用索引"><a href="#1-为什么使用索引" class="headerlink" title="1. 为什么使用索引"></a>1. 为什么使用索引</h2><p>索引是存储引擎用于快速找到数据记录的一种数据结构，就好比一本教科书的目录部分，通过目录中找到对应文章的页码，便可快速定位到需要的文章。MySQL中也是一样的道理，进行数据查找时，首先查看查询条件是否命中某条索引，符合则<code>通过索引查找</code>相关数据，如果不符合则需要<code>全表扫描</code>，即需要一条一条地查找记录，直到找到与条件符合的记录。</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616141351236.png" alt="image-20220616141351236"></p><p>如上图所示，数据库没有索引的情况下，数据<code>分布在硬盘不同的位置上面</code>，读取数据时，摆臂需要前后摆动查询数据，这样操作非常消耗时间。如果<code>数据顺序摆放</code>，那么也需要从1到6行按顺序读取，这样就相当于进行了6次IO操作，<code>依旧非常耗时</code>。如果我们不借助任何索引结构帮助我们快速定位数据的话，我们查找 Col 2 &#x3D; 89 这条记录，就要逐行去查找、去比较。从Col 2 &#x3D; 34 开始，进行比较，发现不是，继续下一行。我们当前的表只有不到10行数据，但如果表很大的话，有<code>上千万条数据</code>，就意味着要做<code>很多很多次硬盘I/0</code>才能找到。现在要查找 Col 2 &#x3D; 89 这条记录。CPU必须先去磁盘查找这条记录，找到之后加载到内存，再对数据进行处理。这个过程最耗时间就是磁盘I&#x2F;O（涉及到磁盘的旋转时间（速度较快），磁头的寻道时间(速度慢、费时)）</p><p>假如给数据使用 <code>二叉树</code> 这样的数据结构进行存储，如下图所示</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616142723266.png" alt="image-20220616142723266"></p><p>对字段 Col 2 添加了索引，就相当于在硬盘上为 Col 2 维护了一个索引的数据结构，即这个 <code>二叉搜索树</code>。二叉搜索树的每个结点存储的是 <code>(K, V) 结构</code>，key 是 Col 2，value 是该 key 所在行的文件指针（地址）。比如：该二叉搜索树的根节点就是：<code>(34, 0x07)</code>。现在对 Col 2 添加了索引，这时再去查找 Col 2 &#x3D; 89 这条记录的时候会先去查找该二叉搜索树（二叉树的遍历查找）。读 34 到内存，89 &gt; 34; 继续右侧数据，读 89 到内存，89&#x3D;&#x3D;89；找到数据返回。找到之后就根据当前结点的 value 快速定位到要查找的记录对应的地址。我们可以发现，只需要 <code>查找两次</code> 就可以定位到记录的地址，查询速度就提高了。</p><p>这就是我们为什么要建索引，目的就是为了 <code>减少磁盘I/O的次数</code>，加快查询速率。</p><h2 id="2-索引及其优缺点"><a href="#2-索引及其优缺点" class="headerlink" title="2. 索引及其优缺点"></a>2. 索引及其优缺点</h2><h3 id="2-1-索引概述"><a href="#2-1-索引概述" class="headerlink" title="2.1 索引概述"></a>2.1 索引概述</h3><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。</p><p><strong>索引的本质</strong>：索引是数据结构。你可以简单理解为“排好序的快速查找数据结构”，满足特定查找算法。 这些数据结构以某种方式指向数据， 这样就可以在这些数据结构的基础上实现 <code>高级查找算法</code> 。</p><p><code>索引是在存储引擎中实现的</code>，因此每种存储引擎的索引不一定完全相同，并且每种存储引擎不一定支持所有索引类型。同时，存储引擎可以定义每个表的 <code>最大索引数</code>和 <code>最大索引长度</code>。所有存储引擎支持每个表至少16个索引，总索引长度至少为256字节。有些存储引擎支持更多的索引数和更大的索引长度。</p><h3 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h3><p>（1）类似大学图书馆建书目索引，提高数据检索的效率，降低 <strong>数据库的IO成本</strong> ，这也是创建索引最主 要的原因。 </p><p>（2）通过创建唯一索引，可以保证数据库表中每一行 <strong>数据的唯一性</strong> 。 </p><p>（3）在实现数据的 参考完整性方面，可以 <strong>加速表和表之间的连接</strong> 。换句话说，对于有依赖关系的子表和父表联合查询时， 可以提高查询速度。 </p><p>（4）在使用分组和排序子句进行数据查询时，可以显著 <strong>减少查询中分组和排序的时间</strong> ，降低了CPU的消耗。</p><h3 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3 缺点"></a>2.3 缺点</h3><p>增加索引也有许多不利的方面，主要表现在如下几个方面： </p><p>（1）创建索引和维护索引要 <strong>耗费时间</strong> ，并 且随着数据量的增加，所耗费的时间也会增加。 </p><p>（2）索引需要占 <strong>磁盘空间</strong> ，除了数据表占数据空间之 外，每一个索引还要占一定的物理空间， 存储在磁盘上 ，如果有大量的索引，索引文件就可能比数据文 件更快达到最大文件尺寸。 </p><p>（3）虽然索引大大提高了查询速度，同时却会 <strong>降低更新表的速度</strong> 。当对表 中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。 因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p><p>因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p><blockquote><p>提示：</p><p>索引可以提高查询的速度，但是会影响插入记录的速度。这种情况下，最好的办法是先删除表中的索引，然后插入数据，插入完成后再创建索引。</p></blockquote><h2 id="3-InnoDB中索引的推演"><a href="#3-InnoDB中索引的推演" class="headerlink" title="3. InnoDB中索引的推演"></a>3. InnoDB中索引的推演</h2><h3 id="3-1-索引之前的查找"><a href="#3-1-索引之前的查找" class="headerlink" title="3.1 索引之前的查找"></a>3.1 索引之前的查找</h3><p>先来看一个精确匹配的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT [列名列表] FROM 表名 WHERE 列名 = xxx;<br></code></pre></td></tr></table></figure><h4 id="1-在一个页中的查找"><a href="#1-在一个页中的查找" class="headerlink" title="1. 在一个页中的查找"></a>1. 在一个页中的查找</h4><p>假设目前表中的记录比较少，所有的记录都可以被存放到一个页中，在查找记录的时候可以根据搜索条件的不同分为两种情况：</p><ul><li><p>以主键为搜索条件</p><p>可以在页目录中使用 <code>二分法</code> 快速定位到对应的槽，然后再遍历该槽对用分组中的记录即可快速找到指定记录。</p></li><li><p>以其他列作为搜索条件</p><p>因为在数据页中并没有对非主键列简历所谓的页目录，所以我们无法通过二分法快速定位相应的槽。这种情况下只能从 <code>最小记录</code> 开始 <code>依次遍历单链表中的每条记录</code>， 然后对比每条记录是不是符合搜索条件。很显然，这种查找的效率是非常低的。</p></li></ul><h4 id="2-在很多页中查找"><a href="#2-在很多页中查找" class="headerlink" title="2. 在很多页中查找"></a>2. 在很多页中查找</h4><p>在很多页中查找记录的活动可以分为两个步骤：</p><ol><li>定位到记录所在的页。</li><li>从所在的页内中查找相应的记录。</li></ol><p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能 从第一个页沿着双向链表 一直往下找，在每一个页中根据我们上面的查找方式去查 找指定的记录。因为要遍历所有的数据页，所以这种方式显然是 超级耗时 的。如果一个表有一亿条记录呢？此时 索引 应运而生。</p><h3 id="3-2-设计索引"><a href="#3-2-设计索引" class="headerlink" title="3.2 设计索引"></a>3.2 设计索引</h3><p>建一个表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE index_demo(<br>-&gt; c1 INT,<br>-&gt; c2 INT,<br>-&gt; c3 CHAR(1),<br>-&gt; PRIMARY KEY(c1)<br>-&gt; ) ROW_FORMAT = Compact;<br></code></pre></td></tr></table></figure><p>这个新建的 <strong>index_demo</strong> 表中有2个INT类型的列，1个CHAR(1)类型的列，而且我们规定了c1列为主键， 这个表使用 <strong>Compact</strong> 行格式来实际存储记录的。这里我们简化了index_demo表的行格式示意图：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616152453203.png" alt="image-20220616152453203"></p><p>我们只在示意图里展示记录的这几个部分：</p><ul><li>record_type ：记录头信息的一项属性，表示记录的类型， 0 表示普通记录、 2 表示最小记 录、 3 表示最大记录、 1 暂时还没用过，下面讲。 </li><li>mysql&gt; CREATE TABLE index_demo( -&gt; c1 INT, -&gt; c2 INT, -&gt; c3 CHAR(1), -&gt; PRIMARY KEY(c1) -&gt; ) ROW_FORMAT &#x3D; Compact; next_record ：记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量，我们用 箭头来表明下一条记录是谁。 </li><li>各个列的值 ：这里只记录在 index_demo 表中的三个列，分别是 c1 、 c2 和 c3 。 </li><li>其他信息 ：除了上述3种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</li></ul><p>将记录格式示意图的其他信息项暂时去掉并把它竖起来的效果就是这样：</p><img src=" /medias/MySQL索引及调优篇.assets/image-20220616152727234.png" alt="image-20220616152727234" style="zoom:80%;" /><p>把一些记录放到页里的示意图就是：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616152651878.png" alt="image-20220616152651878"></p><h4 id="1-一个简单的索引设计方案"><a href="#1-一个简单的索引设计方案" class="headerlink" title="1. 一个简单的索引设计方案"></a>1. 一个简单的索引设计方案</h4><p>我们在根据某个搜索条件查找一些记录时为什么要遍历所有的数据页呢？因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页中的记录，所以不得不依次遍历所有的数据页。所以如果我们 <strong>想快速的定位到需要查找的记录在哪些数据页</strong> 中该咋办？我们可以为快速定位记录所在的数据页而建立一个目录 ，建这个目录必须完成下边这些事：</p><ul><li><p><strong>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。</strong></p><p>假设：每个数据结构最多能存放3条记录（实际上一个数据页非常大，可以存放下好多记录）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO index_demo VALUES(1, 4, &#x27;u&#x27;), (3, 9, &#x27;d&#x27;), (5, 3, &#x27;y&#x27;);<br></code></pre></td></tr></table></figure></li></ul><p>​       那么这些记录以及按照主键值的大小串联成一个单向链表了，如图所示：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616153518456.png" alt="image-20220616153518456"></p><p>​      从图中可以看出来， index_demo 表中的3条记录都被插入到了编号为10的数据页中了。此时我们再来插入一条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO index_demo VALUES(4, 4, &#x27;a&#x27;);<br></code></pre></td></tr></table></figure><p>因为 <strong>页10</strong> 最多只能放3条记录，所以我们不得不再分配一个新页：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616155306705.png" alt="image-20220616155306705"></p><p>注意：新分配的 <strong>数据页编号可能并不是连续的</strong>。它们只是通过维护者上一个页和下一个页的编号而建立了 <strong>链表</strong> 关系。另外，<strong>页10</strong>中用户记录最大的主键值是5，而<strong>页28</strong>中有一条记录的主键值是4，因为5&gt;4，所以这就不符合下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值的要求，所以在插入主键值为4的记录的时候需要伴随着一次 <strong>记录移动</strong>，也就是把主键值为5的记录移动到页28中，然后再把主键值为4的记录插入到页10中，这个过程的示意图如下：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616160216525.png" alt="image-20220616160216525"></p><p>这个过程表明了在对页中的记录进行增删改查操作的过程中，我们必须通过一些诸如 <strong>记录移动</strong> 的操作来始终保证这个状态一直成立：下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。这个过程称为 <strong>页分裂</strong>。</p><ul><li><strong>给所有的页建立一个目录项。</strong></li></ul><p>由于数据页的 <strong>编号可能是不连续</strong> 的，所以在向 index_demo 表中插入许多条记录后，可能是这样的效果：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616160619525.png" alt="image-20220616160619525"></p><p>我们需要给它们做个 <strong>目录</strong>，每个页对应一个目录项，每个目录项包括下边两个部分：</p><p>1）页的用户记录中最小的主键值，我们用 <strong>key</strong> 来表示。</p><p>2）页号，我们用 <strong>page_on</strong> 表示。</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616160857381.png" alt="image-20220616160857381"></p><p>以 页28 为例，它对应 目录项2 ，这个目录项中包含着该页的页号 28 以及该页中用户记录的最小主 键值 5 。我们只需要把几个目录项在物理存储器上连续存储（比如：数组），就可以实现根据主键 值快速查找某条记录的功能了。比如：查找主键值为 20 的记录，具体查找过程分两步：</p><ol><li>先从目录项中根据 二分法 快速确定出主键值为 20 的记录在 目录项3 中（因为 12 &lt; 20 &lt; 209 ），它对应的页是 页9 。 </li><li>再根据前边说的在页中查找记录的方式去 页9 中定位具体的记录。</li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为 <strong>索引</strong> 。</p><h4 id="2-InnoDB中的索引方案"><a href="#2-InnoDB中的索引方案" class="headerlink" title="2. InnoDB中的索引方案"></a>2. InnoDB中的索引方案</h4><h5 id="①-迭代1次：目录项纪录的页"><a href="#①-迭代1次：目录项纪录的页" class="headerlink" title="① 迭代1次：目录项纪录的页"></a>① 迭代1次：目录项纪录的页</h5><p>InnoDB怎么区分一条记录是普通的 <strong>用户记录</strong> 还是 <strong>目录项记录</strong> 呢？使用记录头信息里的 <strong>record_type</strong> 属性，它的各自取值代表的意思如下：</p><ul><li>0：普通的用户记录</li><li>1：目录项记录</li><li>2：最小记录</li><li>3：最大记录</li></ul><p>我们把前边使用到的目录项放到数据页中的样子就是这样：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616162944404.png" alt="image-20220616162944404"></p><p>从图中可以看出来，我们新分配了一个编号为30的页来专门存储目录项记录。这里再次强调 <strong>目录项记录</strong> 和普通的 <strong>用户记录</strong> 的不同点：</p><ul><li><strong>目录项记录</strong> 的 record_type 值是1，而 <strong>普通用户记录</strong> 的 record_type 值是0。 </li><li>目录项记录只有 <strong>主键值和页的编号</strong> 两个列，而普通的用户记录的列是用户自己定义的，可能包含 <strong>很多列</strong> ，另外还有InnoDB自己添加的隐藏列。 </li><li>了解：记录头信息里还有一个叫 <strong>min_rec_mask</strong> 的属性，只有在存储 <strong>目录项记录</strong> 的页中的主键值最小的 <strong>目录项记录</strong> 的 <strong>min_rec_mask</strong> 值为 <strong>1</strong> ，其他别的记录的 <strong>min_rec_mask</strong> 值都是 <strong>0</strong> 。</li></ul><p><strong>相同点</strong>：两者用的是一样的数据页，都会为主键值生成 <strong>Page Directory （页目录）</strong>，从而在按照主键值进行查找时可以使用 <strong>二分法</strong> 来加快查询速度。</p><p>现在以查找主键为 20 的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步：</p><ol><li>先到存储 目录项记录 的页，也就是页30中通过 二分法 快速定位到对应目录项，因为 12 &lt; 20 &lt; 209 ，所以定位到对应的记录所在的页就是页9。 </li><li>再到存储用户记录的页9中根据 二分法 快速定位到主键值为 20 的用户记录。</li></ol><h5 id="②-迭代2次：多个目录项纪录的页"><a href="#②-迭代2次：多个目录项纪录的页" class="headerlink" title="② 迭代2次：多个目录项纪录的页"></a>② 迭代2次：多个目录项纪录的页</h5><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616171135082.png" alt="image-20220616171135082"></p><p>从图中可以看出，我们插入了一条主键值为320的用户记录之后需要两个新的数据页：</p><ul><li>为存储该用户记录而新生成了 页31 。 </li><li>因为原先存储目录项记录的 页30的容量已满 （我们前边假设只能存储4条目录项记录），所以不得 不需要一个新的 页32 来存放 页31 对应的目录项。</li></ul><p>现在因为存储目录项记录的页不止一个，所以如果我们想根据主键值查找一条用户记录大致需要3个步骤，以查找主键值为 20 的记录为例：</p><ol><li>确定 目录项记录页 我们现在的存储目录项记录的页有两个，即 页30 和 页32 ，又因为页30表示的目录项的主键值的 范围是 [1, 320) ，页32表示的目录项的主键值不小于 320 ，所以主键值为 20 的记录对应的目 录项记录在 页30 中。 </li><li>通过目录项记录页 确定用户记录真实所在的页 。 在一个存储 目录项记录 的页中通过主键值定位一条目录项记录的方式说过了。 </li><li>在真实存储用户记录的页中定位到具体的记录。</li></ol><h5 id="③-迭代3次：目录项记录页的目录页"><a href="#③-迭代3次：目录项记录页的目录页" class="headerlink" title="③ 迭代3次：目录项记录页的目录页"></a>③ 迭代3次：目录项记录页的目录页</h5><p>如果我们表中的数据非常多则会<code>产生很多存储目录项记录的页</code>，那我们怎么根据主键值快速定位一个存储目录项记录的页呢？那就为这些存储目录项记录的页再生成一个<code>更高级的目录</code>，就像是一个多级目录一样，<code>大目录里嵌套小目录</code>，小目录里才是实际的数据，所以现在各个页的示意图就是这样子：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616173512780.png" alt="image-20220616173512780"></p><p>如图，我们生成了一个存储更高级目录项的 页33 ，这个页中的两条记录分别代表页30和页32，如果用 户记录的主键值在 [1, 320) 之间，则到页30中查找更详细的目录项记录，如果主键值 不小于320 的 话，就到页32中查找更详细的目录项记录。</p><p>我们可以用下边这个图来描述它：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616173717538.png" alt="image-20220616173717538"></p><p>这个数据结构，它的名称是 B+树 。</p><h5 id="④-B-Tree"><a href="#④-B-Tree" class="headerlink" title="④ B+Tree"></a>④ B+Tree</h5><p>一个B+树的节点其实可以分成好多层，规定最下边的那层，也就是存放我们用户记录的那层为第 0 层， 之后依次往上加。之前我们做了一个非常极端的假设：存放用户记录的页 最多存放3条记录 ，存放目录项 记录的页 最多存放4条记录 。其实真实环境中一个页存放的记录数量是非常大的，假设所有存放用户记录 的叶子节点代表的数据页可以存放 100条用户记录 ，所有存放目录项记录的内节点代表的数据页可以存 放 1000条目录项记录 ，那么：</p><ul><li>如果B+树只有1层，也就是只有1个用于存放用户记录的节点，最多能存放 100 条记录。</li><li>如果B+树有2层，最多能存放 1000×100&#x3D;10,0000 条记录。 </li><li>如果B+树有3层，最多能存放 1000×1000×100&#x3D;1,0000,0000 条记录。 </li><li>如果B+树有4层，最多能存放 1000×1000×1000×100&#x3D;1000,0000,0000 条记录。相当多的记录！</li></ul><p>你的表里能存放 <strong>100000000000</strong> 条记录吗？所以一般情况下，我们用到的 <strong>B+树都不会超过4层</strong> ，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的 <strong>Page Directory</strong> （页目录），所以在页面内也可以通过 <strong>二分法</strong> 实现快速 定位记录。</p><h3 id="3-3-常见索引概念"><a href="#3-3-常见索引概念" class="headerlink" title="3.3 常见索引概念"></a>3.3 常见索引概念</h3><p>索引按照物理实现方式，索引可以分为 2 种：聚簇（聚集）和非聚簇（非聚集）索引。我们也把非聚集 索引称为二级索引或者辅助索引。</p><h4 id="1-聚簇索引"><a href="#1-聚簇索引" class="headerlink" title="1. 聚簇索引"></a>1. 聚簇索引</h4><p>聚簇索引并不是一种单独的索引类型，而是<strong>一种数据存储方式</strong>（所有的用户记录都存储在了叶子结点），也就是所谓的 <code>索引即数据，数据即索引</code>。</p><blockquote><p>术语”聚簇”表示当前数据行和相邻的键值聚簇的存储在一起</p></blockquote><p><strong>特点：</strong></p><ul><li><p>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义： </p><ul><li><code>页内</code> 的记录是按照主键的大小顺序排成一个 <code>单向链表</code> 。 </li><li>各个存放 <code>用户记录的页</code> 也是根据页中用户记录的主键大小顺序排成一个 <code>双向链表</code> 。 </li><li>存放 <code>目录项记录的页</code> 分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个 <code>双向链表</code> 。</li></ul></li><li><p>B+树的 叶子节点 存储的是完整的用户记录。 </p><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</p></li></ul><p>我们把具有这两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个<code>聚簇索引</code>的叶子节点处。这种聚簇索引并不需要我们在MySQL语句中显式的使用INDEX 语句去创建， <code>InnDB</code> 存储引擎会 <code>自动</code> 的为我们创建聚簇索引。</p><p><strong>优点：</strong></p><ul><li><code>数据访问更快</code> ，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快 </li><li>聚簇索引对于主键的 <code>排序查找</code> 和 <code>范围查找</code> 速度非常快 </li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多 个数据块中提取数据，所以 <code>节省了大量的io操作</code> 。</li></ul><p><strong>缺点：</strong></p><ul><li><code>插入速度严重依赖于插入顺序</code> ，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<code>自增的ID列为主键</code></li><li><code>更新主键的代价很高</code> ，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义<strong>主键为不可更新</strong></li><li><code>二级索引访问需要两次索引查找</code> ，第一次找到主键值，第二次根据主键值找到行数据</li></ul><h4 id="2-二级索引（辅助索引、非聚簇索引）"><a href="#2-二级索引（辅助索引、非聚簇索引）" class="headerlink" title="2. 二级索引（辅助索引、非聚簇索引）"></a>2. 二级索引（辅助索引、非聚簇索引）</h4><p>如果我们想以别的列作为搜索条件该怎么办？肯定不能是从头到尾沿着链表依次遍历记录一遍。</p><p>答案：我们可以<code>多建几颗B+树</code>，不同的B+树中的数据采用不同的排列规则。比方说我们用<code>c2</code>列的大小作为数据页、页中记录的排序规则，再建一课B+树，效果如下图所示：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616203852043.png" alt="image-20220616203852043"></p><p>这个B+树与上边介绍的聚簇索引有几处不同：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616210404733.png" alt="image-20220616210404733"></p><p>**概念：回表 **</p><p>我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根 据c2列的值查找到完整的用户记录的话，仍然需要到 聚簇索引 中再查一遍，这个过程称为 回表 。也就 是根据c2列的值查询一条完整的用户记录需要使用到 2 棵B+树！</p><p><strong>问题</strong>：为什么我们还需要一次 回表 操作呢？直接把完整的用户记录放到叶子节点不OK吗？</p><p><strong>回答</strong>：</p><p>如果把完整的用户记录放到叶子结点是可以不用回表。但是<code>太占地方</code>了，相当于每建立一课B+树都需要把所有的用户记录再都拷贝一遍，这就有点太浪费存储空间了。</p><p>因为这种按照<code>非主键列</code>建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为<code>二级索引</code>，或者辅助索引。由于使用的是c2列的大小作为B+树的排序规则，所以我们也称这个B+树为c2列简历的索引。</p><p>非聚簇索引的存在不影响数据在聚簇索引中的组织，所以一张表可以有多个非聚簇索引。</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616213109383.png" alt="image-20220616213109383"></p><p>小结：聚簇索引与非聚簇索引的原理不同，在使用上也有一些区别：</p><ol><li>聚簇索引的<code>叶子节点</code>存储的就是我们的<code>数据记录</code>, 非聚簇索引的叶子节点存储的是<code>数据位置</code>。非聚簇索引不会影响数据表的物理存储顺序。</li><li>一个表<code>只能有一个聚簇索引</code>，因为只能有一种排序存储的方式，但可以有<code>多个非聚簇索引</code>，也就是多个索引目录提供数据检索。</li><li>使用聚簇索引的时候，数据的<code>查询效率高</code>，但如果对数据进行插入，删除，更新等操作，效率会比非聚簇索引低。</li></ol><h4 id="3-联合索引"><a href="#3-联合索引" class="headerlink" title="3.联合索引"></a>3.联合索引</h4><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按 照 c2和c3列 的大小进行排序，这个包含两层含义： </p><ul><li>先把各个记录和页按照c2列进行排序。 </li><li>在记录的c2列相同的情况下，采用c3列进行排序</li></ul><p>为c2和c3建立的索引的示意图如下：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220616215251172.png" alt="image-20220616215251172"></p><p>如图所示，我们需要注意以下几点：</p><ul><li>每条目录项都有c2、c3、页号这三个部分组成，各条记录先按照c2列的值进行排序，如果记录的c2列相同，则按照c3列的值进行排序</li><li>B+树叶子节点处的用户记录由c2、c3和主键c1列组成</li></ul><p>注意一点，以c2和c3列的大小为排序规则建立的B+树称为 联合索引 ，本质上也是一个二级索引。它的意 思与分别为c2和c3列分别建立索引的表述是不同的，不同点如下： </p><ul><li>建立 联合索引 只会建立如上图一样的1棵B+树。 </li><li>为c2和c3列分别建立索引会分别以c2和c3列的大小为排序规则建立2棵B+树。</li></ul><h3 id="3-4-InnoDB的B-树索引的注意事项"><a href="#3-4-InnoDB的B-树索引的注意事项" class="headerlink" title="3.4 InnoDB的B+树索引的注意事项"></a>3.4 InnoDB的B+树索引的注意事项</h3><h4 id="1-根页面位置万年不动"><a href="#1-根页面位置万年不动" class="headerlink" title="1. 根页面位置万年不动"></a>1. 根页面位置万年不动</h4><p>实际上B+树的形成过程是这样的：</p><ul><li>每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个 <code>根结点</code> 页面。最开始表中没有数据的时候，每个B+树索引对应的 <code>根结点</code> 中即没有用户记录，也没有目录项记录。</li><li>随后向表中插入用户记录时，先把用户记录存储到这个<code>根节点</code> 中。</li><li>当根节点中的可用 <code>空间用完时</code> 继续插入记录，此时会将根节点中的所有记录复制到一个新分配的页，比如 <code>页a</code> 中，然后对这个新页进行 <code>页分裂</code> 的操作，得到另一个新页，比如<code>页b</code> 。这时新插入的记录根据键值（也就是聚簇索引中的主键值，二级索引中对应的索引列的值）的大小就会被分配到 <code>页a</code> 或者 <code>页b</code> 中，而 <code>根节点</code> 便升级为存储目录项记录的页。</li></ul><p>这个过程特别注意的是：一个B+树索引的根节点自诞生之日起，便不会再移动。这样只要我们对某个表建议一个索引，那么它的根节点的页号便会被记录到某个地方。然后凡是 <code>InnoDB</code> 存储引擎需要用到这个索引的时候，都会从哪个固定的地方取出根节点的页号，从而来访问这个索引。</p><h4 id="2-内节点中目录项记录的唯一性"><a href="#2-内节点中目录项记录的唯一性" class="headerlink" title="2. 内节点中目录项记录的唯一性"></a>2. 内节点中目录项记录的唯一性</h4><p>我们知道B+树索引的内节点中目录项记录的内容是 <code>索引列 + 页号</code> 的搭配，但是这个搭配对于二级索引来说有点不严谨。还拿 index_demo 表为例，假设这个表中的数据是这样的：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617151918786.png" alt="image-20220617151918786"></p><p>如果二级索引中目录项记录的内容只是 <code>索引列 + 页号</code> 的搭配的话，那么为 <code>c2</code> 列简历索引后的B+树应该长这样：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617152906690.png" alt="image-20220617152906690"></p><p>如果我们想新插入一行记录，其中 <code>c1</code> 、<code>c2</code> 、<code>c3</code> 的值分别是: <code>9</code>、<code>1</code>、<code>c</code>, 那么在修改这个为 c2 列建立的二级索引对应的 B+ 树时便碰到了个大问题：由于 <code>页3</code> 中存储的目录项记录是由 <code>c2列 + 页号</code> 的值构成的，<code>页3</code> 中的两条目录项记录对应的 c2 列的值都是1，而我们 <code>新插入的这条记录</code> 的 c2 列的值也是 <code>1</code>，那我们这条新插入的记录到底应该放在 <code>页4</code> 中，还是应该放在 <code>页5</code> 中？答案：对不起，懵了</p><p>为了让新插入记录找到自己在那个页面，我们需要<strong>保证在B+树的同一层页节点的目录项记录除页号这个字段以外是唯一的</strong>。所以对于二级索引的内节点的目录项记录的内容实际上是由三个部分构成的：</p><ul><li>索引列的值</li><li>主键值</li><li>页号</li></ul><p>也就是我们把<code>主键值</code>也添加到二级索引内节点中的目录项记录，这样就能保住 B+ 树每一层节点中各条目录项记录除页号这个字段外是唯一的，所以我们为c2建立二级索引后的示意图实际上应该是这样子的：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617154135258.png" alt="image-20220617154135258"></p><p>这样我们再插入记录<code>(9, 1, &#39;c&#39;)</code> 时，由于 <code>页3</code> 中存储的目录项记录是由 <code>c2列 + 主键 + 页号</code> 的值构成的，可以先把新纪录的 <code>c2</code> 列的值和 <code>页3</code> 中各目录项记录的 <code>c2</code> 列的值作比较，如果 <code>c2</code> 列的值相同的话，可以接着比较主键值，因为B+树同一层中不同目录项记录的 <code>c2列 + 主键</code>的值肯定是不一样的，所以最后肯定能定位唯一的一条目录项记录，在本例中最后确定新纪录应该被插入到 <code>页5</code> 中。</p><h4 id="3-一个页面最少存储-2-条记录"><a href="#3-一个页面最少存储-2-条记录" class="headerlink" title="3. 一个页面最少存储 2 条记录"></a>3. 一个页面最少存储 2 条记录</h4><p>一个B+树只需要很少的层级就可以轻松存储数亿条记录，查询速度相当不错！这是因为B+树本质上就是一个大的多层级目录，每经过一个目录时都会过滤掉许多无效的子目录，直到最后访问到存储真实数据的目录。那如果一个大的目录中只存放一个子目录是个啥效果呢？那就是目录层级非常非常多，而且最后的那个存放真实数据的目录中只存放一条数据。所以 <strong>InnoDB 的一个数据页至少可以存放两条记录</strong>。</p><h2 id="4-MyISAM中的索引方案"><a href="#4-MyISAM中的索引方案" class="headerlink" title="4. MyISAM中的索引方案"></a>4. MyISAM中的索引方案</h2><p>B树索引使用存储引擎如表所示：</p><table><thead><tr><th>索引 &#x2F; 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>B-Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>即使多个存储引擎支持同一种类型的索引，但是他们的实现原理也是不同的。Innodb和MyISAM默认的索 引是Btree索引；而Memory默认的索引是Hash索引。</p><p>MyISAM引擎使用 B+Tree 作为索引结构，叶子节点的data域存放的是 数据记录的地址 。</p><h3 id="4-1-MyISAM索引的原理"><a href="#4-1-MyISAM索引的原理" class="headerlink" title="4.1 MyISAM索引的原理"></a>4.1 MyISAM索引的原理</h3><img src=" /medias/MySQL索引及调优篇.assets/image-20220617160325201.png" alt="image-20220617160325201" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617160413479.png" alt="image-20220617160413479"></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617160533122.png" alt="image-20220617160533122" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617160625006.png" alt="image-20220617160625006"></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617160813548.png" alt="image-20220617160813548" style="float:left;" /><h3 id="4-2-MyISAM-与-InnoDB对比"><a href="#4-2-MyISAM-与-InnoDB对比" class="headerlink" title="4.2 MyISAM 与 InnoDB对比"></a>4.2 MyISAM 与 InnoDB对比</h3><p><strong>MyISAM的索引方式都是“非聚簇”的，与InnoDB包含1个聚簇索引是不同的。小结两种引擎中索引的区别：</strong></p><p>① 在InnoDB存储引擎中，我们只需要根据主键值对 聚簇索引 进行一次查找就能找到对应的记录，而在 MyISAM 中却需要进行一次 回表 操作，意味着MyISAM中建立的索引相当于全部都是 二级索引 。</p><p> ② InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是 分离的 ，索引文件仅保存数 据记录的地址。</p><p> ③ InnoDB的非聚簇索引data域存储相应记录 主键的值 ，而MyISAM索引记录的是 地址 。换句话说， InnoDB的所有非聚簇索引都引用主键作为data域。</p><p> ④ MyISAM的回表操作是十分 快速 的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通 过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。 </p><p>⑤ InnoDB要求表 必须有主键 （ MyISAM可以没有 ）。如果没有显式指定，则MySQL系统会自动选择一个 可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐 含字段作为主键，这个字段长度为6个字节，类型为长整型。</p><p><strong>小结：</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617161126022.png" alt="image-20220617161126022" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617161151125.png" alt="image-20220617161151125"></p><h2 id="5-索引的代价"><a href="#5-索引的代价" class="headerlink" title="5. 索引的代价"></a>5. 索引的代价</h2><p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗：</p><ul><li><p>空间上的代价</p><p>每建立一个索引都要为它建立一棵B+树，每一棵B+树的每一个节点都是一个数据页，一个页默认会 占用 16KB 的存储空间，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p></li><li><p>时间上的代价</p><p>每次对表中的数据进行 增、删、改 操作时，都需要去修改各个B+树索引。而且我们讲过，B+树每 层节点都是按照索引列的值 从小到大的顺序排序 而组成了 双向链表 。不论是叶子节点中的记录，还 是内节点中的记录（也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序 而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需 要额外的时间进行一些 记录移位 ， 页面分裂 、 页面回收 等操作来维护好节点和记录的排序。如果 我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会给性能拖后腿。</p></li></ul><blockquote><p>一个表上索引建的越多，就会占用越多的存储空间，在增删改记录的时候性能就越差。为了能建立又好又少的索引，我们得学学这些索引在哪些条件下起作用的。</p></blockquote><h2 id="6-MySQL数据结构选择的合理性"><a href="#6-MySQL数据结构选择的合理性" class="headerlink" title="6. MySQL数据结构选择的合理性"></a>6. MySQL数据结构选择的合理性</h2><img src=" /medias/MySQL索引及调优篇.assets/image-20220617161635521.png" alt="image-20220617161635521" style="float:left;" /><h3 id="6-1-全表查询"><a href="#6-1-全表查询" class="headerlink" title="6.1 全表查询"></a>6.1 全表查询</h3><p>这里都懒得说了。</p><h3 id="6-2-Hash查询"><a href="#6-2-Hash查询" class="headerlink" title="6.2 Hash查询"></a>6.2 Hash查询</h3><img src=" /medias/MySQL索引及调优篇.assets/image-20220617161946230.png" alt="image-20220617161946230" style="float:left;" /><p><strong>加快查找速度的数据结构，常见的有两类：</strong></p><p>(1) 树，例如平衡二叉搜索树，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是 <code>O(log2N)</code>;</p><p>(2)哈希，例如HashMap，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是 <code>O(1)</code>; (key, value)</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617162153587.png" alt="image-20220617162153587"></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617162548697.png" alt="image-20220617162548697" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617162604272.png" alt="image-20220617162604272"></p><p>上图中哈希函数h有可能将两个不同的关键字映射到相同的位置，这叫做 碰撞 ，在数据库中一般采用 链 接法 来解决。在链接法中，将散列到同一槽位的元素放在一个链表中，如下图所示：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617162703006.png" alt="image-20220617162703006"></p><p>实验：体会数组和hash表的查找方面的效率区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">// 算法复杂度为 O(n)<br>@Test<br>public void test1()&#123;<br>    int[] arr = new int[100000];<br>    for(int i = 0;i &lt; arr.length;i++)&#123;<br>        arr[i] = i + 1;<br>    &#125;<br>    long start = System.currentTimeMillis();<br>    for(int j = 1; j&lt;=100000;j++)&#123;<br>        int temp = j;<br>        for(int i = 0;i &lt; arr.length;i++)&#123;<br>            if(temp == arr[i])&#123;<br>                break;<br>            &#125;<br>        &#125;<br>    &#125;<br>    long end = System.currentTimeMillis();<br>    System.out.println(&quot;time： &quot; + (end - start)); //time： 823<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">// 算法复杂度为 O(1)<br>@Test<br>public void test2()&#123;<br>    HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;(100000);<br>    for(int i = 0;i &lt; 100000;i++)&#123;<br>    set.add(i + 1);<br>    &#125;<br>    long start = System.currentTimeMillis();<br>    for(int j = 1; j&lt;=100000;j++) &#123;<br>        int temp = j;<br>        boolean contains = set.contains(temp);<br>    &#125;<br>    long end = System.currentTimeMillis();<br>    System.out.println(&quot;time： &quot; + (end - start)); //time： 5<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Hash结构效率高，那为什么索引结构要设计成树型呢？</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617163202156.png" alt="image-20220617163202156" style="float:left;" /><p><strong>Hash索引适用存储引擎如表所示：</strong></p><table><thead><tr><th>索引 &#x2F; 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>HASH索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p><strong>Hash索引的适用性：</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617163619721.png" alt="image-20220617163619721" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617163657697.png" alt="image-20220617163657697"></p><p>采用自适应 Hash 索引目的是方便根据 SQL 的查询条件加速定位到叶子节点，特别是当 B+ 树比较深的时 候，通过自适应 Hash 索引可以明显提高数据的检索效率。</p><p>我们可以通过 innodb_adaptive_hash_index 变量来查看是否开启了自适应 Hash，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;%adaptive_hash_index&#x27;;<br></code></pre></td></tr></table></figure><h3 id="6-3-二叉搜索树"><a href="#6-3-二叉搜索树" class="headerlink" title="6.3 二叉搜索树"></a>6.3 二叉搜索树</h3><p>如果我们利用二叉树作为索引结构，那么磁盘的IO次数和索引树的高度是相关的。</p><p><strong>1. 二叉搜索树的特点</strong></p><ul><li>一个节点只能有两个子节点，也就是一个节点度不能超过2</li><li>左子节点 &lt; 本节点; 右子节点 &gt;&#x3D; 本节点，比我大的向右，比我小的向左</li></ul><p><strong>2. 查找规则</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617163952166.png" alt="image-20220617163952166" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617164022728.png" alt="image-20220617164022728"></p><p>但是特殊情况，就是有时候二叉树的深度非常大，比如：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617164053134.png" alt="image-20220617164053134"></p><p>为了提高查询效率，就需要 减少磁盘IO数 。为了减少磁盘IO的次数，就需要尽量 降低树的高度 ，需要把 原来“瘦高”的树结构变的“矮胖”，树的每层的分叉越多越好。</p><h3 id="6-4-AVL树"><a href="#6-4-AVL树" class="headerlink" title="6.4 AVL树"></a>6.4 AVL树</h3><img src=" /medias/MySQL索引及调优篇.assets/image-20220617165045803.png" alt="image-20220617165045803" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617165105005.png" alt="image-20220617165105005"></p><p>&#96;每访问一次节点就需要进行一次磁盘 I&#x2F;O 操作，对于上面的树来说，我们需要进行 5次 I&#x2F;O 操作。虽然平衡二叉树的效率高，但是树的深度也同样高，这就意味着磁盘 I&#x2F;O 操作次数多，会影响整体数据查询的效率。</p><p>针对同样的数据，如果我们把二叉树改成 M 叉树 （M&gt;2）呢？当 M&#x3D;3 时，同样的 31 个节点可以由下面 的三叉树来进行存储：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617165124685.png" alt="image-20220617165124685"></p><p>你能看到此时树的高度降低了，当数据量 N 大的时候，以及树的分叉树 M 大的时候，M叉树的高度会远小于二叉树的高度 (M &gt; 2)。所以，我们需要把 &#96;树从“瘦高” 变 “矮胖”。</p><h3 id="6-5-B-Tree"><a href="#6-5-B-Tree" class="headerlink" title="6.5 B-Tree"></a>6.5 B-Tree</h3><p>B 树的英文是 Balance Tree，也就是 <code>多路平衡查找树</code>。简写为 B-Tree。它的高度远小于平衡二叉树的高度。</p><p>B 树的结构如下图所示：</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617165937875.png" alt="image-20220617165937875"></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617170124200.png" alt="image-20220617170124200" style="float:left;" /><p>一个 M 阶的 B 树（M&gt;2）有以下的特性：</p><ol><li>根节点的儿子数的范围是 [2,M]。 </li><li>每个中间节点包含 k-1 个关键字和 k 个孩子，孩子的数量 &#x3D; 关键字的数量 +1，k 的取值范围为 [ceil(M&#x2F;2), M]。 </li><li>叶子节点包括 k-1 个关键字（叶子节点没有孩子），k 的取值范围为 [ceil(M&#x2F;2), M]。 </li><li>假设中间节点节点的关键字为：Key[1], Key[2], …, Key[k-1]，且关键字按照升序排序，即 Key[i]&lt;Key[i+1]。此时 k-1 个关键字相当于划分了 k 个范围，也就是对应着 k 个指针，即为：P[1], P[2], …, P[k]，其中 P[1] 指向关键字小于 Key[1] 的子树，P[i] 指向关键字属于 (Key[i-1], Key[i]) 的子树，P[k] 指向关键字大于 Key[k-1] 的子树。</li><li>所有叶子节点位于同一层。</li></ol><p>上面那张图所表示的 B 树就是一棵 3 阶的 B 树。我们可以看下磁盘块 2，里面的关键字为（8，12），它 有 3 个孩子 (3，5)，(9，10) 和 (13，15)，你能看到 (3，5) 小于 8，(9，10) 在 8 和 12 之间，而 (13，15) 大于 12，刚好符合刚才我们给出的特征。</p><p>然后我们来看下如何用 B 树进行查找。假设我们想要 查找的关键字是 9 ，那么步骤可以分为以下几步：</p><ol><li>我们与根节点的关键字 (17，35）进行比较，9 小于 17 那么得到指针 P1； </li><li>按照指针 P1 找到磁盘块 2，关键字为（8，12），因为 9 在 8 和 12 之间，所以我们得到指针 P2； </li><li>按照指针 P2 找到磁盘块 6，关键字为（9，10），然后我们找到了关键字 9。</li></ol><p>你能看出来在 B 树的搜索过程中，我们比较的次数并不少，但如果把数据读取出来然后在内存中进行比 较，这个时间就是可以忽略不计的。而读取磁盘块本身需要进行 I&#x2F;O 操作，消耗的时间比在内存中进行 比较所需要的时间要多，是数据查找用时的重要因素。 B 树相比于平衡二叉树来说磁盘 I&#x2F;O 操作要少 ， 在数据查询中比平衡二叉树效率要高。所以 只要树的高度足够低，IO次数足够少，就可以提高查询性能 。</p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617170454023.png" alt="image-20220617170454023" style="float:left;" /><p><strong>再举例1：</strong></p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617170526488.png" alt="image-20220617170526488"></p><h3 id="6-6-B-Tree"><a href="#6-6-B-Tree" class="headerlink" title="6.6 B+Tree"></a>6.6 B+Tree</h3><img src=" /medias/MySQL索引及调优篇.assets/image-20220617170628394.png" alt="image-20220617170628394" style="float:left;" /><ul><li>MySQL官网说明：</li></ul><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617170710329.png" alt="image-20220617170710329"></p><p><strong>B+ 树和 B 树的差异在于以下几点：</strong></p><ol><li>有 k 个孩子的节点就有 k 个关键字。也就是孩子数量 &#x3D; 关键字数，而 B 树中，孩子数量 &#x3D; 关键字数 +1。</li><li>非叶子节点的关键字也会同时存在在子节点中，并且是在子节点中所有关键字的最大（或最 小）。 </li><li>非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而 B 树中， 非 叶子节点既保存索引，也保存数据记录 。 </li><li>所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大 小从小到大顺序链接。</li></ol><img src=" /medias/MySQL索引及调优篇.assets/image-20220617171011102.png" alt="image-20220617171011102" style="float:left;" /><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617171106671.png" alt="image-20220617171106671"></p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617171131747.png" alt="image-20220617171131747"></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617171331282.png" alt="image-20220617171331282" style="float:left;" /><img src=" /medias/MySQL索引及调优篇.assets/image-20220617171434206.png" alt="image-20220617171434206" style="float:left;" /><blockquote><p>B 树和 B+ 树都可以作为索引的数据结构，在 MySQL 中采用的是 B+ 树。 但B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</p></blockquote><p><strong>思考题：为了减少IO，索引树会一次性加载吗？</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617171614460.png" alt="image-20220617171614460" style="float:left;" /><p><strong>思考题：B+树的存储能力如何？为何说一般查找行记录，最多只需1~3次磁盘IO</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617172426725.png" alt="image-20220617172426725" style="float:left;" /><p><strong>思考题：为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617175142810.png" alt="image-20220617175142810" style="float:left;" /><p><strong>思考题：Hash 索引与 B+ 树索引的区别</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617175230327.png" alt="image-20220617175230327" style="float:left;" /><p><strong>思考题：Hash 索引与 B+ 树索引是在建索引的时候手动指定的吗？</strong></p><img src=" /medias/MySQL索引及调优篇.assets/image-20220617175309115.png" alt="image-20220617175309115" style="float:left;" /><h3 id="6-7-R树"><a href="#6-7-R树" class="headerlink" title="6.7 R树"></a>6.7 R树</h3><p>R-Tree在MySQL很少使用，仅支持 geometry数据类型 ，支持该类型的存储引擎只有myisam、bdb、 innodb、ndb、archive几种。举个R树在现实领域中能够解决的例子：查找20英里以内所有的餐厅。如果 没有R树你会怎么解决？一般情况下我们会把餐厅的坐标(x,y)分为两个字段存放在数据库中，一个字段记 录经度，另一个字段记录纬度。这样的话我们就需要遍历所有的餐厅获取其位置信息，然后计算是否满 足要求。如果一个地区有100家餐厅的话，我们就要进行100次位置计算操作了，如果应用到谷歌、百度 地图这种超大数据库中，这种方法便必定不可行了。R树就很好的 解决了这种高维空间搜索问题 。它把B 树的思想很好的扩展到了多维空间，采用了B树分割空间的思想，并在添加、删除操作时采用合并、分解 结点的方法，保证树的平衡性。因此，R树就是一棵用来 存储高维数据的平衡树 。相对于B-Tree，R-Tree 的优势在于范围查找。</p><table><thead><tr><th>索引 &#x2F; 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>R-Tree索引</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h3 id="6-8-小结"><a href="#6-8-小结" class="headerlink" title="6.8 小结"></a>6.8 小结</h3><img src=" /medias/MySQL索引及调优篇.assets/image-20220617175440527.png" alt="image-20220617175440527" style="float:left;" /><h3 id="附录：算法的时间复杂度"><a href="#附录：算法的时间复杂度" class="headerlink" title="附录：算法的时间复杂度"></a>附录：算法的时间复杂度</h3><p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在 于选择合适算法和改进算法。</p><p><img src="/medias/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87.assets/image-20220617175516191.png" alt="image-20220617175516191"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第06章-索引的数据结构&quot;&gt;&lt;a href=&quot;#第06章-索引的数据结构&quot; class=&quot;headerlink&quot; title=&quot;第06章_索引的数据结构&quot;&gt;&lt;/a&gt;第06章_索引的数据结构&lt;/h1&gt;&lt;h2 id=&quot;1-为什么使用索引&quot;&gt;&lt;a href=&quot;#1-为什</summary>
      
    
    
    
    <category term="数据库" scheme="https://iexlee.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>类加载器</title>
    <link href="https://iexlee.github.io/36-2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html"/>
    <id>https://iexlee.github.io/36-2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html</id>
    <published>2022-07-17T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话："><a href="#写在前面的话：" class="headerlink" title="写在前面的话："></a>写在前面的话：</h1><blockquote><p>基础加强包含了：</p><p>反射，动态代理，类加载器，xml，注解，日志，单元测试等知识点</p><p>其中最难的是反射和动态代理，其他知识点都非常简单</p><p>由于B站P数限制，xml，注解等知识点，阿玮写了详细文档供大家学习</p></blockquote><h2 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1.类加载器"></a>1.类加载器</h2><h3 id="1-1类加载器"><a href="#1-1类加载器" class="headerlink" title="1.1类加载器"></a>1.1类加载器</h3><ul><li><p>作用</p><p>负责将.class文件（存储的物理文件）加载在到内存中</p><p><img src="/medias/36_2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/01_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt="01_类加载器"></p></li></ul><h3 id="1-2类加载的完整过程"><a href="#1-2类加载的完整过程" class="headerlink" title="1.2类加载的完整过程"></a>1.2类加载的完整过程</h3><ul><li><p>类加载时机</p><p>简单理解：字节码文件什么时候会被加载到内存中？</p><p>有以下的几种情况：</p><ul><li>创建类的实例（对象）</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul><p>总结而言：用到了就加载，不用不加载</p></li><li><p>类加载过程</p><ol><li><p>加载</p><ul><li>通过包名 + 类名，获取这个类，准备用流进行传输</li><li>在这个类加载到内存中</li><li>加载完毕创建一个class对象</li></ul><p><img src="/medias/36_2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/02_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%8A%A0%E8%BD%BD.png" alt="02_类加载过程加载"></p></li><li><p>链接</p><ul><li><p>验证</p><p>确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</p><p>(文件中的信息是否符合虚拟机规范有没有安全隐患)</p></li></ul><p><img src="/medias/36_2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/03_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E9%AA%8C%E8%AF%81.png" alt="03_类加载过程验证"></p><ul><li><p>准备</p><p>负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值</p><p>(初始化静态变量)</p></li></ul><p><img src="/medias/36_2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/04_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%87%86%E5%A4%87.png" alt="04_类加载过程准备"></p><ul><li><p>解析</p><p>将类的二进制数据流中的符号引用替换为直接引用</p><p>(本类中如果用到了其他类，此时就需要找到对应的类)</p></li></ul><p><img src="/medias/36_2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/05_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90.png" alt="05_类加载过程解析"></p></li><li><p>初始化</p><p>根据程序员通过程序制定的主观计划去初始化类变量和其他资源</p><p>(静态变量赋值以及初始化其他资源)</p><p><img src="/medias/36_2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/06_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="06_类加载过程初始化"></p></li></ol></li><li><p>小结</p><ul><li>当一个类被使用的时候，才会加载到内存</li><li>类加载的过程: 加载、验证、准备、解析、初始化</li></ul></li></ul><h3 id="1-3类加载的分类【理解】"><a href="#1-3类加载的分类【理解】" class="headerlink" title="1.3类加载的分类【理解】"></a>1.3类加载的分类【理解】</h3><ul><li><p>分类</p><ul><li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li>Platform class loader：平台类加载器,负责加载JDK中一些特殊的模块</li><li>System class loader：系统类加载器,负责加载用户类路径上所指定的类库</li></ul></li><li><p>类加载器的继承关系</p><ul><li>System的父加载器为Platform</li><li>Platform的父加载器为Bootstrap</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取系统类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">systemClassLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br><br>        <span class="hljs-comment">//获取系统类加载器的父加载器 --- 平台类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader1</span> <span class="hljs-operator">=</span> systemClassLoader.getParent();<br><br>        <span class="hljs-comment">//获取平台类加载器的父加载器 --- 启动类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader2</span> <span class="hljs-operator">=</span> classLoader1.getParent();<br><br>        System.out.println(<span class="hljs-string">&quot;系统类加载器&quot;</span> + systemClassLoader);<br>        System.out.println(<span class="hljs-string">&quot;平台类加载器&quot;</span> + classLoader1);<br>        System.out.println(<span class="hljs-string">&quot;启动类加载器&quot;</span> + classLoader2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4双亲委派模型【理解】"><a href="#1-4双亲委派模型【理解】" class="headerlink" title="1.4双亲委派模型【理解】"></a>1.4双亲委派模型【理解】</h3><ul><li><p>介绍</p><p>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式</p><p><img src="/medias/36_2%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/07_%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png" alt="07_双亲委派模型"></p></li></ul><h3 id="1-5ClassLoader-中的两个方法【应用】"><a href="#1-5ClassLoader-中的两个方法【应用】" class="headerlink" title="1.5ClassLoader 中的两个方法【应用】"></a>1.5ClassLoader 中的两个方法【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static ClassLoader getSystemClassLoader()</td><td>获取系统类加载器</td></tr><tr><td>public InputStream getResourceAsStream(String name)</td><td>加载某一个资源文件</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span><br>        <span class="hljs-comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span><br><br>        <span class="hljs-comment">//获取系统类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">systemClassLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br><br>        <span class="hljs-comment">//利用加载器去加载一个指定的文件</span><br>        <span class="hljs-comment">//参数：文件的路径（放在src的根目录下，默认去那里加载）</span><br>        <span class="hljs-comment">//返回值：字节流。</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> systemClassLoader.getResourceAsStream(<span class="hljs-string">&quot;prop.properties&quot;</span>);<br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(is);<br><br>        System.out.println(prop);<br><br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面的话：&quot;&gt;&lt;a href=&quot;#写在前面的话：&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话：&quot;&gt;&lt;/a&gt;写在前面的话：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;基础加强包含了：&lt;/p&gt;
&lt;p&gt;反射，动态代理，类加载器，xml，注解，日</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>log日志</title>
    <link href="https://iexlee.github.io/36-1%E3%80%81log%E6%97%A5%E5%BF%97.html"/>
    <id>https://iexlee.github.io/36-1%E3%80%81log%E6%97%A5%E5%BF%97.html</id>
    <published>2022-07-10T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="1-1-作用："><a href="#1-1-作用：" class="headerlink" title="1.1 作用："></a>1.1 作用：</h2><p>​跟输出语句一样，可以把程序在运行过程中的详细信息都打印在控制台上。</p><p>​利用log日志还可以把这些详细信息保存到文件和数据库中。</p><h2 id="1-2-使用步骤："><a href="#1-2-使用步骤：" class="headerlink" title="1.2 使用步骤："></a>1.2 使用步骤：</h2><p>​不是java的，也不是自己写的，是第三方提供的代码，所以我们要导入jar包。</p><ul><li><p>把第三方的代码导入到当前的项目当中</p><p>新建lib文件夹，把jar粘贴到lib文件夹当中，全选后右键点击选择add as a ….</p><p>检测导入成功：导入成功后jar包可以展开。在项目重构界面可以看到导入的内容</p></li><li><p>把配置文件粘贴到src文件夹下</p></li><li><p>在代码中获取日志对象</p></li><li><p>调用方法打印日志</p></li></ul><h2 id="1-3-日志级别"><a href="#1-3-日志级别" class="headerlink" title="1.3 日志级别"></a>1.3 日志级别</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">TRACE</span>, <span class="hljs-keyword">DEBUG</span>, INFO, WARN, <span class="hljs-built_in">ERROR</span><br></code></pre></td></tr></table></figure><p>还有两个特殊的：</p><p>​ALL：输出所有日志</p><p>​OFF：关闭所有日志</p><p>日志级别从小到大的关系：</p><p>​TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</p><h2 id="1-4-配置文件"><a href="#1-4-配置文件" class="headerlink" title="1.4 配置文件"></a>1.4 配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>System.out<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度</span><br><span class="hljs-comment">                %msg：日志消息，%n是换行符--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level]  %c [%thread] : %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- File是输出的方向通向文件的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志输出路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>C:/code/itheima-data.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>C:/code/itheima-data2-%d&#123;yyyy-MMdd&#125;.log%i.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件拆分大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>1MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span><br><span class="hljs-comment">   ， 默认debug</span><br><span class="hljs-comment">    &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h1&gt;&lt;h2 id=&quot;1-1-作用：&quot;&gt;&lt;a href=&quot;#1-1-作用：&quot; class=&quot;headerlink&quot; title=&quot;1.1 作用：&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>反射&amp;动态代理</title>
    <link href="https://iexlee.github.io/35%E3%80%81%E5%8F%8D%E5%B0%84-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"/>
    <id>https://iexlee.github.io/35%E3%80%81%E5%8F%8D%E5%B0%84-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html</id>
    <published>2022-07-01T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-反射"><a href="#1-反射" class="headerlink" title="1. 反射"></a>1. 反射</h1><h2 id="1-1-反射的概述："><a href="#1-1-反射的概述：" class="headerlink" title="1.1 反射的概述："></a>1.1 反射的概述：</h2><p>​<strong>专业的解释（了解一下）：</strong></p><p>​       是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</p><p>​       对于任意一个对象，都能够调用它的任意属性和方法；</p><p>​       这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p><p>​<strong>通俗的理解：（掌握）</strong></p><ul><li><p>利用<strong>反射</strong>创建的对象<strong>可以无视修饰符</strong>调用类里面的内容</p></li><li><p>可以跟<strong>配置文件结合起来使用</strong>，把要创建的对象信息和方法写在配置文件中。</p><p>读取到什么类，就创建什么类的对象</p><p>读取到什么方法，就调用什么方法</p><p>此时当需求变更的时候不需要修改代码，只要修改配置文件即可。</p></li></ul><h2 id="1-2-学习反射到底学什么？"><a href="#1-2-学习反射到底学什么？" class="headerlink" title="1.2 学习反射到底学什么？"></a>1.2 学习反射到底学什么？</h2><p>反射都是从class字节码文件中获取的内容。</p><ul><li>如何获取class字节码文件的对象</li><li>利用反射如何获取构造方法（创建对象）</li><li>利用反射如何获取成员变量（赋值，获取值）</li><li>利用反射如何获取成员方法（运行）</li></ul><h2 id="1-3-获取字节码文件对象的三种方式"><a href="#1-3-获取字节码文件对象的三种方式" class="headerlink" title="1.3 获取字节码文件对象的三种方式"></a>1.3 获取字节码文件对象的三种方式</h2><ul><li>Class这个类里面的静态方法forName（“全类名”）<strong>（最常用）</strong></li><li>通过class属性获取  </li><li>通过对象获取字节码文件对象</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.Class这个类里面的静态方法forName</span><br><span class="hljs-comment">//Class.forName(&quot;类的全类名&quot;)： 全类名 = 包名 + 类名</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><span class="hljs-comment">//源代码阶段获取 --- 先把Student加载到内存中，再获取字节码文件的对象</span><br><span class="hljs-comment">//clazz 就表示Student这个类的字节码文件对象。</span><br><span class="hljs-comment">//就是当Student.class这个文件加载到内存之后，产生的字节码文件对象</span><br><br><br><span class="hljs-comment">//2.通过class属性获取</span><br><span class="hljs-comment">//类名.class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz2</span> <span class="hljs-operator">=</span> Student.class;<br><br><span class="hljs-comment">//因为class文件在硬盘中是唯一的，所以，当这个文件加载到内存之后产生的对象也是唯一的</span><br>System.out.println(clazz1 == clazz2);<span class="hljs-comment">//true</span><br><br><br><span class="hljs-comment">//3.通过Student对象获取字节码文件对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz3</span> <span class="hljs-operator">=</span> s.getClass();<br>System.out.println(clazz1 == clazz2);<span class="hljs-comment">//true</span><br>System.out.println(clazz2 == clazz3);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="1-4-字节码文件和字节码文件对象"><a href="#1-4-字节码文件和字节码文件对象" class="headerlink" title="1.4 字节码文件和字节码文件对象"></a>1.4 字节码文件和字节码文件对象</h2><p>java文件：就是我们自己编写的java代码。</p><p>字节码文件：就是通过java文件编译之后的class文件（是在硬盘上真实存在的，用眼睛能看到的）</p><p>字节码文件对象：当class文件加载到内存之后，虚拟机自动创建出来的对象。</p><p>​这个对象里面至少包含了：构造方法，成员变量，成员方法。</p><p>而我们的反射获取的是什么？字节码文件对象，这个对象在内存中是唯一的。</p><h2 id="1-5-获取构造方法"><a href="#1-5-获取构造方法" class="headerlink" title="1.5 获取构造方法"></a>1.5 获取构造方法</h2><p>规则：</p><p>​get表示获取</p><p>​Declared表示私有</p><p>​最后的s表示所有，复数形式</p><p>​如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>获得所有的构造（只能public修饰）</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>获得所有的构造（包含private修饰）</td></tr><tr><td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>获取指定构造（只能public修饰）</td></tr><tr><td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>获取指定构造（包含private修饰）</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-comment">//1.获得整体（class字节码文件对象）</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br><br>        <span class="hljs-comment">//2.获取构造方法对象</span><br>        <span class="hljs-comment">//获取所有构造方法（public）</span><br>        Constructor[] constructors1 = clazz.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors1) &#123;<br>            System.out.println(constructor);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-comment">//获取所有构造（带私有的）</span><br>        Constructor[] constructors2 = clazz.getDeclaredConstructors();<br><br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors2) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-comment">//获取指定的空参构造</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con1</span> <span class="hljs-operator">=</span> clazz.getConstructor();<br>        System.out.println(con1);<br><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con2</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class,<span class="hljs-type">int</span>.class);<br>        System.out.println(con2);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br>        <span class="hljs-comment">//获取指定的构造(所有构造都可以获取到，包括public包括private)</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con3</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();<br>        System.out.println(con3);<br>        <span class="hljs-comment">//了解 System.out.println(con3 == con1);</span><br>        <span class="hljs-comment">//每一次获取构造方法对象的时候，都会新new一个。</span><br><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con4</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(String.class);<br>        System.out.println(con4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-获取构造方法并创建对象"><a href="#1-6-获取构造方法并创建对象" class="headerlink" title="1.6 获取构造方法并创建对象"></a>1.6 获取构造方法并创建对象</h2><p>涉及到的方法：newInstance</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先要有一个javabean类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//测试类中的代码：</span><br><span class="hljs-comment">//需求1：</span><br><span class="hljs-comment">//获取空参，并创建对象</span><br><br><span class="hljs-comment">//1.获取整体的字节码文件对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);<br><span class="hljs-comment">//2.获取空参的构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> clazz.getConstructor();<br><span class="hljs-comment">//3.利用空参构造方法创建对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) con.newInstance();<br>System.out.println(stu);<br><br><br>System.out.println(<span class="hljs-string">&quot;=============================================&quot;</span>);<br><br><br><span class="hljs-comment">//测试类中的代码：</span><br><span class="hljs-comment">//需求2：</span><br><span class="hljs-comment">//获取带参构造，并创建对象</span><br><span class="hljs-comment">//1.获取整体的字节码文件对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);<br><span class="hljs-comment">//2.获取有参构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br><span class="hljs-comment">//3.临时修改构造方法的访问权限（暴力反射）</span><br>con.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//4.直接创建对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) con.newInstance(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">23</span>);<br>System.out.println(stu);<br></code></pre></td></tr></table></figure><h2 id="1-7-获取成员变量"><a href="#1-7-获取成员变量" class="headerlink" title="1.7 获取成员变量"></a>1.7 获取成员变量</h2><p>规则：</p><p>​get表示获取</p><p>​Declared表示私有</p><p>​最后的s表示所有，复数形式</p><p>​如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><p>方法名：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有成员变量对象的数组（只能拿public的）</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组，存在就能拿到</td></tr><tr><td>Field getField(String name)</td><td>返回单个成员变量对象（只能拿public的）</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象，存在就能拿到</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//获取成员变量对象</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取成员变量的对象（Field对象)只能获取public修饰的</span><br>        Field[] fields1 = clazz.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields1) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br><br>        <span class="hljs-comment">//获取成员变量的对象（public + private）</span><br>        Field[] fields2 = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields2) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        <span class="hljs-comment">//获得单个成员变量对象</span><br>        <span class="hljs-comment">//如果获取的属性是不存在的，那么会报异常</span><br>        <span class="hljs-comment">//Field field3 = clazz.getField(&quot;aaa&quot;);</span><br>        <span class="hljs-comment">//System.out.println(field3);//NoSuchFieldException</span><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field4</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;gender&quot;</span>);<br>        System.out.println(field4);<br><br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        <span class="hljs-comment">//获取单个成员变量（私有）</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field5</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(field5);<br><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String gender;<br><br>    <span class="hljs-keyword">public</span> String address;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String gender, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;, gender = &quot;</span> + gender + <span class="hljs-string">&quot;, address = &quot;</span> + address + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-8-获取成员变量并获取值和修改值"><a href="#1-8-获取成员变量并获取值和修改值" class="headerlink" title="1.8 获取成员变量并获取值和修改值"></a>1.8 获取成员变量并获取值和修改值</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void set(Object obj, Object value）</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;广州&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&quot;北京&quot;</span>);<br><br>        <span class="hljs-comment">//需求：</span><br>        <span class="hljs-comment">//利用反射获取成员变量并获取值和修改值</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取name成员变量</span><br>        <span class="hljs-comment">//field就表示name这个属性的对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">//临时修饰他的访问权限</span><br>        field.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//3.设置(修改)name的值</span><br>        <span class="hljs-comment">//参数一：表示要修改哪个对象的name？</span><br>        <span class="hljs-comment">//参数二：表示要修改为多少？</span><br>        field.set(s,<span class="hljs-string">&quot;wangwu&quot;</span>);<br><br>        <span class="hljs-comment">//3.获取name的值</span><br>        <span class="hljs-comment">//表示我要获取这个对象的name的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String)field.get(s);<br><br>        <span class="hljs-comment">//4.打印结果</span><br>        System.out.println(result);<br><br>        System.out.println(s);<br>        System.out.println(ss);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String gender;<br>    <span class="hljs-keyword">public</span> String address;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String gender, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;, gender = &quot;</span> + gender + <span class="hljs-string">&quot;, address = &quot;</span> + address + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-9-获取成员方法"><a href="#1-9-获取成员方法" class="headerlink" title="1.9 获取成员方法"></a>1.9 获取成员方法</h2><p>规则：</p><p>​get表示获取</p><p>​Declared表示私有</p><p>​最后的s表示所有，复数形式</p><p>​如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有成员方法对象的数组（只能拿public的）</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，存在就能拿到</td></tr><tr><td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象（只能拿public的）</td></tr><tr><td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象，存在就能拿到</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br><br>        <span class="hljs-comment">//2.获取方法</span><br>        <span class="hljs-comment">//getMethods可以获取父类中public修饰的方法</span><br>        Method[] methods1 = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods1) &#123;<br>            System.out.println(method);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        <span class="hljs-comment">//获取所有的方法（包含私有）</span><br>        <span class="hljs-comment">//但是只能获取自己类中的方法</span><br>        Method[] methods2 = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods2) &#123;<br>            System.out.println(method);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        <span class="hljs-comment">//获取指定的方法（空参）</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method3</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;sleep&quot;</span>);<br>        System.out.println(method3);<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method4</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<br>        System.out.println(method4);<br><br>        <span class="hljs-comment">//获取指定的私有方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method5</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;playGame&quot;</span>);<br>        System.out.println(method5);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-10-获取成员方法并运行"><a href="#1-10-获取成员方法并运行" class="headerlink" title="1.10 获取成员方法并运行"></a>1.10 获取成员方法并运行</h2><p>方法</p><p> Object invoke(Object obj, Object… args) ：运行方法</p><p>参数一：用obj对象调用该方法</p><p>参数二：调用方法的传递的参数（如果没有就不写）</p><p>返回值：方法的返回值（如果没有就不写）</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.a02reflectdemo1;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//1.获取字节码文件对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取一个对象</span><br>        <span class="hljs-comment">//需要用这个对象去调用方法</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <br>        <span class="hljs-comment">//3.获取一个指定的方法</span><br>        <span class="hljs-comment">//参数一：方法名</span><br>        <span class="hljs-comment">//参数二：参数列表，如果没有可以不写</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eatMethod</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<br>        <br>        <span class="hljs-comment">//运行</span><br>        <span class="hljs-comment">//参数一：表示方法的调用对象</span><br>        <span class="hljs-comment">//参数二：方法在运行时需要的实际参数</span><br>        <span class="hljs-comment">//注意点：如果方法有返回值，那么需要接收invoke的结果</span><br>        <span class="hljs-comment">//如果方法没有返回值，则不需要接收</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) eatMethod.invoke(s, <span class="hljs-string">&quot;重庆小面&quot;</span>);<br>        System.out.println(result);<br><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String gender;<br>    <span class="hljs-keyword">public</span> String address;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">eat</span><span class="hljs-params">(String something)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在吃&quot;</span> + something);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;学生已经吃完了，非常happy&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h2><p>​你觉得反射好不好？好，有两个方向</p><p>​第一个方向：无视修饰符访问类中的内容。但是这种操作在开发中一般不用，都是框架底层来用的。</p><p>​第二个方向：反射可以跟配置文件结合起来使用，动态的创建对象，动态的调用方法。</p><h2 id="1-11-练习泛型擦除（掌握概念，了解代码）"><a href="#1-11-练习泛型擦除（掌握概念，了解代码）" class="headerlink" title="1.11 练习泛型擦除（掌握概念，了解代码）"></a>1.11 练习泛型擦除（掌握概念，了解代码）</h2><p>理解：（掌握）</p><p>​集合中的泛型只在java文件中存在，当编译成class文件之后，就没有泛型了。</p><p>代码示例：（了解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.reflectdemo;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//1.创建集合对象</span><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">123</span>);<br><span class="hljs-comment">//        list.add(&quot;aaa&quot;);</span><br><br>        <span class="hljs-comment">//2.利用反射运行add方法去添加字符串</span><br>        <span class="hljs-comment">//因为反射使用的是class字节码文件</span><br><br>        <span class="hljs-comment">//获取class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> list.getClass();<br><br>        <span class="hljs-comment">//获取add方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br><br>        <span class="hljs-comment">//运行方法</span><br>        method.invoke(list,<span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-comment">//打印集合</span><br>        System.out.println(list);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-12-练习：修改字符串的内容（掌握概念，了解代码）"><a href="#1-12-练习：修改字符串的内容（掌握概念，了解代码）" class="headerlink" title="1.12 练习：修改字符串的内容（掌握概念，了解代码）"></a>1.12 练习：修改字符串的内容（掌握概念，了解代码）</h2><p>在这个练习中，我需要你掌握的是字符串不能修改的真正原因。</p><p>字符串，在底层是一个byte类型的字节数组，名字叫做value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] value;<br></code></pre></td></tr></table></figure><p>真正不能被修改的原因：final和private</p><p>final修饰value表示value记录的地址值不能修改。</p><p>private修饰value而且没有对外提供getvalue和setvalue的方法。所以，在外界不能获取或修改value记录的地址值。</p><p>如果要强行修改可以用反射：</p><p>代码示例：（了解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">// private final byte[] value= &#123;97,98,99&#125;;</span><br><span class="hljs-comment">// 没有对外提供getvalue和setvalue的方法，不能修改value记录的地址值</span><br><span class="hljs-comment">// 如果我们利用反射获取了value的地址值。</span><br><span class="hljs-comment">// 也是可以修改的，final修饰的value</span><br><span class="hljs-comment">// 真正不可变的value数组的地址值，里面的内容利用反射还是可以修改的，比较危险</span><br><br><span class="hljs-comment">//1.获取class对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> s.getClass();<br><br><span class="hljs-comment">//2.获取value成员变量（private）</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>);<br><span class="hljs-comment">//但是这种操作非常危险</span><br><span class="hljs-comment">//JDK高版本已经屏蔽了这种操作，低版本还是可以的</span><br><span class="hljs-comment">//临时修改权限</span><br>field.setAccessible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//3.获取value记录的地址值</span><br><span class="hljs-type">byte</span>[] bytes = (<span class="hljs-type">byte</span>[]) field.get(s);<br>bytes[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br><br>System.out.println(s);<span class="hljs-comment">//dbc</span><br>System.out.println(ss);<span class="hljs-comment">//dbc</span><br></code></pre></td></tr></table></figure><h2 id="1-13-练习，反射和配置文件结合动态获取的练习（重点）"><a href="#1-13-练习，反射和配置文件结合动态获取的练习（重点）" class="headerlink" title="1.13 练习，反射和配置文件结合动态获取的练习（重点）"></a>1.13 练习，反射和配置文件结合动态获取的练习（重点）</h2><p>需求: 利用反射根据文件中的不同类名和方法名，创建不同的对象并调用方法。</p><p>分析:</p><p>①通过Properties加载配置文件</p><p>②得到类名和方法名</p><p>③通过类名反射得到Class对象</p><p>④通过Class对象创建一个对象</p><p>⑤通过Class对象得到方法</p><p>⑥调用方法</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo9</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//1.读取配置文件的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;day14-code\\prop.properties&quot;</span>);<br>        prop.load(fis);<br>        fis.close();<br>        System.out.println(prop);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classname</span> <span class="hljs-operator">=</span> prop.get(<span class="hljs-string">&quot;classname&quot;</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodname</span> <span class="hljs-operator">=</span> prop.get(<span class="hljs-string">&quot;methodname&quot;</span>) + <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-comment">//2.获取字节码文件对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(classname);<br><br>        <span class="hljs-comment">//3.要先创建这个类的对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();<br>        con.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> con.newInstance();<br>        System.out.println(o);<br><br>        <span class="hljs-comment">//4.获取方法的对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(methodname);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//5.运行方法</span><br>        method.invoke(o);<br><br><br>    &#125;<br>&#125;<br><br>配置文件中的信息：<br>classname=com.itheima.a02reflectdemo1.Student<br>methodname=sleep<br></code></pre></td></tr></table></figure><h2 id="1-14-利用发射保存对象中的信息（重点）"><a href="#1-14-利用发射保存对象中的信息（重点）" class="headerlink" title="1.14 利用发射保存对象中的信息（重点）"></a>1.14 利用发射保存对象中的信息（重点）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyReflectDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, IOException &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去</span><br><span class="hljs-comment">    */</span><br>       <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小A&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">167.5</span>,<span class="hljs-string">&quot;睡觉&quot;</span>);<br>       <span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;播妞&quot;</span>,<span class="hljs-number">10000</span>);<br>       saveObject(s);<br>    &#125;<br><br>    <span class="hljs-comment">//把对象里面所有的成员变量名和值保存到本地文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, IOException &#123;<br>        <span class="hljs-comment">//1.获取字节码文件的对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-comment">//2. 创建IO流</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;myreflect\\a.txt&quot;</span>));<br>        <span class="hljs-comment">//3. 获取所有的成员变量</span><br>        Field[] fields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">//获取成员变量的名字</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> field.getName();<br>            <span class="hljs-comment">//获取成员变量的值</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> field.get(obj);<br>            <span class="hljs-comment">//写出数据</span><br>            bw.write(name + <span class="hljs-string">&quot;=&quot;</span> + value);<br>            bw.newLine();<br>        &#125;<br><br>        bw.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> String hobby;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span> gender, <span class="hljs-type">double</span> height, String hobby)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.height = height;<br>        <span class="hljs-built_in">this</span>.hobby = hobby;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> height</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> height</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeight</span><span class="hljs-params">(<span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> hobby</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHobby</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hobby;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hobby</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobby</span><span class="hljs-params">(String hobby)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hobby = hobby;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;, gender = &quot;</span> + gender + <span class="hljs-string">&quot;, height = &quot;</span> + height + <span class="hljs-string">&quot;, hobby = &quot;</span> + hobby + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> salary</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> salary</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, salary = &quot;</span> + salary + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2. 动态代理"></a>2. 动态代理</h1><h2 id="2-1-好处："><a href="#2-1-好处：" class="headerlink" title="2.1 好处："></a>2.1 好处：</h2><p>​无侵入式的给方法增强功能</p><h2 id="2-2-动态代理三要素："><a href="#2-2-动态代理三要素：" class="headerlink" title="2.2 动态代理三要素："></a>2.2 动态代理三要素：</h2><p>1，真正干活的对象</p><p>2，代理对象</p><p>3，利用代理调用方法</p><p>切记一点：代理可以增强或者拦截的方法都在接口中，接口需要写在newProxyInstance的第二个参数里。</p><h2 id="2-3-代码实现："><a href="#2-3-代码实现：" class="headerlink" title="2.3 代码实现："></a>2.3 代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        需求：</span><br><span class="hljs-comment">            外面的人想要大明星唱一首歌</span><br><span class="hljs-comment">             1. 获取代理的对象</span><br><span class="hljs-comment">                代理对象 = ProxyUtil.createProxy(大明星的对象);</span><br><span class="hljs-comment">             2. 再调用代理的唱歌方法</span><br><span class="hljs-comment">                代理对象.唱歌的方法(&quot;只因你太美&quot;);</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-comment">//1. 获取代理的对象</span><br>        <span class="hljs-type">BigStar</span> <span class="hljs-variable">bigStar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigStar</span>(<span class="hljs-string">&quot;鸡哥&quot;</span>);<br>        <span class="hljs-type">Star</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> ProxyUtil.createProxy(bigStar);<br><br>        <span class="hljs-comment">//2. 调用唱歌的方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proxy.sing(<span class="hljs-string">&quot;只因你太美&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 类的作用：</span><br><span class="hljs-comment">*       创建一个代理</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 方法的作用：</span><br><span class="hljs-comment">    *       给一个明星的对象，创建一个代理</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *  形参：</span><br><span class="hljs-comment">    *       被代理的明星对象</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *  返回值：</span><br><span class="hljs-comment">    *       给明星创建的代理</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 需求：</span><br><span class="hljs-comment">    *   外面的人想要大明星唱一首歌</span><br><span class="hljs-comment">    *   1. 获取代理的对象</span><br><span class="hljs-comment">    *      代理对象 = ProxyUtil.createProxy(大明星的对象);</span><br><span class="hljs-comment">    *   2. 再调用代理的唱歌方法</span><br><span class="hljs-comment">    *      代理对象.唱歌的方法(&quot;只因你太美&quot;);</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Star <span class="hljs-title function_">createProxy</span><span class="hljs-params">(BigStar bigStar)</span>&#123;<br>       <span class="hljs-comment">/* java.lang.reflect.Proxy类：提供了为对象产生代理对象的方法：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span><br><span class="hljs-comment">        参数一：用于指定用哪个类加载器，去加载生成的代理类</span><br><span class="hljs-comment">        参数二：指定接口，这些接口用于指定生成的代理长什么，也就是有哪些方法</span><br><span class="hljs-comment">        参数三：用来指定生成的代理对象要干什么事情*/</span><br>        <span class="hljs-type">Star</span> <span class="hljs-variable">star</span> <span class="hljs-operator">=</span> (Star) Proxy.newProxyInstance(<br>                ProxyUtil.class.getClassLoader(),<span class="hljs-comment">//参数一：用于指定用哪个类加载器，去加载生成的代理类</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Star.class&#125;,<span class="hljs-comment">//参数二：指定接口，这些接口用于指定生成的代理长什么，也就是有哪些方法</span><br>                <span class="hljs-comment">//参数三：用来指定生成的代理对象要干什么事情</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        * 参数一：代理的对象</span><br><span class="hljs-comment">                        * 参数二：要运行的方法 sing</span><br><span class="hljs-comment">                        * 参数三：调用sing方法时，传递的实参</span><br><span class="hljs-comment">                        * */</span><br>                        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;sing&quot;</span>.equals(method.getName()))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备话筒，收钱&quot;</span>);<br>                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;dance&quot;</span>.equals(method.getName()))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备场地，收钱&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-comment">//去找大明星开始唱歌或者跳舞</span><br>                        <span class="hljs-comment">//代码的表现形式：调用大明星里面唱歌或者跳舞的方法</span><br>                        <span class="hljs-keyword">return</span> method.invoke(bigStar,args);<br>                    &#125;<br>                &#125;<br>        );<br>        <span class="hljs-keyword">return</span> star;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Star</span> &#123;<br>    <span class="hljs-comment">//我们可以把所有想要被代理的方法定义在接口当中</span><br>    <span class="hljs-comment">//唱歌</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-comment">//跳舞</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Star</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BigStar</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BigStar</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//唱歌</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在唱&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;谢谢&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//跳舞</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在跳舞&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;BigStar&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-4-额外扩展"><a href="#2-4-额外扩展" class="headerlink" title="2.4 额外扩展"></a>2.4 额外扩展</h2><p>动态代理，还可以拦截方法</p><p>比如：</p><p>​在这个故事中，经济人作为代理，如果别人让邀请大明星去唱歌，打篮球，经纪人就增强功能。</p><p>​但是如果别人让大明星去扫厕所，经纪人就要拦截，不会去调用大明星的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 类的作用：</span><br><span class="hljs-comment">*       创建一个代理</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Star <span class="hljs-title function_">createProxy</span><span class="hljs-params">(BigStar bigStar)</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span><br>        <span class="hljs-type">Star</span> <span class="hljs-variable">star</span> <span class="hljs-operator">=</span> (Star) Proxy.newProxyInstance(<br>                ProxyUtil.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Star.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;cleanWC&quot;</span>.equals(method.getName()))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;拦截，不调用大明星的方法&quot;</span>);<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                        &#125;<br>                        <span class="hljs-comment">//如果是其他方法，正常执行</span><br>                        <span class="hljs-keyword">return</span> method.invoke(bigStar,args);<br>                    &#125;<br>                &#125;<br>        );<br>        <span class="hljs-keyword">return</span> star;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-动态代理的练习"><a href="#2-5-动态代理的练习" class="headerlink" title="2.5 动态代理的练习"></a>2.5 动态代理的练习</h2><p>​ 对add方法进行增强，对remove方法进行拦截，对其他方法不拦截也不增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProxyDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//动态代码可以增强也可以拦截</span><br>        <span class="hljs-comment">//1.创建真正干活的人</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//2.创建代理对象</span><br>        <span class="hljs-comment">//参数一：类加载器。当前类名.class.getClassLoader()</span><br>        <span class="hljs-comment">//                 找到是谁，把当前的类，加载到内存中了，我再麻烦他帮我干一件事情，把后面的代理类，也加载到内存</span><br><br>        <span class="hljs-comment">//参数二：是一个数组，在数组里面写接口的字节码文件对象。</span><br>        <span class="hljs-comment">//                  如果写了List，那么表示代理，可以代理List接口里面所有的方法，对这些方法可以增强或者拦截</span><br>        <span class="hljs-comment">//                  但是，一定要写ArrayList真实实现的接口</span><br>        <span class="hljs-comment">//                  假设在第二个参数中，写了MyInter接口，那么是错误的。</span><br>        <span class="hljs-comment">//                  因为ArrayList并没有实现这个接口，那么就无法对这个接口里面的方法，进行增强或拦截</span><br>        <span class="hljs-comment">//参数三：用来创建代理对象的匿名内部类</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">proxyList</span> <span class="hljs-operator">=</span> (List) Proxy.newProxyInstance(<br>                <span class="hljs-comment">//参数一：类加载器</span><br>                MyProxyDemo1.class.getClassLoader(),<br>                <span class="hljs-comment">//参数二：是一个数组，表示代理对象能代理的方法范围</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;List.class&#125;,<br>                <span class="hljs-comment">//参数三：本质就是代理对象</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-comment">//invoke方法参数的意义</span><br>                    <span class="hljs-comment">//参数一：表示代理对象，一般不用（了解）</span><br>                    <span class="hljs-comment">//参数二：就是方法名，我们可以对方法名进行判断，是增强还是拦截</span><br>                    <span class="hljs-comment">//参数三：就是下面第三步调用方法时，传递的参数。</span><br>                    <span class="hljs-comment">//举例1：</span><br>                    <span class="hljs-comment">//list.add(&quot;阿玮好帅&quot;);</span><br>                    <span class="hljs-comment">//此时参数二就是add这个方法名</span><br>                    <span class="hljs-comment">//此时参数三 args[0] 就是 阿玮好帅</span><br>                    <span class="hljs-comment">//举例2：</span><br>                    <span class="hljs-comment">//list.set(1, &quot;aaa&quot;);</span><br>                    <span class="hljs-comment">//此时参数二就是set这个方法名</span><br>                    <span class="hljs-comment">//此时参数三  args[0] 就是 1  args[1]&quot;aaa&quot;</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">//对add方法做一个增强，统计耗时时间</span><br>                        <span class="hljs-keyword">if</span> (method.getName().equals(<span class="hljs-string">&quot;add&quot;</span>)) &#123;<br>                            <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                            <span class="hljs-comment">//调用集合的方法，真正的添加数据</span><br>                            method.invoke(list, args);<br>                            <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                            System.out.println(<span class="hljs-string">&quot;耗时时间：&quot;</span> + (end - start));<br>                            <span class="hljs-comment">//需要进行返回，返回值要跟真正增强或者拦截的方法保持一致</span><br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;remove&quot;</span>) &amp;&amp; args[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> Integer)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;拦截了按照索引删除的方法&quot;</span>);<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;remove&quot;</span>))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;拦截了按照对象删除的方法&quot;</span>);<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-comment">//如果当前调用的是其他方法,我们既不增强，也不拦截</span><br>                            method.invoke(list,args);<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>        );<br><br>        <span class="hljs-comment">//3.调用方法</span><br>        <span class="hljs-comment">//如果调用者是list，就好比绕过了第二步的代码，直接添加元素</span><br>        <span class="hljs-comment">//如果调用者是代理对象，此时代理才能帮我们增强或者拦截</span><br><br>        <span class="hljs-comment">//每次调用方法的时候，都不会直接操作集合</span><br>        <span class="hljs-comment">//而是先调用代理里面的invoke，在invoke方法中进行判断，可以增强或者拦截</span><br>        proxyList.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        proxyList.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        proxyList.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        proxyList.add(<span class="hljs-string">&quot;ddd&quot;</span>);<br><br>        proxyList.remove(<span class="hljs-number">0</span>);<br>        proxyList.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><br>        <span class="hljs-comment">//打印集合</span><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-反射&quot;&gt;&lt;a href=&quot;#1-反射&quot; class=&quot;headerlink&quot; title=&quot;1. 反射&quot;&gt;&lt;/a&gt;1. 反射&lt;/h1&gt;&lt;h2 id=&quot;1-1-反射的概述：&quot;&gt;&lt;a href=&quot;#1-1-反射的概述：&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="https://iexlee.github.io/33%E3%80%81%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html"/>
    <id>https://iexlee.github.io/33%E3%80%81%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html</id>
    <published>2022-06-27T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-网络编程入门"><a href="#1-网络编程入门" class="headerlink" title="1. 网络编程入门"></a>1. 网络编程入门</h2><h3 id="1-1-网络编程概述"><a href="#1-1-网络编程概述" class="headerlink" title="1.1 网络编程概述"></a>1.1 网络编程概述</h3><ul><li><p>计算机网络</p><p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p></li><li><p>网络编程</p><p>在网络通信协议下，不同计算机上运行的程序，可以进行数据传输</p></li></ul><h3 id="1-2-网络编程三要素"><a href="#1-2-网络编程三要素" class="headerlink" title="1.2 网络编程三要素"></a>1.2 网络编程三要素</h3><ul><li><p>IP地址</p><p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p></li><li><p>端口</p><p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p></li><li><p>协议</p><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p></li></ul><h3 id="1-3-IP地址"><a href="#1-3-IP地址" class="headerlink" title="1.3 IP地址"></a>1.3 IP地址</h3><p>IP地址：是网络中设备的唯一标识</p><ul><li>IP地址分为两大类<ul><li>IPv4：是给每个连接在网络上的主机分配一个32bit地址。按照TCP&#x2F;IP规定，IP地址用二进制来表示，每个IP地址长32bit，也就是4个字节。例如一个采用二进制形式的IP地址是“11000000 10101000 00000001 01000010”，这么长的地址，处理起来也太费劲了。为了方便使用，IP地址经常被写成十进制的形式，中间使用符号“.”分隔不同的字节。于是，上面的IP地址可以表示为“192.168.1.66”。IP地址的这种表示法叫做“点分十进制表示法”，这显然比1和0容易记忆得多</li><li>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。为了扩大地址空间，通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，这样就解决了网络地址资源数量不够的问题</li></ul></li><li>DOS常用命令：<ul><li>ipconfig：查看本机IP地址</li><li>ping IP地址：检查网络是否连通</li></ul></li><li>特殊IP地址：<ul><li>127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用</li></ul></li></ul><h3 id="1-4-InetAddress"><a href="#1-4-InetAddress" class="headerlink" title="1.4 InetAddress"></a>1.4 InetAddress</h3><p>InetAddress：此类表示Internet协议（IP）地址</p><ul><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static InetAddress getByName(String host)</td><td>确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址</td></tr><tr><td>String getHostName()</td><td>获取此IP地址的主机名</td></tr><tr><td>String getHostAddress()</td><td>返回文本显示中的IP地址字符串</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InetAddressDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br><span class="hljs-comment">//InetAddress address = InetAddress.getByName(&quot;itheima&quot;);</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;192.168.1.66&quot;</span>);<br><br>        <span class="hljs-comment">//public String getHostName()：获取此IP地址的主机名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> address.getHostName();<br>        <span class="hljs-comment">//public String getHostAddress()：返回文本显示中的IP地址字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> address.getHostAddress();<br><br>        System.out.println(<span class="hljs-string">&quot;主机名：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;IP地址：&quot;</span> + ip);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-5-端口和协议"><a href="#1-5-端口和协议" class="headerlink" title="1.5 端口和协议"></a>1.5 端口和协议</h3><ul><li><p>端口</p><ul><li>设备上应用程序的唯一标识</li></ul></li><li><p>端口号</p><ul><li>用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</li></ul></li><li><p>协议</p><ul><li>计算机网络中，连接和通信的规则被称为网络通信协议</li></ul></li><li><p>UDP协议</p><ul><li>用户数据报协议(User Datagram Protocol)</li><li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</li><li>由于使用UDP协议消耗系统资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</li><li>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议</li></ul></li><li><p>TCP协议</p><ul><li><p>传输控制协议 (Transmission Control Protocol)</p></li><li><p>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</p></li><li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠</p><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</p><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</p><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接</p></li><li><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</p></li></ul></li></ul><h2 id="2-UDP通信程序"><a href="#2-UDP通信程序" class="headerlink" title="2.UDP通信程序"></a>2.UDP通信程序</h2><h3 id="2-1-UDP发送数据"><a href="#2-1-UDP发送数据" class="headerlink" title="2.1 UDP发送数据"></a>2.1 UDP发送数据</h3><ul><li><p>Java中的UDP通信</p><ul><li>UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念</li><li>Java提供了DatagramSocket类作为基于UDP协议的Socket</li></ul></li><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>DatagramSocket()</td><td>创建数据报套接字并将其绑定到本机地址上的任何可用端口</td></tr><tr><td>DatagramPacket(byte[] buf,int len,InetAddress add,int port)</td><td>创建数据包,发送长度为len的数据包到指定主机的指定端口</td></tr></tbody></table></li><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void send(DatagramPacket p)</td><td>发送数据报包</td></tr><tr><td>void close()</td><td>关闭数据报套接字</td></tr><tr><td>void receive(DatagramPacket p)</td><td>从此套接字接受数据报包</td></tr></tbody></table></li><li><p>发送数据的步骤</p><ul><li>创建发送端的Socket对象(DatagramSocket)</li><li>创建数据，并把数据打包</li><li>调用DatagramSocket对象的方法发送数据</li><li>关闭发送端</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建发送端的Socket对象(DatagramSocket)</span><br>        <span class="hljs-comment">// DatagramSocket() 构造数据报套接字并将其绑定到本地主机上的任何可用端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br>        <span class="hljs-comment">//创建数据，并把数据打包</span><br>        <span class="hljs-comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span><br>        <span class="hljs-comment">//构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。</span><br>        <span class="hljs-type">byte</span>[] bys = <span class="hljs-string">&quot;hello,udp,我来了&quot;</span>.getBytes();<br><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bys,bys.length,InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">10086</span>);<br><br>        <span class="hljs-comment">//调用DatagramSocket对象的方法发送数据</span><br>        <span class="hljs-comment">//void send(DatagramPacket p) 从此套接字发送数据报包</span><br>        ds.send(dp);<br><br>        <span class="hljs-comment">//关闭发送端</span><br>        <span class="hljs-comment">//void close() 关闭此数据报套接字</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2UDP接收数据"><a href="#2-2UDP接收数据" class="headerlink" title="2.2UDP接收数据"></a>2.2UDP接收数据</h3><ul><li><p>接收数据的步骤</p><ul><li>创建接收端的Socket对象(DatagramSocket)</li><li>创建一个数据包，用于接收数据</li><li>调用DatagramSocket对象的方法接收数据</li><li>解析数据包，并把数据在控制台显示</li><li>关闭接收端</li></ul></li><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>DatagramPacket(byte[] buf, int len)</td><td>创建一个DatagramPacket用于接收长度为len的数据包</td></tr></tbody></table></li><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>byte[]  getData()</td><td>返回数据缓冲区</td></tr><tr><td>int  getLength()</td><td>返回要发送的数据的长度或接收的数据的长度</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-comment">//创建接收端的Socket对象(DatagramSocket)</span><br>      <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">12345</span>);<br><br>      <span class="hljs-comment">//创建一个数据包，用于接收数据</span><br>      <span class="hljs-type">byte</span>[] bys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>      <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bys, bys.length);<br><br>      <span class="hljs-comment">//调用DatagramSocket对象的方法接收数据</span><br>      ds.receive(dp);<br><br>      <span class="hljs-comment">//解析数据包，并把数据在控制台显示</span><br>      System.out.println(<span class="hljs-string">&quot;数据是：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dp.getData(), <span class="hljs-number">0</span>,                                             dp.getLength()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3UDP通信程序练习"><a href="#2-3UDP通信程序练习" class="headerlink" title="2.3UDP通信程序练习"></a>2.3UDP通信程序练习</h3><ul><li><p>案例需求</p><p>UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</p><p>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    UDP发送数据：</span><br><span class="hljs-comment">        数据来自于键盘录入，直到输入的数据是886，发送数据结束</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建发送端的Socket对象(DatagramSocket)</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>        <span class="hljs-comment">//键盘录入数据</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-comment">//输入的数据是886，发送数据结束</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;886&quot;</span>.equals(s)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//创建数据，并把数据打包</span><br>            <span class="hljs-type">byte</span>[] bys = s.getBytes();<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bys, bys.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.1.66&quot;</span>), <span class="hljs-number">12345</span>);<br><br>            <span class="hljs-comment">//调用DatagramSocket对象的方法发送数据</span><br>            ds.send(dp);<br>        &#125;<br>        <span class="hljs-comment">//关闭发送端</span><br>        ds.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    UDP接收数据：</span><br><span class="hljs-comment">        因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建接收端的Socket对象(DatagramSocket)</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">12345</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//创建一个数据包，用于接收数据</span><br>            <span class="hljs-type">byte</span>[] bys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bys, bys.length);<br>            <span class="hljs-comment">//调用DatagramSocket对象的方法接收数据</span><br>            ds.receive(dp);<br>            <span class="hljs-comment">//解析数据包，并把数据在控制台显示</span><br>            System.out.println(<span class="hljs-string">&quot;数据是：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dp.getData(), <span class="hljs-number">0</span>, dp.getLength()));<br>        &#125;<br>        <span class="hljs-comment">//关闭接收端</span><br><span class="hljs-comment">//        ds.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-4UDP三种通讯方式"><a href="#2-4UDP三种通讯方式" class="headerlink" title="2.4UDP三种通讯方式"></a>2.4UDP三种通讯方式</h3><ul><li><p>单播</p><p>单播用于两个主机之间的端对端通信</p></li><li><p>组播</p><p>组播用于对一组特定的主机进行通信</p></li><li><p>广播</p><p>广播用于一个主机对整个局域网上所有主机上的数据通信</p></li></ul><h3 id="2-5UDP组播实现"><a href="#2-5UDP组播实现" class="headerlink" title="2.5UDP组播实现"></a>2.5UDP组播实现</h3><ul><li><p>实现步骤</p><ul><li>发送端<ol><li>创建发送端的Socket对象(DatagramSocket)</li><li>创建数据，并把数据打包(DatagramPacket)</li><li>调用DatagramSocket对象的方法发送数据(在单播中,这里是发给指定IP的电脑但是在组播当中,这里是发给组播地址)</li><li>释放资源</li></ol></li><li>接收端<ol><li>创建接收端Socket对象(MulticastSocket)</li><li>创建一个箱子,用于接收数据</li><li>把当前计算机绑定一个组播地址</li><li>将数据接收到箱子中</li><li>解析数据包,并打印数据</li><li>释放资源</li></ol></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 发送端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClinetDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 1. 创建发送端的Socket对象(DatagramSocket)</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello 组播&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes = s.getBytes();<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>        <span class="hljs-comment">// 2. 创建数据，并把数据打包(DatagramPacket)</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes,bytes.length,address,port);<br>        <span class="hljs-comment">// 3. 调用DatagramSocket对象的方法发送数据(在单播中,这里是发给指定IP的电脑但是在组播当中,这里是发给组播地址)</span><br>        ds.send(dp);<br>        <span class="hljs-comment">// 4. 释放资源</span><br>        ds.close();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 接收端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 1. 创建接收端Socket对象(MulticastSocket)</span><br>        <span class="hljs-type">MulticastSocket</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MulticastSocket</span>(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 2. 创建一个箱子,用于接收数据</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br>        <span class="hljs-comment">// 3. 把当前计算机绑定一个组播地址,表示添加到这一组中.</span><br>        ms.joinGroup(InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.0&quot;</span>));<br>        <span class="hljs-comment">// 4. 将数据接收到箱子中</span><br>        ms.receive(dp);<br>        <span class="hljs-comment">// 5. 解析数据包,并打印数据</span><br>        <span class="hljs-type">byte</span>[] data = dp.getData();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,length));<br>        <span class="hljs-comment">// 6. 释放资源</span><br>        ms.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-6UDP广播实现"><a href="#2-6UDP广播实现" class="headerlink" title="2.6UDP广播实现"></a>2.6UDP广播实现</h3><ul><li><p>实现步骤</p><ul><li>发送端<ol><li>创建发送端Socket对象(DatagramSocket)</li><li>创建存储数据的箱子,将广播地址封装进去</li><li>发送数据</li><li>释放资源</li></ol></li><li>接收端<ol><li>创建接收端的Socket对象(DatagramSocket)</li><li>创建一个数据包，用于接收数据</li><li>调用DatagramSocket对象的方法接收数据</li><li>解析数据包，并把数据在控制台显示</li><li>关闭接收端</li></ol></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 发送端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-comment">// 1. 创建发送端Socket对象(DatagramSocket)</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><span class="hljs-comment">// 2. 创建存储数据的箱子,将广播地址封装进去</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;广播 hello&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes = s.getBytes();<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;255.255.255.255&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes,bytes.length,address,port);<br><span class="hljs-comment">// 3. 发送数据</span><br>        ds.send(dp);<br><span class="hljs-comment">// 4. 释放资源</span><br>        ds.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 接收端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 1. 创建接收端的Socket对象(DatagramSocket)</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 2. 创建一个数据包，用于接收数据</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>],<span class="hljs-number">1024</span>);<br>        <span class="hljs-comment">// 3. 调用DatagramSocket对象的方法接收数据</span><br>        ds.receive(dp);<br>        <span class="hljs-comment">// 4. 解析数据包，并把数据在控制台显示</span><br>        <span class="hljs-type">byte</span>[] data = dp.getData();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> dp.getLength();<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,length));<br>        <span class="hljs-comment">// 5. 关闭接收端</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>##3. TCP通信程序</p><h3 id="3-1TCP发送数据"><a href="#3-1TCP发送数据" class="headerlink" title="3.1TCP发送数据"></a>3.1TCP发送数据</h3><ul><li><p>Java中的TCP通信</p><ul><li>Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流来进行网络通信。</li><li>Java为客户端提供了Socket类，为服务器端提供了ServerSocket类</li></ul></li><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Socket(InetAddress address,int port)</td><td>创建流套接字并将其连接到指定IP指定端口号</td></tr><tr><td>Socket(String host, int port)</td><td>创建流套接字并将其连接到指定主机上的指定端口号</td></tr></tbody></table></li><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>InputStream  getInputStream()</td><td>返回此套接字的输入流</td></tr><tr><td>OutputStream getOutputStream()</td><td>返回此套接字的输出流</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP协议，发送数据</span><br><br>        <span class="hljs-comment">//1.创建Socket对象</span><br>        <span class="hljs-comment">//细节：在创建对象的同时会连接服务端</span><br>        <span class="hljs-comment">//      如果连接不上，代码会报错</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.可以从连接通道中获取输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//写出数据</span><br>        os.write(<span class="hljs-string">&quot;aaa&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//3.释放资源</span><br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2TCP接收数据"><a href="#3-2TCP接收数据" class="headerlink" title="3.2TCP接收数据"></a>3.2TCP接收数据</h3><ul><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>ServletSocket(int port)</td><td>创建绑定到指定端口的服务器套接字</td></tr></tbody></table></li><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Socket accept()</td><td>监听要连接到此的套接字并接受它</td></tr></tbody></table></li><li><p>注意事项</p><ol><li>accept方法是阻塞的,作用就是等待客户端连接</li><li>客户端创建对象并连接服务器,此时是通过三次握手协议,保证跟服务器之间的连接</li><li>针对客户端来讲,是往外写的,所以是输出流<br>针对服务器来讲,是往里读的,所以是输入流</li><li>read方法也是阻塞的</li><li>客户端在关流的时候,还多了一个往服务器写结束标记的动作</li><li>最后一步断开连接,通过四次挥手协议保证连接终止</li></ol></li><li><p>三次握手和四次挥手</p><ul><li><p>三次握手</p><p><img src="/medias/33%E3%80%81img_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/07_TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="07_TCP三次握手"></p></li><li><p>四次挥手</p><p><img src="/medias/33%E3%80%81img_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/08_TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="08_TCP四次挥手"></p></li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP协议，接收数据</span><br><br>        <span class="hljs-comment">//1.创建对象ServerSocker</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.监听客户端的链接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br>        <span class="hljs-comment">//3.从连接通道中获取输入流读取数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span> ((b = is.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-type">char</span>) b);<br>        &#125;<br><br>        <span class="hljs-comment">//4.释放资源</span><br>        socket.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-3TCP程序练习（传输中文）"><a href="#3-3TCP程序练习（传输中文）" class="headerlink" title="3.3TCP程序练习（传输中文）"></a>3.3TCP程序练习（传输中文）</h3><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP协议，发送数据</span><br><br>        <span class="hljs-comment">//1.创建Socket对象</span><br>        <span class="hljs-comment">//细节：在创建对象的同时会连接服务端</span><br>        <span class="hljs-comment">//      如果连接不上，代码会报错</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br><br>        <span class="hljs-comment">//2.可以从连接通道中获取输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//写出数据</span><br>        os.write(<span class="hljs-string">&quot;你好你好&quot;</span>.getBytes());<span class="hljs-comment">//12字节</span><br><br>        <span class="hljs-comment">//3.释放资源</span><br>        os.close();<br>        socket.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//TCP协议，接收数据</span><br><br>        <span class="hljs-comment">//1.创建对象ServerSocker</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.监听客户端的链接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br>        <span class="hljs-comment">//3.从连接通道中获取输入流读取数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br><br>        <span class="hljs-comment">// BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span> ((b = br.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>) b);<br>        &#125;<br><br>        <span class="hljs-comment">//4.释放资源</span><br>        socket.close();<br>        ss.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-综合练习"><a href="#4-综合练习" class="headerlink" title="4. 综合练习"></a>4. 综合练习</h2><h3 id="练习一：多发多收"><a href="#练习一：多发多收" class="headerlink" title="练习一：多发多收"></a>练习一：多发多收</h3><p>需求：</p><p>​客户端：多次发送数据</p><p>​服务器：接收多次接收数据，并打印</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：多次发送数据</span><br>        <span class="hljs-comment">//服务器：接收多次接收数据，并打印</span><br><br>        <span class="hljs-comment">//1. 创建Socket对象并连接服务端</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.写出数据</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入您要发送的信息&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;886&quot;</span>.equals(str))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            os.write(str.getBytes());<br>        &#125;<br>        <span class="hljs-comment">//3.释放资源</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：多次发送数据</span><br>        <span class="hljs-comment">//服务器：接收多次接收数据，并打印</span><br><br>        <span class="hljs-comment">//1.创建对象绑定10000端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.等待客户端来连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br>        <span class="hljs-comment">//3.读取数据</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream());<br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span> ((b = isr.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>)b);<br>        &#125;<br><br>        <span class="hljs-comment">//4.释放资源</span><br>        socket.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习二：接收并反馈"><a href="#练习二：接收并反馈" class="headerlink" title="练习二：接收并反馈"></a>练习二：接收并反馈</h3><ul><li><p>案例需求</p><p>客户端：发送数据，接受服务器反馈</p><p>服务器：收到消息后给出反馈</p></li><li><p>案例分析</p><ul><li>客户端创建对象，使用输出流输出数据</li><li>服务端创建对象，使用输入流接受数据</li><li>服务端使用输出流给出反馈数据</li><li>客户端使用输入流接受反馈数据</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br>       <span class="hljs-comment">// os.close();如果在这里关流,会导致整个socket都无法使用</span><br>        socket.shutdownOutput();<span class="hljs-comment">//仅仅关闭输出流.并写一个结束标记,对socket没有任何影响</span><br>        <br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br>        br.close();<br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 服务器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> ss.accept();<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> accept.getInputStream();<br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = is.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println((<span class="hljs-type">char</span>) b);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;看看我执行了吗?&quot;</span>);<br><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(accept.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;你谁啊?&quot;</span>);<br>        bw.newLine();<br>        bw.flush();<br><br>        bw.close();<br>        is.close();<br>        accept.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="练习三：上传练习（TCP协议）"><a href="#练习三：上传练习（TCP协议）" class="headerlink" title="练习三：上传练习（TCP协议）"></a>练习三：上传练习（TCP协议）</h3><ul><li><p>案例需求</p><p>客户端：数据来自于本地文件，接收服务器反馈</p><p>服务器：接收到的数据写入本地文件，给出反馈</p></li><li><p>案例分析</p><ul><li>创建客户端对象，创建输入流对象指向文件，每读一次数据就给服务器输出一次数据，输出结束后使用shutdownOutput()方法告知服务端传输结束</li><li>创建服务器对象，创建输出流对象指向文件，每接受一次数据就使用输出流输出到文件中，传输结束后。使用输出流给客户端反馈信息</li><li>客户端接受服务端的回馈信息</li></ul></li><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void shutdownInput()</td><td>将此套接字的输入流放置在“流的末尾”</td></tr><tr><td>void shutdownOutput()</td><td>禁止用此套接字的输出流</td></tr></tbody></table></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//1. 创建Socket对象，并连接服务器</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.读取本地文件中的数据，并写到服务器当中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        <span class="hljs-comment">//往服务器写出结束标记</span><br>        socket.shutdownOutput();<br><br><br>        <span class="hljs-comment">//3.接收服务器的回写数据</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(line);<br><br><br>        <span class="hljs-comment">//4.释放资源</span><br>        socket.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//1.创建对象并绑定端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.等待客户端来连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br>        <span class="hljs-comment">//3.读取数据并保存到本地文件中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;mysocketnet\\serverdir\\a.jpg&quot;</span>));<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        bos.close();<br>        <span class="hljs-comment">//4.回写数据</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>        bw.newLine();<br>        bw.flush();<br><br>        <span class="hljs-comment">//5.释放资源</span><br>        socket.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="练习四：文件名重复"><a href="#练习四：文件名重复" class="headerlink" title="练习四：文件名重复"></a>练习四：文件名重复</h3><pre><code class="hljs"> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UUIDTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(str);<span class="hljs-comment">//9f15b8c356c54f55bfcb0ee3023fce8a</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//1. 创建Socket对象，并连接服务器</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.读取本地文件中的数据，并写到服务器当中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        <span class="hljs-comment">//往服务器写出结束标记</span><br>        socket.shutdownOutput();<br><br><br>        <span class="hljs-comment">//3.接收服务器的回写数据</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(line);<br><br><br>        <span class="hljs-comment">//4.释放资源</span><br>        socket.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//1.创建对象并绑定端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.等待客户端来连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br>        <span class="hljs-comment">//3.读取数据并保存到本地文件中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;mysocketnet\\serverdir\\&quot;</span> + name + <span class="hljs-string">&quot;.jpg&quot;</span>));<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            bos.write(bytes, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        bos.close();<br>        <span class="hljs-comment">//4.回写数据</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>        bw.newLine();<br>        bw.flush();<br><br>        <span class="hljs-comment">//5.释放资源</span><br>        socket.close();<br>        ss.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习五：服务器改写为多线程"><a href="#练习五：服务器改写为多线程" class="headerlink" title="练习五：服务器改写为多线程"></a>练习五：服务器改写为多线程</h3><p>服务器只能处理一个客户端请求，接收完一个图片之后，服务器就关闭了。</p><p>优化方案一：</p><p>​使用循环</p><p>弊端：</p><p>​第一个用户正在上传数据，第二个用户就来访问了，此时第二个用户是无法成功上传的。</p><p>​所以，使用多线程改进</p><p>优化方案二：</p><p>​每来一个用户，就开启多线程处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//1. 创建Socket对象，并连接服务器</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.读取本地文件中的数据，并写到服务器当中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        <span class="hljs-comment">//往服务器写出结束标记</span><br>        socket.shutdownOutput();<br><br><br>        <span class="hljs-comment">//3.接收服务器的回写数据</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(line);<br><br><br>        <span class="hljs-comment">//4.释放资源</span><br>        socket.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//1.创建对象并绑定端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//2.等待客户端来连接</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br>            <span class="hljs-comment">//开启一条线程</span><br>            <span class="hljs-comment">//一个用户就对应服务端的一条线程</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(socket)).start();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//3.读取数据并保存到本地文件中</span><br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;mysocketnet\\serverdir\\&quot;</span> + name + <span class="hljs-string">&quot;.jpg&quot;</span>));<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            bos.close();<br>            <span class="hljs-comment">//4.回写数据</span><br>            <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//5.释放资源</span><br>           <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span>)&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   socket.close();<br>               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                   e.printStackTrace();<br>               &#125;<br>           &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习六：线程池改进"><a href="#练习六：线程池改进" class="headerlink" title="练习六：线程池改进"></a>练习六：线程池改进</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//1. 创建Socket对象，并连接服务器</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//2.读取本地文件中的数据，并写到服务器当中</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        <span class="hljs-comment">//往服务器写出结束标记</span><br>        socket.shutdownOutput();<br><br><br>        <span class="hljs-comment">//3.接收服务器的回写数据</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(line);<br><br><br>        <span class="hljs-comment">//4.释放资源</span><br>        socket.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span><br>        <span class="hljs-comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span><br><br><br>        <span class="hljs-comment">//创建线程池对象</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                <span class="hljs-number">3</span>,<span class="hljs-comment">//核心线程数量</span><br>                <span class="hljs-number">16</span>,<span class="hljs-comment">//线程池总大小</span><br>                <span class="hljs-number">60</span>,<span class="hljs-comment">//空闲时间</span><br>                TimeUnit.SECONDS,<span class="hljs-comment">//空闲时间（单位）</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">2</span>),<span class="hljs-comment">//队列</span><br>                Executors.defaultThreadFactory(),<span class="hljs-comment">//线程工厂，让线程池如何创建线程对象</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="hljs-comment">//阻塞队列</span><br>        );<br><br><br><br>        <span class="hljs-comment">//1.创建对象并绑定端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//2.等待客户端来连接</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br>            <span class="hljs-comment">//开启一条线程</span><br>            <span class="hljs-comment">//一个用户就对应服务端的一条线程</span><br>            <span class="hljs-comment">//new Thread(new MyRunnable(socket)).start();</span><br>            pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(socket));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//3.读取数据并保存到本地文件中</span><br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;mysocketnet\\serverdir\\&quot;</span> + name + <span class="hljs-string">&quot;.jpg&quot;</span>));<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            bos.close();<br>            <span class="hljs-comment">//4.回写数据</span><br>            <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>            bw.write(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            bw.newLine();<br>            bw.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//5.释放资源</span><br>           <span class="hljs-keyword">if</span>(socket != <span class="hljs-literal">null</span>)&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   socket.close();<br>               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                   e.printStackTrace();<br>               &#125;<br>           &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-网络编程入门&quot;&gt;&lt;a href=&quot;#1-网络编程入门&quot; class=&quot;headerlink&quot; title=&quot;1. 网络编程入门&quot;&gt;&lt;/a&gt;1. 网络编程入门&lt;/h2&gt;&lt;h3 id=&quot;1-1-网络编程概述&quot;&gt;&lt;a href=&quot;#1-1-网络编程概述&quot; class</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>多线程02</title>
    <link href="https://iexlee.github.io/32%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html"/>
    <id>https://iexlee.github.io/32%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html</id>
    <published>2022-06-21T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-线程池"><a href="#1-线程池" class="headerlink" title="1. 线程池"></a>1. 线程池</h2><h3 id="1-1-线程状态介绍"><a href="#1-1-线程状态介绍" class="headerlink" title="1.1 线程状态介绍"></a>1.1 线程状态介绍</h3><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p><p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    <br>        <span class="hljs-comment">/* 新建 */</span><br>        NEW , <br><br>        <span class="hljs-comment">/* 可运行状态 */</span><br>        RUNNABLE , <br><br>        <span class="hljs-comment">/* 阻塞状态 */</span><br>        BLOCKED , <br><br>        <span class="hljs-comment">/* 无限等待状态 */</span><br>        WAITING , <br><br>        <span class="hljs-comment">/* 计时等待 */</span><br>        TIMED_WAITING , <br><br>        <span class="hljs-comment">/* 终止 */</span><br>        TERMINATED;<br>    <br>&#125;<br>    <br>    <span class="hljs-comment">// 获取当前线程的状态</span><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> jdk.internal.misc.VM.toThreadState(threadStatus);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>通过源码我们可以看到Java中的线程存在6种状态，每种线程状态的含义如下</p><table><thead><tr><th>线程状态</th><th>具体含义</th></tr></thead><tbody><tr><td>NEW</td><td>一个尚未启动的线程的状态。也称之为初始状态、开始状态。线程刚被创建，但是并未启动。还没调用start方法。MyThread t &#x3D; new MyThread()只有线程象，没有线程特征。</td></tr><tr><td>RUNNABLE</td><td>当我们调用线程对象的start方法，那么此时线程对象进入了RUNNABLE状态。那么此时才是真正的在JVM进程中创建了一个线程，线程一经启动并不是立即得到执行，线程的运行与否要听令与CPU的调度，那么我们把这个中间状态称之为可执行状态(RUNNABLE)也就是说它具备执行的资格，但是并没有真正的执行起来而是在等待CPU的度。</td></tr><tr><td>BLOCKED</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>WAITING</td><td>一个正在等待的线程的状态。也称之为等待状态。造成线程等待的原因有两种，分别是调用Object.wait()、join()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。</td></tr><tr><td>TIMED_WAITING</td><td>一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有三种，分别是：Thread.sleep(long)，Object.wait(long)、join(long)。</td></tr><tr><td>TERMINATED</td><td>一个完全运行完成的线程的状态。也称之为终止状态、结束状态</td></tr></tbody></table><p>各个状态的转换，如下图所示：</p><p><img src="/medias/32%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B02/1591163781941.png" alt="1591163781941"></p><h3 id="1-2-线程池-基本原理"><a href="#1-2-线程池-基本原理" class="headerlink" title="1.2 线程池-基本原理"></a>1.2 线程池-基本原理</h3><p><strong>概述 :</strong> </p><p>​提到池，大家应该能想到的就是水池。水池就是一个容器，在该容器中存储了很多的水。那么什么是线程池呢？线程池也是可以看做成一个池子，在该池子中存储很多个线程。</p><p>线程池存在的意义：</p><p>​系统创建一个线程的成本是比较高的，因为它涉及到与操作系统交互，当程序中需要创建大量生存期很短暂的线程时，频繁的创建和销毁线程对系统的资源消耗有可能大于业务处理是对系</p><p>​统资源的消耗，这样就有点”舍本逐末”了。针对这一种情况，为了提高性能，我们就可以采用线程池。线程池在启动的时，会创建大量空闲线程，当我们向线程池提交任务的时，线程池就</p><p>​会启动一个线程来执行该任务。等待任务执行完毕以后，线程并不会死亡，而是再次返回到线程池中称为空闲状态。等待下一次任务的执行。</p><p><strong>线程池的设计思路 :</strong></p><ol><li>准备一个任务容器</li><li>一次性启动多个(2个)消费者线程</li><li>刚开始任务容器是空的，所以线程都在wait</li><li>直到一个外部线程向这个任务容器中扔了一个”任务”，就会有一个消费者线程被唤醒</li><li>这个消费者线程取出”任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来</li></ol><h3 id="1-3-线程池-Executors默认线程池"><a href="#1-3-线程池-Executors默认线程池" class="headerlink" title="1.3 线程池-Executors默认线程池"></a>1.3 线程池-Executors默认线程池</h3><p>概述 : JDK对线程池也进行了相关的实现，在真实企业开发中我们也很少去自定义线程池，而是使用JDK中自带的线程池。</p><p>我们可以使用Executors中所提供的<strong>静态</strong>方法来创建线程池</p><p>​static ExecutorService newCachedThreadPool()   创建一个默认的线程池<br>​static newFixedThreadPool(int nThreads)    创建一个指定最多线程数量的线程池</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mythreadpool;<br><br><br><span class="hljs-comment">//static ExecutorService newCachedThreadPool()   创建一个默认的线程池</span><br><span class="hljs-comment">//static newFixedThreadPool(int nThreads)    创建一个指定最多线程数量的线程池</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadPoolDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-comment">//1,创建一个默认的线程池对象.池子中默认是空的.默认最多可以容纳int类型的最大值.</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>        <span class="hljs-comment">//Executors --- 可以帮助我们创建线程池对象</span><br>        <span class="hljs-comment">//ExecutorService --- 可以帮助我们控制线程池</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        <span class="hljs-comment">//Thread.sleep(2000);</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        executorService.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-4-线程池-Executors创建指定上限的线程池"><a href="#1-4-线程池-Executors创建指定上限的线程池" class="headerlink" title="1.4 线程池-Executors创建指定上限的线程池"></a>1.4 线程池-Executors创建指定上限的线程池</h3><p><strong>使用Executors中所提供的静态方法来创建线程池</strong></p><p>​static ExecutorService newFixedThreadPool(int nThreads) : 创建一个指定最多线程数量的线程池</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mythreadpool;<br><br><span class="hljs-comment">//static ExecutorService newFixedThreadPool(int nThreads)</span><br><span class="hljs-comment">//创建一个指定最多线程数量的线程池</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadPoolDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//参数不是初始值而是最大值</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> (ThreadPoolExecutor) executorService;<br>        System.out.println(pool.getPoolSize());<span class="hljs-comment">//0</span><br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        executorService.submit(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在执行了&quot;</span>);<br>        &#125;);<br><br>        System.out.println(pool.getPoolSize());<span class="hljs-comment">//2</span><br><span class="hljs-comment">//        executorService.shutdown();</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-5-线程池-ThreadPoolExecutor"><a href="#1-5-线程池-ThreadPoolExecutor" class="headerlink" title="1.5 线程池-ThreadPoolExecutor"></a>1.5 线程池-ThreadPoolExecutor</h3><p><strong>创建线程池对象 :</strong> </p><p>ThreadPoolExecutor threadPoolExecutor &#x3D; new ThreadPoolExecutor(核心线程数量,最大线程数量,空闲线程最大存活时间,任务队列,创建线程工厂,任务的拒绝策略);</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mythreadpool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadPoolDemo3</span> &#123;<br><span class="hljs-comment">//    参数一：核心线程数量</span><br><span class="hljs-comment">//    参数二：最大线程数</span><br><span class="hljs-comment">//    参数三：空闲线程最大存活时间</span><br><span class="hljs-comment">//    参数四：时间单位</span><br><span class="hljs-comment">//    参数五：任务队列</span><br><span class="hljs-comment">//    参数六：创建线程工厂</span><br><span class="hljs-comment">//    参数七：任务的拒绝策略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,TimeUnit.SECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">10</span>), Executors.defaultThreadFactory(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>        pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>        pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br><br>        pool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-线程池-参数详解"><a href="#1-6-线程池-参数详解" class="headerlink" title="1.6 线程池-参数详解"></a>1.6 线程池-参数详解</h3><p><img src="/medias/32%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B02/1591165506516.png" alt="1591165506516"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                              TimeUnit unit,</span><br><span class="hljs-params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                              ThreadFactory threadFactory,</span><br><span class="hljs-params">                              RejectedExecutionHandler handler)</span><br>    <br>corePoolSize：   核心线程的最大值，不能小于<span class="hljs-number">0</span><br>maximumPoolSize：最大线程数，不能小于等于<span class="hljs-number">0</span>，maximumPoolSize &gt;= corePoolSize<br>keepAliveTime：  空闲线程最大存活时间,不能小于<span class="hljs-number">0</span><br>unit：           时间单位<br>workQueue：      任务队列，不能为<span class="hljs-literal">null</span><br>threadFactory：  创建线程工厂,不能为<span class="hljs-literal">null</span>      <br>handler：        任务的拒绝策略,不能为<span class="hljs-literal">null</span>  <br></code></pre></td></tr></table></figure><h3 id="1-7-线程池-非默认任务拒绝策略"><a href="#1-7-线程池-非默认任务拒绝策略" class="headerlink" title="1.7 线程池-非默认任务拒绝策略"></a>1.7 线程池-非默认任务拒绝策略</h3><p>RejectedExecutionHandler是jdk提供的一个任务拒绝策略接口，它下面存在4个子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadPoolExecutor.AbortPolicy:     丢弃任务并抛出RejectedExecutionException异常。是默认的策略。<br>ThreadPoolExecutor.DiscardPolicy：    丢弃任务，但是不抛出异常 这是不推荐的做法。<br>ThreadPoolExecutor.DiscardOldestPolicy：    抛弃队列中等待最久的任务 然后把当前任务加入队列中。<br>ThreadPoolExecutor.CallerRunsPolicy:        调用任务的run()方法绕过线程池直接执行。<br></code></pre></td></tr></table></figure><p>注：明确线程池对多可执行的任务数 &#x3D; 队列容量 + 最大线程数</p><p><strong>案例演示1</strong>：演示ThreadPoolExecutor.AbortPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolExecutorDemo01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">20</span> , TimeUnit.SECONDS ,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>) , Executors.defaultThreadFactory() , <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()) ;<br><br>        <span class="hljs-comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用AbortPolicy这个任务处理策略的时候，就会抛出异常</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">5</span> ; x++) &#123;<br>            threadPoolExecutor.submit(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&gt; 执行了任务&quot;</span>);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>----&gt;&gt; 执行了任务<br></code></pre></td></tr></table></figure><p>控制台报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><strong>案例演示2</strong>：演示ThreadPoolExecutor.DiscardPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolExecutorDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">20</span> , TimeUnit.SECONDS ,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>) , Executors.defaultThreadFactory() , <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.DiscardPolicy()) ;<br><br>        <span class="hljs-comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用DiscardPolicy这个任务处理策略的时候，控制台不会报错</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">5</span> ; x++) &#123;<br>            threadPoolExecutor.submit(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&gt; 执行了任务&quot;</span>);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>----&gt;&gt; 执行了任务<br></code></pre></td></tr></table></figure><p>控制台没有报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><strong>案例演示3</strong>：演示ThreadPoolExecutor.DiscardOldestPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolExecutorDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span><br><span class="hljs-comment">         */</span><br>        ThreadPoolExecutor threadPoolExecutor;<br>        threadPoolExecutor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">20</span> , TimeUnit.SECONDS ,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>) , Executors.defaultThreadFactory() , <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());<br>        <span class="hljs-comment">// 提交5个任务</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">5</span> ; x++) &#123;<br>            <span class="hljs-comment">// 定义一个变量，来指定指定当前执行的任务;这个变量需要被final修饰</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x ;<br>            threadPoolExecutor.submit(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&gt; 执行了任务&quot;</span> + y);<br>            &#125;);     <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>----&gt;&gt; 执行了任务<span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>----&gt;&gt; 执行了任务<span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>----&gt;&gt; 执行了任务<span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>----&gt;&gt; 执行了任务<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>由于任务1在线程池中等待时间最长，因此任务1被丢弃。</p><p><strong>案例演示4</strong>：演示ThreadPoolExecutor.CallerRunsPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolExecutorDemo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span><br><span class="hljs-comment">         */</span><br>        ThreadPoolExecutor threadPoolExecutor;<br>        threadPoolExecutor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">20</span> , TimeUnit.SECONDS ,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>) , Executors.defaultThreadFactory() , <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<br><br>        <span class="hljs-comment">// 提交5个任务</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; x &lt; <span class="hljs-number">5</span> ; x++) &#123;<br>            threadPoolExecutor.submit(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&gt; 执行了任务&quot;</span>);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>----&gt;&gt; 执行了任务<br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>----&gt;&gt; 执行了任务<br>main----&gt;&gt; 执行了任务<br></code></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到次策略没有通过线程池中的线程执行任务，而是直接调用任务的run()方法绕过线程池直接执行。</p><h2 id="2-多线程综合练习"><a href="#2-多线程综合练习" class="headerlink" title="2. 多线程综合练习"></a>2. 多线程综合练习</h2><h3 id="练习一：售票"><a href="#练习一：售票" class="headerlink" title="练习一：售票"></a>练习一：售票</h3><p>需求：</p><p>​一共有1000张电影票,可以在两个窗口领取,假设每次领取的时间为3000毫秒,</p><p>​请用多线程模拟卖票过程并打印剩余电影票的数量</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-comment">//第一种方式实现多线程，测试类中MyThread会创建多次，所以需要加static</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.循环</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//2.同步代码块</span><br>            <span class="hljs-keyword">synchronized</span> (MyThread.class) &#123;<br>                <span class="hljs-comment">//3.判断共享数据（已经到末尾）</span><br>                <span class="hljs-keyword">if</span> (ticket == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//4.判断共享数据（没有到末尾）</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">3000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    ticket--;<br>                    System.out.println(getName() + <span class="hljs-string">&quot;在卖票，还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票!!!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">            一共有1000张电影票,可以在两个窗口领取,假设每次领取的时间为3000毫秒,</span><br><span class="hljs-comment">            要求:请用多线程模拟卖票过程并打印剩余电影票的数量</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>        <span class="hljs-comment">//给线程设置名字</span><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br><br>        <span class="hljs-comment">//开启线程</span><br>        t1.start();<br>        t2.start();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="练习二：赠送礼物"><a href="#练习二：赠送礼物" class="headerlink" title="练习二：赠送礼物"></a>练习二：赠送礼物</h3><p>需求：</p><p>​有100份礼品,两人同时发送，当剩下的礼品小于10份的时候则不再送出。</p><p>​利用多线程模拟该过程并将线程的名字和礼物的剩余数量打印出来.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">//第二种方式实现多线程，测试类中MyRunable只创建一次，所以不需要加static</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.循环</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//2.同步代码块</span><br>            <span class="hljs-keyword">synchronized</span> (MyThread.class) &#123;<br>                <span class="hljs-comment">//3.判断共享数据（已经到末尾）</span><br>                <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">10</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;礼物还剩下&quot;</span> + count + <span class="hljs-string">&quot;不再赠送&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//4.判断共享数据（没有到末尾）</span><br>                    count--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在赠送礼物，还剩下&quot;</span> + count + <span class="hljs-string">&quot;个礼物!!!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            有100份礼品,两人同时发送，当剩下的礼品小于10份的时候则不再送出，</span><br><span class="hljs-comment">            利用多线程模拟该过程并将线程的名字和礼物的剩余数量打印出来.</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//创建参数对象</span><br>        <span class="hljs-type">MyRunable</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunable</span>();<br><br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr,<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr,<span class="hljs-string">&quot;窗口2&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="练习三：打印数字"><a href="#练习三：打印数字" class="headerlink" title="练习三：打印数字"></a>练习三：打印数字</h3><p>需求：</p><p>​同时开启两个线程，共同获取1-100之间的所有数字。</p><p>​将输出所有的奇数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">//第二种方式实现多线程，测试类中MyRunable只创建一次，所以不需要加static</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.循环</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//2.同步代码块</span><br>            <span class="hljs-keyword">synchronized</span> (MyThread.class) &#123;<br>                <span class="hljs-comment">//3.判断共享数据（已经到末尾）</span><br>                <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">100</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//4.判断共享数据（没有到末尾）</span><br>                    <span class="hljs-keyword">if</span>(number % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;打印数字&quot;</span> + number);<br>                    &#125;<br>                    number++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">           同时开启两个线程，共同获取1-100之间的所有数字。</span><br><span class="hljs-comment">           要求：将输出所有的奇数。</span><br><span class="hljs-comment">        */</span><br><br><br>        <span class="hljs-comment">//创建参数对象</span><br>        <span class="hljs-type">MyRunable</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunable</span>();<br><br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr,<span class="hljs-string">&quot;线程A&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr,<span class="hljs-string">&quot;线程B&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习四：抢红包"><a href="#练习四：抢红包" class="headerlink" title="练习四：抢红包"></a>练习四：抢红包</h3><p>需求：</p><p>​抢红包也用到了多线程。</p><p>​假设：100块，分成了3个包，现在有5个人去抢。</p><p>​其中，红包是共享数据。</p><p>​5个人是5条线程。</p><p>​打印结果如下：</p><p>​  XXX抢到了XXX元</p><p>​  XXX抢到了XXX元</p><pre><code class="hljs">      XXX抢到了XXX元      XXX没抢到      XXX没抢到</code></pre><p>解决方案一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-comment">//共享数据</span><br>    <span class="hljs-comment">//100块，分成了3个包</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>    <span class="hljs-comment">//最小的中奖金额</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">MIN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.01</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//同步代码块</span><br>        <span class="hljs-keyword">synchronized</span> (MyThread.class)&#123;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//判断，共享数据是否到了末尾（已经到末尾）</span><br>                System.out.println(getName() + <span class="hljs-string">&quot;没有抢到红包！&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//判断，共享数据是否到了末尾（没有到末尾）</span><br>                <span class="hljs-comment">//定义一个变量，表示中奖的金额</span><br>                <span class="hljs-type">double</span> <span class="hljs-variable">prize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span>(count == <span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-comment">//表示此时是最后一个红包</span><br>                    <span class="hljs-comment">//就无需随机，剩余所有的钱都是中奖金额</span><br>                    prize = money;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//表示第一次，第二次（随机）</span><br>                    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                    <span class="hljs-comment">//100 元   3个包</span><br>                    <span class="hljs-comment">//第一个红包：99.98</span><br>                    <span class="hljs-comment">//100 - (3-1) * 0.01</span><br>                    <span class="hljs-type">double</span> <span class="hljs-variable">bounds</span> <span class="hljs-operator">=</span> money - (count - <span class="hljs-number">1</span>) * MIN;<br>                    prize = r.nextDouble(bounds);<br>                    <span class="hljs-keyword">if</span>(prize &lt; MIN)&#123;<br>                        prize = MIN;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//从money当中，去掉当前中奖的金额</span><br>                money = money - prize;<br>                <span class="hljs-comment">//红包的个数-1</span><br>                count--;<br>                <span class="hljs-comment">//本次红包的信息进行打印</span><br>                System.out.println(getName() + <span class="hljs-string">&quot;抢到了&quot;</span> + prize + <span class="hljs-string">&quot;元&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            微信中的抢红包也用到了多线程。</span><br><span class="hljs-comment">            假设：100块，分成了3个包，现在有5个人去抢。</span><br><span class="hljs-comment">            其中，红包是共享数据。</span><br><span class="hljs-comment">            5个人是5条线程。</span><br><span class="hljs-comment">            打印结果如下：</span><br><span class="hljs-comment">            XXX抢到了XXX元</span><br><span class="hljs-comment">            XXX抢到了XXX元</span><br><span class="hljs-comment">            XXX抢到了XXX元</span><br><span class="hljs-comment">            XXX没抢到</span><br><span class="hljs-comment">            XXX没抢到</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//创建线程的对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>        <span class="hljs-comment">//给线程设置名字</span><br>        t1.setName(<span class="hljs-string">&quot;小A&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;小QQ&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;小哈哈&quot;</span>);<br>        t4.setName(<span class="hljs-string">&quot;小诗诗&quot;</span>);<br>        t5.setName(<span class="hljs-string">&quot;小丹丹&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>        t4.start();<br>        t5.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方案二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-comment">//总金额</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">100.0</span>);<br>    <span class="hljs-comment">//个数</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">//最小抽奖金额</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">MIN</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.01</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (MyThread.class)&#123;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(getName() + <span class="hljs-string">&quot;没有抢到红包！&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//中奖金额</span><br>                BigDecimal prize;<br>                <span class="hljs-keyword">if</span>(count == <span class="hljs-number">1</span>)&#123;<br>                    prize = money;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//获取抽奖范围</span><br>                    <span class="hljs-type">double</span> <span class="hljs-variable">bounds</span> <span class="hljs-operator">=</span> money.subtract(BigDecimal.valueOf(count-<span class="hljs-number">1</span>).multiply(MIN)).doubleValue();<br>                    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                    <span class="hljs-comment">//抽奖金额</span><br>                    prize = BigDecimal.valueOf(r.nextDouble(bounds));<br>                &#125;<br>                <span class="hljs-comment">//设置抽中红包，小数点保留两位，四舍五入</span><br>                prize = prize.setScale(<span class="hljs-number">2</span>,RoundingMode.HALF_UP);<br>                <span class="hljs-comment">//在总金额中去掉对应的钱</span><br>                money = money.subtract(prize);<br>                <span class="hljs-comment">//红包少了一个</span><br>                count--;<br>                <span class="hljs-comment">//输出红包信息</span><br>                System.out.println(getName() + <span class="hljs-string">&quot;抽中了&quot;</span> + prize + <span class="hljs-string">&quot;元&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            微信中的抢红包也用到了多线程。</span><br><span class="hljs-comment">            假设：100块，分成了3个包，现在有5个人去抢。</span><br><span class="hljs-comment">            其中，红包是共享数据。</span><br><span class="hljs-comment">            5个人是5条线程。</span><br><span class="hljs-comment">            打印结果如下：</span><br><span class="hljs-comment">            XXX抢到了XXX元</span><br><span class="hljs-comment">            XXX抢到了XXX元</span><br><span class="hljs-comment">            XXX抢到了XXX元</span><br><span class="hljs-comment">            XXX没抢到</span><br><span class="hljs-comment">            XXX没抢到</span><br><span class="hljs-comment">        */</span><br><br><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>        t1.setName(<span class="hljs-string">&quot;小A&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;小QQ&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;小哈哈&quot;</span>);<br>        t4.setName(<span class="hljs-string">&quot;小诗诗&quot;</span>);<br>        t5.setName(<span class="hljs-string">&quot;小丹丹&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>        t4.start();<br>        t5.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习五：抽奖箱"><a href="#练习五：抽奖箱" class="headerlink" title="练习五：抽奖箱"></a>练习五：抽奖箱</h3><p>需求：</p><p>​有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 {10,5,20,50,100,200,500,800,2,80,300,700}; </p><p>创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2” </p><p>随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</p><p>​               每次抽出一个奖项就打印一个(随机)</p><p>​抽奖箱1 又产生了一个 10 元大奖</p><pre><code class="hljs">      抽奖箱1 又产生了一个 100 元大奖        抽奖箱1 又产生了一个 200 元大奖        抽奖箱1 又产生了一个 800 元大奖  </code></pre><p>​抽奖箱2 又产生了一个 700 元大奖  </p><pre><code class="hljs">      .....</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    ArrayList&lt;Integer&gt; list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(ArrayList&lt;Integer&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.循环</span><br>        <span class="hljs-comment">//2.同步代码块</span><br>        <span class="hljs-comment">//3.判断</span><br>        <span class="hljs-comment">//4.判断</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (MyThread.class) &#123;<br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//继续抽奖</span><br>                    Collections.shuffle(list);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">prize</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">0</span>);<br>                    System.out.println(getName() + <span class="hljs-string">&quot;又产生了一个&quot;</span> + prize + <span class="hljs-string">&quot;元大奖&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span><br><span class="hljs-comment">            创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2”</span><br><span class="hljs-comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span><br><span class="hljs-comment">                             每次抽出一个奖项就打印一个(随机)</span><br><span class="hljs-comment">            抽奖箱1 又产生了一个 10 元大奖</span><br><span class="hljs-comment">            抽奖箱1 又产生了一个 100 元大奖</span><br><span class="hljs-comment">            抽奖箱1 又产生了一个 200 元大奖</span><br><span class="hljs-comment">            抽奖箱1 又产生了一个 800 元大奖</span><br><span class="hljs-comment">            抽奖箱2 又产生了一个 700 元大奖</span><br><span class="hljs-comment">            .....</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//创建奖池</span><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">500</span>,<span class="hljs-number">800</span>,<span class="hljs-number">2</span>,<span class="hljs-number">80</span>,<span class="hljs-number">300</span>,<span class="hljs-number">700</span>);<br><br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(list);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(list);<br><br>        <span class="hljs-comment">//设置名字</span><br>        t1.setName(<span class="hljs-string">&quot;抽奖箱1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;抽奖箱2&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习六：多线程统计并求最大值"><a href="#练习六：多线程统计并求最大值" class="headerlink" title="练习六：多线程统计并求最大值"></a>练习六：多线程统计并求最大值</h3><p>需求：</p><p>​在上一题基础上继续完成如下需求：</p><p>​     每次抽的过程中，不打印，抽完时一次性打印(随机)</p><p>​     在此次抽奖过程中，抽奖箱1总共产生了6个奖项。</p><p>​              分别为：10,20,100,500,2,300最高奖项为300元，总计额为932元</p><p>​     在此次抽奖过程中，抽奖箱2总共产生了6个奖项。</p><p>​              分别为：5,50,200,800,80,700最高奖项为800元，总计额为1835元</p><p>解决方案一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    ArrayList&lt;Integer&gt; list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(ArrayList&lt;Integer&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-comment">//线程一</span><br>    <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//线程二</span><br>    <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (MyThread.class) &#123;<br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;抽奖箱1&quot;</span>.equals(getName()))&#123;<br>                        System.out.println(<span class="hljs-string">&quot;抽奖箱1&quot;</span> + list1);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;抽奖箱2&quot;</span> + list2);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//继续抽奖</span><br>                    Collections.shuffle(list);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">prize</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;抽奖箱1&quot;</span>.equals(getName()))&#123;<br>                        list1.add(prize);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        list2.add(prize);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span><br><span class="hljs-comment">            创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2”</span><br><span class="hljs-comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span><br><span class="hljs-comment">            每次抽的过程中，不打印，抽完时一次性打印(随机)    在此次抽奖过程中，抽奖箱1总共产生了6个奖项。</span><br><span class="hljs-comment">                分别为：10,20,100,500,2,300最高奖项为300元，总计额为932元</span><br><span class="hljs-comment">            在此次抽奖过程中，抽奖箱2总共产生了6个奖项。</span><br><span class="hljs-comment">                分别为：5,50,200,800,80,700最高奖项为800元，总计额为1835元</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//创建奖池</span><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">500</span>,<span class="hljs-number">800</span>,<span class="hljs-number">2</span>,<span class="hljs-number">80</span>,<span class="hljs-number">300</span>,<span class="hljs-number">700</span>);<br><br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(list);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(list);<br><br>        <span class="hljs-comment">//设置名字</span><br>        t1.setName(<span class="hljs-string">&quot;抽奖箱1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;抽奖箱2&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>解决方案二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    ArrayList&lt;Integer&gt; list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(ArrayList&lt;Integer&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;Integer&gt; boxList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//1 //2</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (MyThread.class) &#123;<br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(getName() + boxList);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//继续抽奖</span><br>                    Collections.shuffle(list);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">prize</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">0</span>);<br>                    boxList.add(prize);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span><br><span class="hljs-comment">            创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2”</span><br><span class="hljs-comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span><br><span class="hljs-comment">            每次抽的过程中，不打印，抽完时一次性打印(随机)    在此次抽奖过程中，抽奖箱1总共产生了6个奖项。</span><br><span class="hljs-comment">                分别为：10,20,100,500,2,300最高奖项为300元，总计额为932元</span><br><span class="hljs-comment">            在此次抽奖过程中，抽奖箱2总共产生了6个奖项。</span><br><span class="hljs-comment">                分别为：5,50,200,800,80,700最高奖项为800元，总计额为1835元</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//创建奖池</span><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">500</span>,<span class="hljs-number">800</span>,<span class="hljs-number">2</span>,<span class="hljs-number">80</span>,<span class="hljs-number">300</span>,<span class="hljs-number">700</span>);<br><br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(list);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(list);<br><br><br>        <span class="hljs-comment">//设置名字</span><br>        t1.setName(<span class="hljs-string">&quot;抽奖箱1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;抽奖箱2&quot;</span>);<br><br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习七：多线程之间的比较"><a href="#练习七：多线程之间的比较" class="headerlink" title="练习七：多线程之间的比较"></a>练习七：多线程之间的比较</h3><p>需求：</p><p>​在上一题基础上继续完成如下需求：</p><p>​在此次抽奖过程中，抽奖箱1总共产生了6个奖项，分别为：10,20,100,500,2,300</p><pre><code class="hljs">  最高奖项为300元，总计额为932元</code></pre><p>​在此次抽奖过程中，抽奖箱2总共产生了6个奖项，分别为：5,50,200,800,80,700</p><pre><code class="hljs">  最高奖项为800元，总计额为1835元</code></pre><p>​在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为800元</p><p>​以上打印效果只是数据模拟,实际代码运行的效果会有差异</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br><br>    ArrayList&lt;Integer&gt; list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(ArrayList&lt;Integer&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ArrayList&lt;Integer&gt; boxList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//1 //2</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (MyCallable.class) &#123;<br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(Thread.currentThread().getName() + boxList);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//继续抽奖</span><br>                    Collections.shuffle(list);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">prize</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">0</span>);<br>                    boxList.add(prize);<br>                &#125;<br>            &#125;<br>            Thread.sleep(<span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-comment">//把集合中的最大值返回</span><br>        <span class="hljs-keyword">if</span>(boxList.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> Collections.max(boxList);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.itheima.test7;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span><br><span class="hljs-comment">            创建两个抽奖箱(线程)设置线程名称分别为    &quot;抽奖箱1&quot;, &quot;抽奖箱2&quot;</span><br><span class="hljs-comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            在此次抽奖过程中，抽奖箱1总共产生了6个奖项，分别为：10,20,100,500,2,300</span><br><span class="hljs-comment">            最高奖项为300元，总计额为932元</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            在此次抽奖过程中，抽奖箱2总共产生了6个奖项，分别为：5,50,200,800,80,700</span><br><span class="hljs-comment">            最高奖项为800元，总计额为1835元</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为800元</span><br><span class="hljs-comment">            核心逻辑：获取线程抽奖的最大值（看成是线程运行的结果）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            以上打印效果只是数据模拟,实际代码运行的效果会有差异</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//创建奖池</span><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">500</span>,<span class="hljs-number">800</span>,<span class="hljs-number">2</span>,<span class="hljs-number">80</span>,<span class="hljs-number">300</span>,<span class="hljs-number">700</span>);<br><br>        <span class="hljs-comment">//创建多线程要运行的参数对象</span><br>        <span class="hljs-type">MyCallable</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(list);<br><br>        <span class="hljs-comment">//创建多线程运行结果的管理者对象</span><br>        <span class="hljs-comment">//线程一</span><br>        FutureTask&lt;Integer&gt; ft1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(mc);<br>        <span class="hljs-comment">//线程二</span><br>        FutureTask&lt;Integer&gt; ft2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(mc);<br><br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft2);<br><br>        <span class="hljs-comment">//设置名字</span><br>        t1.setName(<span class="hljs-string">&quot;抽奖箱1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;抽奖箱2&quot;</span>);<br><br>        <span class="hljs-comment">//开启线程</span><br>        t1.start();<br>        t2.start();<br><br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">max1</span> <span class="hljs-operator">=</span> ft1.get();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">max2</span> <span class="hljs-operator">=</span> ft2.get();<br><br>        System.out.println(max1);<br>        System.out.println(max2);<br><br>        <span class="hljs-comment">//在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为800元</span><br>        <span class="hljs-keyword">if</span>(max1 == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为&quot;</span>+max2+<span class="hljs-string">&quot;元&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(max2 == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;在此次抽奖过程中,抽奖箱1中产生了最大奖项,该奖项金额为&quot;</span>+max1+<span class="hljs-string">&quot;元&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(max1 &gt; max2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;在此次抽奖过程中,抽奖箱1中产生了最大奖项,该奖项金额为&quot;</span>+max1+<span class="hljs-string">&quot;元&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(max1 &lt; max2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为&quot;</span>+max2+<span class="hljs-string">&quot;元&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;两者的最大奖项是一样的&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-原子性"><a href="#2-原子性" class="headerlink" title="2. 原子性"></a>2. 原子性</h2><h3 id="2-1-volatile-问题"><a href="#2-1-volatile-问题" class="headerlink" title="2.1 volatile-问题"></a>2.1 volatile-问题</h3><p><strong>代码分析 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread1</span>();<br>        t1.setName(<span class="hljs-string">&quot;小路同学&quot;</span>);<br>        t1.start();<br><br>        <span class="hljs-type">MyThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>();<br>        t2.setName(<span class="hljs-string">&quot;小皮同学&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Money</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(Money.money == <span class="hljs-number">100000</span>)&#123;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;结婚基金已经不是十万了&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Money.money = <span class="hljs-number">90000</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>程序问题 :</strong>  女孩虽然知道结婚基金是十万，但是当基金的余额发生变化的时候，女孩无法知道最新的余额。</p><h3 id="2-2-volatile解决"><a href="#2-2-volatile解决" class="headerlink" title="2.2 volatile解决"></a>2.2 volatile解决</h3><p><strong>以上案例出现的问题 :</strong></p><p>​当A线程修改了共享数据时，B线程没有及时获取到最新的值，如果还在使用原先的值，就会出现问题 </p><p>​1，堆内存是唯一的，每一个线程都有自己的线程栈。</p><p>​2 ，每一个线程在使用堆里面变量的时候，都会先拷贝一份到变量的副本中。</p><p>​3 ，在线程中，每一次使用是从变量的副本中获取的。</p><p><strong>Volatile关键字 :</strong> 强制线程每次在使用的时候，都会看一下共享区域最新的值</p><p><strong>代码实现 :</strong> <strong>使用volatile关键字解决</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread1</span>();<br>        t1.setName(<span class="hljs-string">&quot;小路同学&quot;</span>);<br>        t1.start();<br><br>        <span class="hljs-type">MyThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>();<br>        t2.setName(<span class="hljs-string">&quot;小皮同学&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Money</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(Money.money == <span class="hljs-number">100000</span>)&#123;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;结婚基金已经不是十万了&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Money.money = <span class="hljs-number">90000</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-3-synchronized解决"><a href="#2-3-synchronized解决" class="headerlink" title="2.3 synchronized解决"></a>2.3 synchronized解决</h3><p><strong>synchronized解决 :</strong> </p><p>​1 ，线程获得锁</p><p>​2 ，清空变量副本</p><p>​3 ，拷贝共享变量最新的值到变量副本中</p><p>​4 ，执行代码</p><p>​5 ，将修改后变量副本中的值赋值给共享数据</p><p>​6 ，释放锁</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread1</span>();<br>        t1.setName(<span class="hljs-string">&quot;小路同学&quot;</span>);<br>        t1.start();<br><br>        <span class="hljs-type">MyThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>();<br>        t2.setName(<span class="hljs-string">&quot;小皮同学&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Money</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Money.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Money.money != <span class="hljs-number">100000</span>)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;结婚基金已经不是十万了&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.myvolatile2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (Money.lock) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            Money.money = <span class="hljs-number">90000</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-原子性"><a href="#2-4-原子性" class="headerlink" title="2.4 原子性"></a>2.4 原子性</h3><p><strong>概述 :</strong> 所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可以分割的整体。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.threadatom;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyAtomThread</span> <span class="hljs-variable">atom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAtomThread</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//送冰淇淋的数量</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            count++;<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码总结 :</strong> count++ 不是一个原子性操作, 他在执行的过程中,有可能被其他线程打断</p><h3 id="2-5-volatile关键字不能保证原子性"><a href="#2-5-volatile关键字不能保证原子性" class="headerlink" title="2.5 volatile关键字不能保证原子性"></a>2.5 volatile关键字不能保证原子性</h3><p>解决方案 : 我们可以给count++操作添加锁，那么count++操作就是临界区中的代码，临界区中的代码一次只能被一个线程去执行，所以count++就变成了原子操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.threadatom2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyAtomThread</span> <span class="hljs-variable">atom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAtomThread</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//送冰淇淋的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                count++;<br>                System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-原子性-AtomicInteger"><a href="#2-6-原子性-AtomicInteger" class="headerlink" title="2.6 原子性_AtomicInteger"></a>2.6 原子性_AtomicInteger</h3><p>概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。因为变</p><p>量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性(字段)。本次我们只讲解</p><p>使用原子的方式更新基本类型，使用原子的方式更新基本类型Atomic包提供了以下3个类：</p><p>AtomicBoolean： 原子更新布尔类型</p><p>AtomicInteger：   原子更新整型</p><p>AtomicLong：原子更新长整型</p><p>以上3个类提供的方法几乎一模一样，所以本节仅以AtomicInteger为例进行讲解，AtomicInteger的常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicInteger</span><span class="hljs-params">()</span>：       初始化一个默认值为<span class="hljs-number">0</span>的原子型Integer<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> initialValue)</span>：  初始化一个指定值的原子型Integer<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>:    获取值<br><span class="hljs-type">int</span> <span class="hljs-title function_">getAndIncrement</span><span class="hljs-params">()</span>:       以原子方式将当前值加<span class="hljs-number">1</span>，注意，这里返回的是自增前的值。<br><span class="hljs-type">int</span> <span class="hljs-title function_">incrementAndGet</span><span class="hljs-params">()</span>:      以原子方式将当前值加<span class="hljs-number">1</span>，注意，这里返回的是自增后的值。<br><span class="hljs-type">int</span> <span class="hljs-title function_">addAndGet</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>: 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。<br><span class="hljs-type">int</span> <span class="hljs-title function_">getAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>:    以原子方式设置为newValue的值，并返回旧值。<br></code></pre></td></tr></table></figure><p><strong>代码实现 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.threadatom3;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAtomIntergerDemo1</span> &#123;<br><span class="hljs-comment">//    public AtomicInteger()：               初始化一个默认值为0的原子型Integer</span><br><span class="hljs-comment">//    public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>        System.out.println(ac);<br><br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ac2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">10</span>);<br>        System.out.println(ac2);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.threadatom3;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAtomIntergerDemo2</span> &#123;<br><span class="hljs-comment">//    int get():    获取值</span><br><span class="hljs-comment">//    int getAndIncrement():     以原子方式将当前值加1，注意，这里返回的是自增前的值。</span><br><span class="hljs-comment">//    int incrementAndGet():     以原子方式将当前值加1，注意，这里返回的是自增后的值。</span><br><span class="hljs-comment">//    int addAndGet(int data): 以原子方式将参数与对象中的值相加，并返回结果。</span><br><span class="hljs-comment">//    int getAndSet(int value):  以原子方式设置为newValue的值，并返回旧值。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        AtomicInteger ac1 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        System.out.println(ac1.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac2 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int andIncrement = ac2.getAndIncrement();</span><br><span class="hljs-comment">//        System.out.println(andIncrement);</span><br><span class="hljs-comment">//        System.out.println(ac2.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac3 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac3.incrementAndGet();</span><br><span class="hljs-comment">//        System.out.println(i);//自增后的值</span><br><span class="hljs-comment">//        System.out.println(ac3.get());</span><br><br><span class="hljs-comment">//        AtomicInteger ac4 = new AtomicInteger(10);</span><br><span class="hljs-comment">//        int i = ac4.addAndGet(20);</span><br><span class="hljs-comment">//        System.out.println(i);</span><br><span class="hljs-comment">//        System.out.println(ac4.get());</span><br><br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ac5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">andSet</span> <span class="hljs-operator">=</span> ac5.getAndSet(<span class="hljs-number">20</span>);<br>        System.out.println(andSet);<br>        System.out.println(ac5.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-AtomicInteger-内存解析"><a href="#2-7-AtomicInteger-内存解析" class="headerlink" title="2.7 AtomicInteger-内存解析"></a>2.7 AtomicInteger-内存解析</h3><p><strong>AtomicInteger原理 :</strong> 自旋锁  + CAS 算法</p><p><strong>CAS算法：</strong></p><p>​有3个操作数（内存值V， 旧的预期值A，要修改的值B）</p><p>​当旧的预期值A &#x3D;&#x3D; 内存值   此时修改成功，将V改为B                 </p><p>​当旧的预期值A！&#x3D;内存值   此时修改失败，不做任何操作                 </p><p>​并重新获取现在的最新值（这个重新获取的动作就是自旋）</p><h3 id="2-8-AtomicInteger-源码解析"><a href="#2-8-AtomicInteger-源码解析" class="headerlink" title="2.8 AtomicInteger-源码解析"></a>2.8 AtomicInteger-源码解析</h3><p><strong>代码实现 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.threadatom4;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyAtomThread</span> <span class="hljs-variable">atom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAtomThread</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(atom).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.threadatom4;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAtomThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">//private volatile int count = 0; //送冰淇淋的数量</span><br>    <span class="hljs-comment">//private Object lock = new Object();</span><br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//1,从共享数据中读取数据到本线程栈中.</span><br>            <span class="hljs-comment">//2,修改本线程栈中变量副本的值</span><br>            <span class="hljs-comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span><br>            <span class="hljs-comment">//synchronized (lock) &#123;</span><br><span class="hljs-comment">//                count++;</span><br><span class="hljs-comment">//                ac++;</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> ac.incrementAndGet();<br>            System.out.println(<span class="hljs-string">&quot;已经送了&quot;</span> + count + <span class="hljs-string">&quot;个冰淇淋&quot;</span>);<br>           <span class="hljs-comment">// &#125;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>源码解析 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//先自增，然后获取自增后的结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">incrementAndGet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//+ 1 自增后的结果</span><br>        <span class="hljs-comment">//this 就表示当前的atomicInteger（值）</span><br>        <span class="hljs-comment">//1    自增一次</span><br>        <span class="hljs-keyword">return</span> U.getAndAddInt(<span class="hljs-built_in">this</span>, VALUE, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object o, <span class="hljs-type">long</span> offset, <span class="hljs-type">int</span> delta)</span> &#123;<br>        <span class="hljs-comment">//v 旧值</span><br>        <span class="hljs-type">int</span> v;<br>        <span class="hljs-comment">//自旋的过程</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">//不断的获取旧值</span><br>            v = getIntVolatile(o, offset);<br>            <span class="hljs-comment">//如果这个方法的返回值为false，那么继续自旋</span><br>            <span class="hljs-comment">//如果这个方法的返回值为true，那么自旋结束</span><br>            <span class="hljs-comment">//o 表示的就是内存值</span><br>            <span class="hljs-comment">//v 旧值</span><br>            <span class="hljs-comment">//v + delta 修改后的值</span><br>        &#125; <span class="hljs-keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));<br>            <span class="hljs-comment">//作用：比较内存中的值，旧值是否相等，如果相等就把修改后的值写到内存中，返回true。表示修改成功。</span><br>            <span class="hljs-comment">//                                 如果不相等，无法把修改后的值写到内存中，返回false。表示修改失败。</span><br>            <span class="hljs-comment">//如果修改失败，那么继续自旋。</span><br>        <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-悲观锁和乐观锁"><a href="#2-9-悲观锁和乐观锁" class="headerlink" title="2.9 悲观锁和乐观锁"></a>2.9 悲观锁和乐观锁</h3><p><strong>synchronized和CAS的区别 :</strong> </p><p><strong>相同点：</strong>在多线程情况下，都可以保证共享数据的安全性。</p><p><strong>不同点：</strong>synchronized总是从最坏的角度出发，认为每次获取数据的时候，别人都有可能修改。所以在每                       次操作共享数据之前，都会上锁。（悲观锁）</p><p>​cas是从乐观的角度出发，假设每次获取数据别人都不会修改，所以不会上锁。只不过在修改共享数据的时候，会检查一下，别人有没有修改过这个数据。</p><p>​如果别人修改过，那么我再次获取现在最新的值。            </p><p>​ 如果别人没有修改过，那么我现在直接修改共享数据的值.(乐观锁）</p><h2 id="3-并发工具类"><a href="#3-并发工具类" class="headerlink" title="3. 并发工具类"></a>3. 并发工具类</h2><h3 id="3-1-并发工具类-Hashtable"><a href="#3-1-并发工具类-Hashtable" class="headerlink" title="3.1 并发工具类-Hashtable"></a>3.1 并发工具类-Hashtable</h3><p>​<strong>Hashtable出现的原因 :</strong> 在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mymap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashtableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Hashtable&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-并发工具类-ConcurrentHashMap基本使用"><a href="#3-2-并发工具类-ConcurrentHashMap基本使用" class="headerlink" title="3.2 并发工具类-ConcurrentHashMap基本使用"></a>3.2 并发工具类-ConcurrentHashMap基本使用</h3><p>​<strong>ConcurrentHashMap出现的原因 :</strong> 在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p><p>基于以上两个原因我们可以使用JDK1.5以后所提供的ConcurrentHashMap。</p><p><strong>体系结构 :</strong> </p><p><img src="/medias/32%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B02/1591168965857.png" alt="1591168965857"></p><p><strong>总结 :</strong> </p><p>​1 ，HashMap是线程不安全的。多线程环境下会有数据安全问题</p><p>​2 ，Hashtable是线程安全的，但是会将整张表锁起来，效率低下</p><p>​3，ConcurrentHashMap也是线程安全的，效率较高。     在JDK7和JDK8中，底层原理不一样。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mymap;<br><br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConcurrentHashMapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        ConcurrentHashMap&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">25</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>                hm.put(i + <span class="hljs-string">&quot;&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        t1.start();<br>        t2.start();<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">//为了t1和t2能把数据全部添加完毕</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//0-0 1-1 ..... 50- 50</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(hm.get(i + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<span class="hljs-comment">//0 1 2 3 .... 50</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-并发工具类-ConcurrentHashMap1-7原理"><a href="#3-3-并发工具类-ConcurrentHashMap1-7原理" class="headerlink" title="3.3 并发工具类-ConcurrentHashMap1.7原理"></a>3.3 并发工具类-ConcurrentHashMap1.7原理</h3><p><img src="/medias/32%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B02/1591169254280.png" alt="1591169254280"></p><h3 id="3-4-并发工具类-ConcurrentHashMap1-8原理"><a href="#3-4-并发工具类-ConcurrentHashMap1-8原理" class="headerlink" title="3.4 并发工具类-ConcurrentHashMap1.8原理"></a>3.4 并发工具类-ConcurrentHashMap1.8原理</h3><p><img src="/medias/32%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B02/1591169338256.png" alt="1591169338256"></p><p><strong>总结 :</strong> </p><p>​1，如果使用空参构造创建ConcurrentHashMap对象，则什么事情都不做。     在第一次添加元素的时候创建哈希表</p><p>​2，计算当前元素应存入的索引。</p><p>​3，如果该索引位置为null，则利用cas算法，将本结点添加到数组中。</p><p>​4，如果该索引位置不为null，则利用volatile关键字获得当前位置最新的结点地址，挂在他下面，变成链表。</p><p>​5，当链表的长度大于等于8时，自动转换成红黑树6，以链表或者红黑树头结点为锁对象，配合悲观锁保证多线程操作集合时数据的安全性</p><h3 id="3-5-并发工具类-CountDownLatch"><a href="#3-5-并发工具类-CountDownLatch" class="headerlink" title="3.5 并发工具类-CountDownLatch"></a>3.5 并发工具类-CountDownLatch</h3><p><strong>CountDownLatch类 :</strong> </p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>public CountDownLatch(int count)</td><td>参数传递线程数，表示等待线程数量</td></tr><tr><td>public void await()</td><td>让线程等待</td></tr><tr><td>public void countDown()</td><td>当前线程执行完毕</td></tr></tbody></table><p><strong>使用场景：</strong> 让某一条线程等待其他线程执行完毕之后再执行</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mycountdownlatch;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChileThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChileThread1</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> &#123;<br>        <span class="hljs-built_in">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mycountdownlatch;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChileThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChileThread2</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> &#123;<br>        <span class="hljs-built_in">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mycountdownlatch;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChileThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChileThread3</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> &#123;<br>        <span class="hljs-built_in">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.吃饺子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个饺子&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.吃完说一声</span><br>        <span class="hljs-comment">//每一次countDown方法的时候，就让计数器-1</span><br>        countDownLatch.countDown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mycountdownlatch;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MotherThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> CountDownLatch countDownLatch;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MotherThread</span><span class="hljs-params">(CountDownLatch countDownLatch)</span> &#123;<br>        <span class="hljs-built_in">this</span>.countDownLatch = countDownLatch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.等待</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//当计数器变成0的时候，会自动唤醒这里等待的线程。</span><br>            countDownLatch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//2.收拾碗筷</span><br>        System.out.println(<span class="hljs-string">&quot;妈妈在收拾碗筷&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mycountdownlatch;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCountDownLatchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.创建CountDownLatch的对象，需要传递给四个线程。</span><br>        <span class="hljs-comment">//在底层就定义了一个计数器，此时计数器的值就是3</span><br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//2.创建四个线程对象并开启他们。</span><br>        <span class="hljs-type">MotherThread</span> <span class="hljs-variable">motherThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MotherThread</span>(countDownLatch);<br>        motherThread.start();<br><br>        <span class="hljs-type">ChileThread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChileThread1</span>(countDownLatch);<br>        t1.setName(<span class="hljs-string">&quot;小明&quot;</span>);<br><br>        <span class="hljs-type">ChileThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChileThread2</span>(countDownLatch);<br>        t2.setName(<span class="hljs-string">&quot;小红&quot;</span>);<br><br>        <span class="hljs-type">ChileThread3</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChileThread3</span>(countDownLatch);<br>        t3.setName(<span class="hljs-string">&quot;小刚&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结 :</strong> </p><p>​1. CountDownLatch(int count)：参数写等待线程的数量。并定义了一个计数器。</p><p>​2. await()：让线程等待，当计数器为0时，会唤醒等待的线程</p><p>​3. countDown()： 线程执行完毕时调用，会将计数器-1。</p><h3 id="3-6-并发工具类-Semaphore"><a href="#3-6-并发工具类-Semaphore" class="headerlink" title="3.6 并发工具类-Semaphore"></a>3.6 并发工具类-Semaphore</h3><p><strong>使用场景 :</strong> </p><p>​可以控制访问特定资源的线程数量。</p><p><strong>实现步骤 :</strong> </p><p>​1，需要有人管理这个通道</p><p>​2，当有车进来了，发通行许可证</p><p>​3，当车出去了，收回通行许可证</p><p>​4，如果通行许可证发完了，那么其他车辆只能等着</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mysemaphore;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">//1.获得管理员对象，</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//2.获得通行证</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            semaphore.acquire();<br>            <span class="hljs-comment">//3.开始行驶</span><br>            System.out.println(<span class="hljs-string">&quot;获得了通行证开始行驶&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            System.out.println(<span class="hljs-string">&quot;归还通行证&quot;</span>);<br>            <span class="hljs-comment">//4.归还通行证</span><br>            semaphore.release();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mysemaphore;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySemaphoreDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-线程池&quot;&gt;&lt;a href=&quot;#1-线程池&quot; class=&quot;headerlink&quot; title=&quot;1. 线程池&quot;&gt;&lt;/a&gt;1. 线程池&lt;/h2&gt;&lt;h3 id=&quot;1-1-线程状态介绍&quot;&gt;&lt;a href=&quot;#1-1-线程状态介绍&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>多线程01</title>
    <link href="https://iexlee.github.io/31%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B01.html"/>
    <id>https://iexlee.github.io/31%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B01.html</id>
    <published>2022-06-16T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-实现多线程"><a href="#1-实现多线程" class="headerlink" title="1.实现多线程"></a>1.实现多线程</h2><h3 id="1-1简单了解多线程【理解】"><a href="#1-1简单了解多线程【理解】" class="headerlink" title="1.1简单了解多线程【理解】"></a>1.1简单了解多线程【理解】</h3><p>是指从软件或者硬件上实现多个线程并发执行的技术。<br>具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能。</p><p><img src="/medias/31%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B01/01_%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt="01_简单了解多线程"></p><h3 id="1-2并发和并行【理解】"><a href="#1-2并发和并行【理解】" class="headerlink" title="1.2并发和并行【理解】"></a>1.2并发和并行【理解】</h3><ul><li><p>并行：在同一时刻，有多个指令在多个CPU上同时执行。</p><p><img src="/medias/31%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B01/02_%E5%B9%B6%E8%A1%8C.png" alt="02_并行"></p></li><li><p>并发：在同一时刻，有多个指令在单个CPU上交替执行。</p><p><img src="/medias/31%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B01/03_%E5%B9%B6%E5%8F%91.png" alt="03_并发"></p></li></ul><h3 id="1-3进程和线程【理解】"><a href="#1-3进程和线程【理解】" class="headerlink" title="1.3进程和线程【理解】"></a>1.3进程和线程【理解】</h3><ul><li><p>进程：是正在运行的程序</p><p>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位<br>动态性：进程的实质是程序的一次执行过程，进程是动态产生，动态消亡的<br>并发性：任何进程都可以同其他进程一起并发执行</p></li><li><p>线程：是进程中的单个顺序控制流，是一条执行路径</p><p>​单线程：一个进程如果只有一条执行路径，则称为单线程程序</p><p>​多线程：一个进程如果有多条执行路径，则称为多线程程序</p><p>​<img src="/medias/31%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B01/04_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A4%BA%E4%BE%8B.png" alt="04_多线程示例"></p></li></ul><h3 id="1-4实现多线程方式一：继承Thread类【应用】"><a href="#1-4实现多线程方式一：继承Thread类【应用】" class="headerlink" title="1.4实现多线程方式一：继承Thread类【应用】"></a>1.4实现多线程方式一：继承Thread类【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void run()</td><td>在线程开启后，此方法将被调用执行</td></tr><tr><td>void start()</td><td>使此线程开始执行，Java虚拟机会调用run方法()</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyThread继承Thread类</li><li>在MyThread类中重写run()方法</li><li>创建MyThread类的对象</li><li>启动线程</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">my1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">my2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br><span class="hljs-comment">//        my1.run();</span><br><span class="hljs-comment">//        my2.run();</span><br><br>        <span class="hljs-comment">//void start() 导致此线程开始执行; Java虚拟机调用此线程的run方法</span><br>        my1.start();<br>        my2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>两个小问题</p><ul><li><p>为什么要重写run()方法？</p><p>因为run()是用来封装被线程执行的代码</p></li><li><p>run()方法和start()方法的区别？</p><p>run()：封装线程执行的代码，直接调用，相当于普通方法的调用</p><p>start()：启动线程；然后由JVM调用此线程的run()方法</p></li></ul></li></ul><h3 id="1-5实现多线程方式二：实现Runnable接口【应用】"><a href="#1-5实现多线程方式二：实现Runnable接口【应用】" class="headerlink" title="1.5实现多线程方式二：实现Runnable接口【应用】"></a>1.5实现多线程方式二：实现Runnable接口【应用】</h3><ul><li><p>Thread构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Thread(Runnable target)</td><td>分配一个新的Thread对象</td></tr><tr><td>Thread(Runnable target, String name)</td><td>分配一个新的Thread对象</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyRunnable实现Runnable接口</li><li>在MyRunnable类中重写run()方法</li><li>创建MyRunnable类的对象</li><li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li><li>启动线程</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;:&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建MyRunnable类的对象</span><br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">my</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">//创建Thread类的对象，把MyRunnable对象作为构造方法的参数</span><br>        <span class="hljs-comment">//Thread(Runnable target)</span><br><span class="hljs-comment">//        Thread t1 = new Thread(my);</span><br><span class="hljs-comment">//        Thread t2 = new Thread(my);</span><br>        <span class="hljs-comment">//Thread(Runnable target, String name)</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(my,<span class="hljs-string">&quot;坦克&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(my,<span class="hljs-string">&quot;飞机&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-6实现多线程方式三-实现Callable接口【应用】"><a href="#1-6实现多线程方式三-实现Callable接口【应用】" class="headerlink" title="1.6实现多线程方式三: 实现Callable接口【应用】"></a>1.6实现多线程方式三: 实现Callable接口【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V call()</td><td>计算结果，如果无法计算结果，则抛出一个异常</td></tr><tr><td>FutureTask(Callable<V> callable)</td><td>创建一个 FutureTask，一旦运行就执行给定的 Callable</td></tr><tr><td>V get()</td><td>如有必要，等待计算完成，然后获取其结果</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyCallable实现Callable接口</li><li>在MyCallable类中重写call()方法</li><li>创建MyCallable类的对象</li><li>创建Future的实现类FutureTask对象，把MyCallable对象作为构造方法的参数</li><li>创建Thread类的对象，把FutureTask对象作为构造方法的参数</li><li>启动线程</li><li>再调用get方法，就可以获取线程结束之后的结果。</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;跟女孩表白&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-comment">//返回值就表示线程运行完毕之后的结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;答应&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//线程开启之后需要执行里面的call方法</span><br>        <span class="hljs-type">MyCallable</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>();<br><br>        <span class="hljs-comment">//Thread t1 = new Thread(mc);</span><br><br>        <span class="hljs-comment">//可以获取线程执行完毕之后的结果.也可以作为参数传递给Thread对象</span><br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(mc);<br><br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ft.get();<br>        <span class="hljs-comment">//开启线程</span><br>        t1.start();<br><br>        <span class="hljs-comment">//String s = ft.get();</span><br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>三种实现方式的对比</p><ul><li>实现Runnable、Callable接口<ul><li>好处: 扩展性强，实现该接口的同时还可以继承其他的类</li><li>缺点: 编程相对复杂，不能直接使用Thread类中的方法</li></ul></li><li>继承Thread类<ul><li>好处: 编程比较简单，可以直接使用Thread类中的方法</li><li>缺点: 可以扩展性较差，不能再继承其他的类</li></ul></li></ul></li></ul><h3 id="1-7设置和获取线程名称【应用】"><a href="#1-7设置和获取线程名称【应用】" class="headerlink" title="1.7设置和获取线程名称【应用】"></a>1.7设置和获取线程名称【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void  setName(String name)</td><td>将此线程的名称更改为等于参数name</td></tr><tr><td>String  getName()</td><td>返回此线程的名称</td></tr><tr><td>Thread  currentThread()</td><td>返回对当前正在执行的线程对象的引用</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(getName()+<span class="hljs-string">&quot;:&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">my1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">my2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>        <span class="hljs-comment">//void setName(String name)：将此线程的名称更改为等于参数 name</span><br>        my1.setName(<span class="hljs-string">&quot;高铁&quot;</span>);<br>        my2.setName(<span class="hljs-string">&quot;飞机&quot;</span>);<br><br>        <span class="hljs-comment">//Thread(String name)</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">my1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;高铁&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">my2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;飞机&quot;</span>);<br><br>        my1.start();<br>        my2.start();<br><br>        <span class="hljs-comment">//static Thread currentThread() 返回对当前正在执行的线程对象的引用</span><br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-8线程休眠【应用】"><a href="#1-8线程休眠【应用】" class="headerlink" title="1.8线程休眠【应用】"></a>1.8线程休眠【应用】</h3><ul><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static void sleep(long millis)</td><td>使当前正在执行的线程停留（暂停执行）指定的毫秒数</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">/*System.out.println(&quot;睡觉前&quot;);</span><br><span class="hljs-comment">        Thread.sleep(3000);</span><br><span class="hljs-comment">        System.out.println(&quot;睡醒了&quot;);*/</span><br><br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-9线程优先级【应用】"><a href="#1-9线程优先级【应用】" class="headerlink" title="1.9线程优先级【应用】"></a>1.9线程优先级【应用】</h3><ul><li><p>线程调度</p><ul><li><p>两种调度方式</p><ul><li>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些</li></ul></li><li><p>Java使用的是抢占式调度模型</p></li><li><p>随机性</p><p>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一定的</p><p><img src="/medias/31%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B01/05_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="05_多线程示例图"></p></li></ul></li><li><p>优先级相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>final int getPriority()</td><td>返回此线程的优先级</td></tr><tr><td>final void setPriority(int newPriority)</td><td>更改此线程的优先级线程默认优先级是5；线程优先级的范围是：1-10</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程执行完毕了&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//优先级: 1 - 10 默认值:5</span><br>        <span class="hljs-type">MyCallable</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>();<br><br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(mc);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft);<br>        t1.setName(<span class="hljs-string">&quot;飞机&quot;</span>);<br>        t1.setPriority(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//System.out.println(t1.getPriority());//5</span><br>        t1.start();<br><br>        <span class="hljs-type">MyCallable</span> <span class="hljs-variable">mc2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>();<br><br>        FutureTask&lt;String&gt; ft2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(mc2);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft2);<br>        t2.setName(<span class="hljs-string">&quot;坦克&quot;</span>);<br>        t2.setPriority(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//System.out.println(t2.getPriority());//5</span><br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-10守护线程【应用】"><a href="#1-10守护线程【应用】" class="headerlink" title="1.10守护线程【应用】"></a>1.10守护线程【应用】</h3><ul><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void setDaemon(boolean on)</td><td>将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread1</span>();<br>        <span class="hljs-type">MyThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>();<br><br>        t1.setName(<span class="hljs-string">&quot;女神&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;备胎&quot;</span>);<br><br>        <span class="hljs-comment">//把第二个线程设置为守护线程</span><br>        <span class="hljs-comment">//当普通线程执行完之后,那么守护线程也没有继续运行下去的必要了.</span><br>        t2.setDaemon(<span class="hljs-literal">true</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2.线程同步"></a>2.线程同步</h2><h3 id="2-1卖票【应用】"><a href="#2-1卖票【应用】" class="headerlink" title="2.1卖票【应用】"></a>2.1卖票【应用】</h3><ul><li><p>案例需求</p><p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p></li><li><p>实现步骤</p><ul><li><p>定义一个类SellTicket实现Runnable接口，里面定义一个成员变量：private int tickets &#x3D; 100;</p></li><li><p>在SellTicket类中重写run()方法实现卖票，代码步骤如下</p></li><li><p>判断票数大于0，就卖票，并告知是哪个窗口卖的</p></li><li><p>卖了票之后，总票数要减1</p></li><li><p>票卖没了，线程停止</p></li><li><p>定义一个测试类SellTicketDemo，里面有main方法，代码步骤如下</p></li><li><p>创建SellTicket类的对象</p></li><li><p>创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</p></li><li><p>启动线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//在SellTicket类中重写run()方法实现卖票，代码步骤如下</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span>(ticket &lt;= <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//卖完了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    ticket--;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicketDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建SellTicket类的对象</span><br>        <span class="hljs-type">SellTicket</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket</span>();<br><br>        <span class="hljs-comment">//创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st,<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st,<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st,<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2卖票案例的问题【理解】"><a href="#2-2卖票案例的问题【理解】" class="headerlink" title="2.2卖票案例的问题【理解】"></a>2.2卖票案例的问题【理解】</h3><ul><li><p>卖票出现了问题</p><ul><li><p>相同的票出现了多次</p></li><li><p>出现了负数的票</p></li></ul></li><li><p>问题产生原因</p><p>线程执行的随机性导致的,可能在卖票过程中丢失cpu的执行权,导致出现问题</p></li></ul><h3 id="2-3同步代码块解决数据安全问题【应用】"><a href="#2-3同步代码块解决数据安全问题【应用】" class="headerlink" title="2.3同步代码块解决数据安全问题【应用】"></a>2.3同步代码块解决数据安全问题【应用】</h3><ul><li><p>安全问题出现的条件</p><ul><li><p>是多线程环境</p></li><li><p>有共享数据</p></li><li><p>有多条语句操作共享数据</p></li></ul></li><li><p>如何解决多线程安全问题呢?</p><ul><li>基本思想：让程序没有安全问题的环境</li></ul></li><li><p>怎么实现呢?</p><ul><li><p>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</p></li><li><p>Java提供了同步代码块的方式来解决</p></li></ul></li><li><p>同步代码块格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(任意对象) &#123; <br>多条语句操作共享数据的代码 <br>&#125;<br></code></pre></td></tr></table></figure><p>synchronized(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁</p></li><li><p>同步的好处和弊端  </p><ul><li><p>好处：解决了多线程的数据安全问题</p></li><li><p>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</p></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (obj) &#123; <span class="hljs-comment">// 对可能有安全问题的代码加锁,多个线程必须使用同一把锁</span><br>                <span class="hljs-comment">//t1进来后，就会把这段代码给锁起来</span><br>                <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                        <span class="hljs-comment">//t1休息100毫秒</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    <span class="hljs-comment">//窗口1正在出售第100张票</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在出售第&quot;</span> + tickets + <span class="hljs-string">&quot;张票&quot;</span>);<br>                    tickets--; <span class="hljs-comment">//tickets = 99;</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//t1出来了，这段代码的锁就被释放了</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicketDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SellTicket</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;窗口1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;窗口2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-4同步方法解决数据安全问题【应用】"><a href="#2-4同步方法解决数据安全问题【应用】" class="headerlink" title="2.4同步方法解决数据安全问题【应用】"></a>2.4同步方法解决数据安全问题【应用】</h3><ul><li><p>同步方法的格式</p><p>同步方法：就是把synchronized关键字加到方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 <span class="hljs-keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; <br>方法体；<br>&#125;<br></code></pre></td></tr></table></figure><p>同步方法的锁对象是什么呢?</p><p>​this</p></li><li><p>静态同步方法</p><p>同步静态方法：就是把synchronized关键字加到静态方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; <br>方法体；<br>&#125;<br></code></pre></td></tr></table></figure><p>同步静态方法的锁对象是什么呢?</p><p>​类名.class</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;窗口一&quot;</span>.equals(Thread.currentThread().getName()))&#123;<br>                <span class="hljs-comment">//同步方法</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> synchronizedMthod();<br>                <span class="hljs-keyword">if</span>(result)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;窗口二&quot;</span>.equals(Thread.currentThread().getName()))&#123;<br>                <span class="hljs-comment">//同步代码块</span><br>                <span class="hljs-keyword">synchronized</span> (MyRunnable.class)&#123;<br>                    <span class="hljs-keyword">if</span>(ticketCount == <span class="hljs-number">0</span>)&#123;<br>                       <span class="hljs-keyword">break</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">10</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        ticketCount--;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">synchronizedMthod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(ticketCount == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            ticketCount--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="hljs-string">&quot;张票&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>public class Demo {<br>public static void main(String[] args) {<br>    MyRunnable mr &#x3D; new MyRunnable();<br><br>    Thread t1 &#x3D; new Thread(mr);<br>    Thread t2 &#x3D; new Thread(mr);<br><br>    t1.setName(“窗口一”);<br>    t2.setName(“窗口二”);<br><br>    t1.start();<br>    t2.start();<br>}<br>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><br><span class="hljs-meta">### 2.5Lock锁【应用】</span><br><br>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock<br><br>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化<br><br>- ReentrantLock构造方法<br><br>  | 方法名             | 说明                   |<br>  | --------------- | -------------------- |<br>  | ReentrantLock() | 创建一个ReentrantLock的实例 |<br><br>- 加锁解锁方法<br><br>  | 方法名           | 说明   |<br>  | ------------- | ---- |<br>  | <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock</span>()   | 获得锁  |</span><br><span class="hljs-function">  | <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span>() | 释放锁  |</span><br><span class="hljs-function"></span><br><span class="hljs-function">- 代码演示</span><br><span class="hljs-function"></span><br><span class="hljs-function">  ```java</span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Ticket implements Runnable</span> &#123;<br>      <span class="hljs-comment">//票的数量</span><br>      <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> ticket = <span class="hljs-number">100</span>;<br>      <span class="hljs-keyword">private</span> Object obj = <span class="hljs-keyword">new</span> Object();<br>      <span class="hljs-keyword">private</span> ReentrantLock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>      @Override<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>          <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>              <span class="hljs-comment">//synchronized (obj)&#123;//多个线程必须使用同一把锁.</span><br>              <span class="hljs-keyword">try</span> &#123;<br>                  <span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>();<br>                  <span class="hljs-keyword">if</span> (ticket &lt;= <span class="hljs-number">0</span>) &#123;<br>                      <span class="hljs-comment">//卖完了</span><br>                      <span class="hljs-keyword">break</span>;<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                      Thread.sleep(<span class="hljs-number">100</span>);<br>                      ticket--;<br>                      System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张票&quot;</span>);<br>                  &#125;<br>              &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                  e.printStackTrace();<br>              &#125; <span class="hljs-keyword">finally</span> &#123;<br>                  <span class="hljs-keyword">lock</span>.unlock();<br>              &#125;<br>              <span class="hljs-comment">// &#125;</span><br>          &#125;<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> &#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>          Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br><br>          Thread t1 = <span class="hljs-keyword">new</span> Thread(ticket);<br>          Thread t2 = <span class="hljs-keyword">new</span> Thread(ticket);<br>          Thread t3 = <span class="hljs-keyword">new</span> Thread(ticket);<br><br>          t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>          t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br>          t3.setName(<span class="hljs-string">&quot;窗口三&quot;</span>);<br><br>          t1.start();<br>          t2.start();<br>          t3.start();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-6死锁【理解】"><a href="#2-6死锁【理解】" class="headerlink" title="2.6死锁【理解】"></a>2.6死锁【理解】</h3><ul><li><p>概述</p><p>线程死锁是指由于两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法前往执行</p></li><li><p>什么情况下会产生死锁</p><ol><li>资源有限</li><li>同步嵌套</li></ol></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (objA)&#123;<br>                    <span class="hljs-comment">//线程一</span><br>                    <span class="hljs-keyword">synchronized</span> (objB)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;小康同学正在走路&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (objB)&#123;<br>                    <span class="hljs-comment">//线程二</span><br>                    <span class="hljs-keyword">synchronized</span> (objA)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;小薇同学正在走路&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-生产者消费者"><a href="#3-生产者消费者" class="headerlink" title="3.生产者消费者"></a>3.生产者消费者</h2><h3 id="3-1生产者和消费者模式概述【应用】"><a href="#3-1生产者和消费者模式概述【应用】" class="headerlink" title="3.1生产者和消费者模式概述【应用】"></a>3.1生产者和消费者模式概述【应用】</h3><ul><li><p>概述</p><p>生产者消费者模式是一个十分经典的多线程协作的模式，弄懂生产者消费者问题能够让我们对多线程编程的理解更加深刻。</p><p>所谓生产者消费者问题，实际上主要是包含了两类线程：</p><p>​一类是生产者线程用于生产数据</p><p>​一类是消费者线程用于消费数据</p><p>为了解耦生产者和消费者的关系，通常会采用共享的数据区域，就像是一个仓库</p><p>生产者生产数据之后直接放置在共享数据区中，并不需要关心消费者的行为</p><p>消费者只需要从共享数据区中去获取数据，并不需要关心生产者的行为</p></li><li><p>Object类的等待和唤醒方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>导致当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法</td></tr><tr><td>void notify()</td><td>唤醒正在等待对象监视器的单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒正在等待对象监视器的所有线程</td></tr></tbody></table></li></ul><h3 id="3-2生产者和消费者案例【应用】"><a href="#3-2生产者和消费者案例【应用】" class="headerlink" title="3.2生产者和消费者案例【应用】"></a>3.2生产者和消费者案例【应用】</h3><ul><li><p>案例需求</p><ul><li><p>桌子类(Desk)：定义表示包子数量的变量,定义锁对象变量,定义标记桌子上有无包子的变量</p></li><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>  1.判断是否有包子,决定当前线程是否执行</p><p>  2.如果有包子,就进入等待状态,如果没有包子,继续执行,生产包子</p><p>  3.生产包子之后,更新桌子上包子状态,唤醒消费者消费包子</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>  1.判断是否有包子,决定当前线程是否执行</p><p>  2.如果没有包子,就进入等待状态,如果有包子,就消费包子</p><p>  3.消费包子后,更新桌子上包子状态,唤醒生产者生产包子</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>  创建生产者线程和消费者线程对象</p><p>  分别开启两个线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Desk</span> &#123;<br><br>    <span class="hljs-comment">//定义一个标记</span><br>    <span class="hljs-comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span><br>    <span class="hljs-comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">//汉堡包的总数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//锁对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(!Desk.flag)&#123;<br>                        <span class="hljs-comment">//生产</span><br>                        System.out.println(<span class="hljs-string">&quot;厨师正在生产汉堡包&quot;</span>);<br>                        Desk.flag = <span class="hljs-literal">true</span>;<br>                        Desk.lock.notifyAll();<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>            <span class="hljs-comment">//1. while(true)死循环</span><br>            <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>            <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>            <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(Desk.flag)&#123;<br>                        <span class="hljs-comment">//有</span><br>                        System.out.println(<span class="hljs-string">&quot;吃货在吃汉堡包&quot;</span>);<br>                        Desk.flag = <span class="hljs-literal">false</span>;<br>                        Desk.lock.notifyAll();<br>                        Desk.count--;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//没有就等待</span><br>                        <span class="hljs-comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*消费者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">        2，如果没有就等待。</span><br><span class="hljs-comment">        3，如果有就开吃</span><br><span class="hljs-comment">        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">        汉堡包的总数量减一*/</span><br><br>        <span class="hljs-comment">/*生产者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">        如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">        2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">        3，叫醒等待的消费者开吃。*/</span><br><br>        <span class="hljs-type">Foodie</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foodie</span>();<br>        <span class="hljs-type">Cooker</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cooker</span>();<br><br>        f.start();<br>        c.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-3生产者和消费者案例优化【应用】"><a href="#3-3生产者和消费者案例优化【应用】" class="headerlink" title="3.3生产者和消费者案例优化【应用】"></a>3.3生产者和消费者案例优化【应用】</h3><ul><li><p>需求</p><ul><li>将Desk类中的变量,采用面向对象的方式封装起来</li><li>生产者和消费者类中构造方法接收Desk类对象,之后在run方法中进行使用</li><li>创建生产者和消费者线程对象,构造方法中传入Desk类对象</li><li>开启两个线程</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Desk</span> &#123;<br><br>    <span class="hljs-comment">//定义一个标记</span><br>    <span class="hljs-comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span><br>    <span class="hljs-comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span><br>    <span class="hljs-comment">//public static boolean flag = false;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag;<br><br>    <span class="hljs-comment">//汉堡包的总数量</span><br>    <span class="hljs-comment">//public static int count = 10;</span><br>    <span class="hljs-comment">//以后我们在使用这种必须有默认值的变量</span><br>   <span class="hljs-comment">// private int count = 10;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-comment">//锁对象</span><br>    <span class="hljs-comment">//public static final Object lock = new Object();</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Desk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">// 在空参内部调用带参,对成员变量进行赋值,之后就可以直接使用成员变量了</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Desk</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag, <span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.flag = flag;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFlag</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFlag</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag)</span> &#123;<br>        <span class="hljs-built_in">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lock;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Desk&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;flag=&quot;</span> + flag +<br>                <span class="hljs-string">&quot;, count=&quot;</span> + count +<br>                <span class="hljs-string">&quot;, lock=&quot;</span> + lock +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Desk desk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cooker</span><span class="hljs-params">(Desk desk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desk = desk;<br>    &#125;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (desk.getLock())&#123;<br>                <span class="hljs-keyword">if</span>(desk.getCount() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span><br>                    <span class="hljs-keyword">if</span>(!desk.isFlag())&#123;<br>                        <span class="hljs-comment">//生产</span><br>                        System.out.println(<span class="hljs-string">&quot;厨师正在生产汉堡包&quot;</span>);<br>                        desk.setFlag(<span class="hljs-literal">true</span>);<br>                        desk.getLock().notifyAll();<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            desk.getLock().wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Desk desk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Foodie</span><span class="hljs-params">(Desk desk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desk = desk;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>            <span class="hljs-comment">//1. while(true)死循环</span><br>            <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>            <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>            <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (desk.getLock())&#123;<br>                <span class="hljs-keyword">if</span>(desk.getCount() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span><br>                    <span class="hljs-keyword">if</span>(desk.isFlag())&#123;<br>                        <span class="hljs-comment">//有</span><br>                        System.out.println(<span class="hljs-string">&quot;吃货在吃汉堡包&quot;</span>);<br>                        desk.setFlag(<span class="hljs-literal">false</span>);<br>                        desk.getLock().notifyAll();<br>                        desk.setCount(desk.getCount() - <span class="hljs-number">1</span>);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//没有就等待</span><br>                        <span class="hljs-comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            desk.getLock().wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*消费者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">        2，如果没有就等待。</span><br><span class="hljs-comment">        3，如果有就开吃</span><br><span class="hljs-comment">        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">        汉堡包的总数量减一*/</span><br><br>        <span class="hljs-comment">/*生产者步骤：</span><br><span class="hljs-comment">        1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">        如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">        2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">        3，叫醒等待的消费者开吃。*/</span><br><br>        <span class="hljs-type">Desk</span> <span class="hljs-variable">desk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Desk</span>();<br><br>        <span class="hljs-type">Foodie</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foodie</span>(desk);<br>        <span class="hljs-type">Cooker</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cooker</span>(desk);<br><br>        f.start();<br>        c.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-4阻塞队列基本使用【理解】"><a href="#3-4阻塞队列基本使用【理解】" class="headerlink" title="3.4阻塞队列基本使用【理解】"></a>3.4阻塞队列基本使用【理解】</h3><ul><li><p>阻塞队列继承结构</p><p><img src="/medias/31%E3%80%81img_%E5%A4%9A%E7%BA%BF%E7%A8%8B01/06_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84.png" alt="06_阻塞队列继承结构"></p></li><li><p>常见BlockingQueue:</p><p> ArrayBlockingQueue: 底层是数组,有界</p><p> LinkedBlockingQueue: 底层是链表,无界.但不是真正的无界,最大为int的最大值</p></li><li><p>BlockingQueue的核心方法:</p><p> put(anObject): 将参数放入队列,如果放不进去会阻塞</p><p> take(): 取出第一个数据,取不到会阻塞</p></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建阻塞队列的对象,容量为 1</span><br>        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 存储元素</span><br>        arrayBlockingQueue.put(<span class="hljs-string">&quot;汉堡包&quot;</span>);<br><br>        <span class="hljs-comment">// 取元素</span><br>        System.out.println(arrayBlockingQueue.take());<br>        System.out.println(arrayBlockingQueue.take()); <span class="hljs-comment">// 取不到会阻塞</span><br><br>        System.out.println(<span class="hljs-string">&quot;程序结束了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-5阻塞队列实现等待唤醒机制【理解】"><a href="#3-5阻塞队列实现等待唤醒机制【理解】" class="headerlink" title="3.5阻塞队列实现等待唤醒机制【理解】"></a>3.5阻塞队列实现等待唤醒机制【理解】</h3><ul><li><p>案例需求</p><ul><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>  1.构造方法中接收一个阻塞队列对象</p><p>  2.在run方法中循环向阻塞队列中添加包子</p><p>  3.打印添加结果</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>   1.构造方法中接收一个阻塞队列对象</p><p>   2.在run方法中循环获取阻塞队列中的包子</p><p>   3.打印获取结果</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>  创建阻塞队列对象</p><p>  创建生产者线程和消费者线程对象,构造方法中传入阻塞队列对象</p><p>  分别开启两个线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cooker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cooker</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bd = bd;<br>    &#125;<br><span class="hljs-comment">//    生产者步骤：</span><br><span class="hljs-comment">//            1，判断桌子上是否有汉堡包</span><br><span class="hljs-comment">//    如果有就等待，如果没有才生产。</span><br><span class="hljs-comment">//            2，把汉堡包放在桌子上。</span><br><span class="hljs-comment">//            3，叫醒等待的消费者开吃。</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                bd.put(<span class="hljs-string">&quot;汉堡包&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;厨师放入一个汉堡包&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Foodie</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bd = bd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        1，判断桌子上是否有汉堡包。</span><br><span class="hljs-comment">//        2，如果没有就等待。</span><br><span class="hljs-comment">//        3，如果有就开吃</span><br><span class="hljs-comment">//        4，吃完之后，桌子上的汉堡包就没有了</span><br><span class="hljs-comment">//                叫醒等待的生产者继续生产</span><br><span class="hljs-comment">//        汉堡包的总数量减一</span><br><br>        <span class="hljs-comment">//套路:</span><br>        <span class="hljs-comment">//1. while(true)死循环</span><br>        <span class="hljs-comment">//2. synchronized 锁,锁对象要唯一</span><br>        <span class="hljs-comment">//3. 判断,共享数据是否结束. 结束</span><br>        <span class="hljs-comment">//4. 判断,共享数据是否结束. 没有结束</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">take</span> <span class="hljs-operator">=</span> bd.take();<br>                System.out.println(<span class="hljs-string">&quot;吃货将&quot;</span> + take + <span class="hljs-string">&quot;拿出来吃了&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayBlockingQueue&lt;String&gt; bd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Foodie</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foodie</span>(bd);<br>        <span class="hljs-type">Cooker</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cooker</span>(bd);<br><br>        f.start();<br>        c.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-实现多线程&quot;&gt;&lt;a href=&quot;#1-实现多线程&quot; class=&quot;headerlink&quot; title=&quot;1.实现多线程&quot;&gt;&lt;/a&gt;1.实现多线程&lt;/h2&gt;&lt;h3 id=&quot;1-1简单了解多线程【理解】&quot;&gt;&lt;a href=&quot;#1-1简单了解多线程【理解】&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>IO(异常&amp;File&amp;综合案例）</title>
    <link href="https://iexlee.github.io/27%E3%80%81IO-%E5%BC%82%E5%B8%B8-File-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89.html"/>
    <id>https://iexlee.github.io/27%E3%80%81IO-%E5%BC%82%E5%B8%B8-File-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89.html</id>
    <published>2022-06-09T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-异常"><a href="#1-异常" class="headerlink" title="1. 异常"></a>1. 异常</h1><h2 id="1-1-异常概念"><a href="#1-1-异常概念" class="headerlink" title="1.1 异常概念"></a>1.1 异常概念</h2><p>异常，就是不正常的意思。在生活中:医生说,你的身体某个部位有异常,该部位和正常相比有点不同,该部位的功能将受影响.在程序中的意思就是：</p><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li></ul><p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p><blockquote><p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p></blockquote><h2 id="1-2-异常体系"><a href="#1-2-异常体系" class="headerlink" title="1.2 异常体系"></a>1.2 异常体系</h2><p>异常机制其实是帮助我们<strong>找到</strong>程序中的问题，异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code>与<code>java.lang.Exception</code>，平常所说的异常指<code>java.lang.Exception</code>。</p><p><img src="/medias/27%E3%80%81img_IO(%E5%BC%82%E5%B8%B8&File&%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.png"></p><p><strong>Throwable体系：</strong></p><ul><li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免，好比绝症。</li><li><strong>Exception</strong>:表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。好比感冒、阑尾炎。</li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p><p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p></li><li><p><code>public String getMessage()</code>:获取发生异常的原因。</p><p><em>提示给用户的时候,就提示错误原因。</em></p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p></li></ul><p><em><strong>出现异常,不要紧张,把异常的简单类名,拷贝到API中去查。</strong></em></p><p><img src="/medias/27%E3%80%81img_IO(%E5%BC%82%E5%B8%B8&File&%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%82%E5%B8%B8%E6%9F%A5%E7%9C%8B.bmp"></p><h2 id="1-3-异常分类"><a href="#1-3-异常分类" class="headerlink" title="1.3 异常分类"></a>1.3 异常分类</h2><p>我们平常说的异常就是指Exception，因为这类异常一旦出现，我们就要对代码进行更正，修复程序。</p><p><strong>异常(Exception)的分类</strong>:根据在编译时期还是运行时期去检查异常?</p><ul><li><strong>编译时期异常</strong>:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)</li><li><strong>运行时期异常</strong>:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数学异常)</li></ul><p>​    <img src="/medias/27%E3%80%81img_IO(%E5%BC%82%E5%B8%B8&File&%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB.png"></p><h2 id="1-4-异常的产生过程解析"><a href="#1-4-异常的产生过程解析" class="headerlink" title="1.4 异常的产生过程解析"></a>1.4 异常的产生过程解析</h2><p>先运行下面的程序，程序会产生一个数组索引越界异常ArrayIndexOfBoundsException。我们通过图解来解析下异常产生的过程。</p><p> 工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTools</span> &#123;<br>    <span class="hljs-comment">// 对给定的数组通过给定的角标获取元素。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> arr[index];<br>        <span class="hljs-keyword">return</span> element;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">34</span>, <span class="hljs-number">12</span>, <span class="hljs-number">67</span> &#125;;<br>        intnum = ArrayTools.getElement(arr, <span class="hljs-number">4</span>)<br>        System.out.println(<span class="hljs-string">&quot;num=&quot;</span> + num);<br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程序执行过程图解：</p><p> <img src="/medias/27%E3%80%81img_IO(%E5%BC%82%E5%B8%B8&File&%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B.png"></p><h2 id="1-5-抛出异常throw"><a href="#1-5-抛出异常throw" class="headerlink" title="1.5 抛出异常throw"></a>1.5 抛出异常throw</h2><p>在编写程序时，我们必须要考虑程序出现问题的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式来告诉调用者。</p><p>在java中，提供了一个<strong>throw</strong>关键字，它用来抛出一个指定的异常对象。那么，抛出一个异常具体如何操作呢？</p><ol><li><p>创建一个异常对象。封装一些提示信息(信息可以自己编写)。</p></li><li><p>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字throw就可以完成。throw 异常对象。</p><p>throw<strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。</p></li></ol><p><strong>使用格式：</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type"></span>异常类名(参数);<br></code></pre></td></tr></table></figure><p> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;要访问的arr数组不存在&quot;</span>);<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(<span class="hljs-string">&quot;该索引在数组中不存在，已超出范围&quot;</span>);<br></code></pre></td></tr></table></figure><p>学习完抛出异常的格式后，我们通过下面程序演示下throw的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个数组 </span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">52</span>,<span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-comment">//根据索引找对应的元素 </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> getElement(arr, index);<br><br>        System.out.println(element);<br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 根据 索引找到数组中对应的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> index)</span>&#123; <br>       <span class="hljs-comment">//判断  索引是否越界</span><br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span> || index&gt;arr.length-<span class="hljs-number">1</span>)&#123;<br>             <span class="hljs-comment">/*</span><br><span class="hljs-comment">             判断条件如果满足，当执行完throw抛出异常对象后，方法已经无法继续运算。</span><br><span class="hljs-comment">             这时就会结束当前方法的执行，并将异常告知给调用者。这时就需要通过异常来解决。 </span><br><span class="hljs-comment">              */</span><br>             <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(<span class="hljs-string">&quot;哥们，角标越界了```&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> arr[index];<br>        <span class="hljs-keyword">return</span> element;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果产生了问题，我们就会throw将问题描述类即异常进行抛出，也就是将问题返回给该方法的调用者。</p><p>那么对于调用者来说，该怎么处理呢？一种是进行捕获处理，另一种就是继续讲问题声明出去，使用throws声明处理。</p></blockquote><h2 id="1-6-声明异常throws"><a href="#1-6-声明异常throws" class="headerlink" title="1.6 声明异常throws"></a>1.6 声明异常throws</h2><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了编译时异常，而没有捕获处理（稍后讲解该方式），那么必须通过throws进行声明，让调用者去处理。</p><p>关键字<strong>throws</strong>运用于方法声明之上,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常).</p><p><strong>声明异常格式：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">修饰符 返回值类型 方法名(参数) <span class="hljs-keyword">throws</span> 异常类名<span class="hljs-number">1</span>,异常类名<span class="hljs-number">2</span>…&#123;   &#125;<br></code></pre></td></tr></table></figure><p>声明异常的代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowsDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        read(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-keyword">if</span> (!path.equals(<span class="hljs-string">&quot;a.txt&quot;</span>)) &#123;<span class="hljs-comment">//如果不是 a.txt这个文件 </span><br>            <span class="hljs-comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>throws用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在throws后面可以写多个异常类，用逗号隔开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowsDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        read(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String path)</span><span class="hljs-keyword">throws</span> FileNotFoundException, IOException &#123;<br>        <span class="hljs-keyword">if</span> (!path.equals(<span class="hljs-string">&quot;a.txt&quot;</span>)) &#123;<span class="hljs-comment">//如果不是 a.txt这个文件 </span><br>            <span class="hljs-comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!path.equals(<span class="hljs-string">&quot;b.txt&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-捕获异常try…catch"><a href="#1-7-捕获异常try…catch" class="headerlink" title="1.7 捕获异常try…catch"></a>1.7 捕获异常try…catch</h2><p>如果异常出现的话,会立刻终止程序,所以我们得处理异常:</p><ol><li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。</li><li>在方法中使用try-catch的语句块来处理异常。</li></ol><p><strong>try-catch</strong>的方式就是捕获异常。</p><ul><li><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</li></ul><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>     编写可能会出现异常的代码<br>&#125;<span class="hljs-keyword">catch</span>(异常类型  e)&#123;<br>     处理异常的代码<br>     <span class="hljs-comment">//记录日志/打印异常信息/继续抛出异常</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p><p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><blockquote><p>注意:try和catch都不能单独使用,必须连用。</p></blockquote><p>演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 当产生异常时，必须有处理方式。要么捕获，要么声明。</span><br>            read(<span class="hljs-string">&quot;b.txt&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<span class="hljs-comment">// 括号中需要定义什么呢？</span><br>          <span class="hljs-comment">//try中抛出的是什么异常，在括号中就定义什么异常类型</span><br>            System.out.println(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 我们 当前的这个方法中 有异常  有编译期异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-keyword">if</span> (!path.equals(<span class="hljs-string">&quot;a.txt&quot;</span>)) &#123;<span class="hljs-comment">//如果不是 a.txt这个文件 </span><br>            <span class="hljs-comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何获取异常信息：</p><p>Throwable类中定义了一些查看方法:</p><ul><li><p><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p></li><li><p><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</p></li></ul><p>​            <em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p><p>在开发中呢也可以在catch将编译期异常转换成运行期异常处理。</p><p>多个异常使用捕获又该如何处理呢？</p><ol><li>多个异常分别处理。</li><li>多个异常一次捕获，多次处理。</li><li>多个异常一次捕获一次处理。</li></ol><p>一般我们是使用一次捕获多次处理方式，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>     编写可能会出现异常的代码<br>&#125;<span class="hljs-keyword">catch</span>(异常类型A  e)&#123;  当<span class="hljs-keyword">try</span>中出现A类型异常,就用该<span class="hljs-keyword">catch</span>来捕获.<br>     处理异常的代码<br>     <span class="hljs-comment">//记录日志/打印异常信息/继续抛出异常</span><br>&#125;<span class="hljs-keyword">catch</span>(异常类型B  e)&#123;  当<span class="hljs-keyword">try</span>中出现B类型异常,就用该<span class="hljs-keyword">catch</span>来捕获.<br>     处理异常的代码<br>     <span class="hljs-comment">//记录日志/打印异常信息/继续抛出异常</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</p></blockquote><h2 id="1-8-finally-代码块"><a href="#1-8-finally-代码块" class="headerlink" title="1.8 finally 代码块"></a>1.8 finally 代码块</h2><p><strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，在finally代码块中存放的代码都是一定会被执行的。</p><p>什么时候的代码必须最终执行？</p><p>当我们在try语句块中打开了一些物理资源(磁盘文件&#x2F;网络连接&#x2F;数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p><p>finally的语法:</p><p> try…catch….finally:自身需要处理异常,最终还得关闭资源。</p><blockquote><p>注意:finally不能单独使用。</p></blockquote><p>比如在我们之后学习的IO流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。</p><p>finally代码参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            read(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-comment">//抓取到的是编译期异常  抛出去的是运行期 </span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不管程序怎样，这里都将会被执行。&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 我们 当前的这个方法中 有异常  有编译期异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-keyword">if</span> (!path.equals(<span class="hljs-string">&quot;a.txt&quot;</span>)) &#123;<span class="hljs-comment">//如果不是 a.txt这个文件 </span><br>            <span class="hljs-comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当只有在try或者catch中调用退出JVM的相关方法,此时finally才不会执行,否则finally永远会执行。</p></blockquote><h2 id="1-9-异常注意事项"><a href="#1-9-异常注意事项" class="headerlink" title="1.9 异常注意事项"></a>1.9 异常注意事项</h2><ul><li>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</li><li>如果父类抛出了多个异常,子类覆盖父类方法时,只能抛出相同的异常或者是他的子集。</li><li>父类方法没有抛出异常，子类覆盖父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</li><li>当多异常处理时，捕获处理，前边的类不能是后边类的父类</li><li>在try&#x2F;catch后可以追加finally代码块，其中的代码一定会被执行，通常用于资源回收。</li></ul><h2 id="1-10-概述"><a href="#1-10-概述" class="headerlink" title="1.10 概述"></a>1.10 概述</h2><p><strong>为什么需要自定义异常类:</strong></p><p>我们说了Java中不同的异常类,分别表示着某一种具体的异常情况,那么在开发中总是有些异常情况是SUN没有定义好的,此时我们根据自己业务的异常情况来定义异常类。,例如年龄负数问题,考试成绩负数问题。</p><p>在上述代码中，发现这些异常都是JDK内部定义好的，但是实际开发中也会出现很多异常,这些异常很可能在JDK中没有定义过,例如年龄负数问题,考试成绩负数问题.那么能不能自己定义异常呢？</p><p><strong>什么是自定义异常类:</strong></p><p>在开发中根据自己业务的异常情况来定义异常类.</p><p>自定义一个业务逻辑异常: <strong>LoginException</strong>。一个登陆异常类。</p><p><strong>异常类如何定义:</strong></p><ol><li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li></ol><h2 id="1-11-自定义异常的练习"><a href="#1-11-自定义异常的练习" class="headerlink" title="1.11 自定义异常的练习"></a>1.11 自定义异常的练习</h2><p>要求：我们模拟登陆操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><p>首先定义一个登陆异常类LoginException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 业务逻辑异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 空参构造</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 表示异常提示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-comment">// 模拟数据库中已存在账号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String[] names = &#123;<span class="hljs-string">&quot;bill&quot;</span>,<span class="hljs-string">&quot;hill&quot;</span>,<span class="hljs-string">&quot;jill&quot;</span>&#125;;<br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;     <br>        <span class="hljs-comment">//调用方法</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 可能出现异常的代码</span><br>            checkUsername(<span class="hljs-string">&quot;nill&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;注册成功&quot;</span>);<span class="hljs-comment">//如果没有异常就是注册成功</span><br>        &#125; <span class="hljs-keyword">catch</span>(LoginException e) &#123;<br>            <span class="hljs-comment">//处理异常</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//判断当前注册账号是否存在</span><br>    <span class="hljs-comment">//因为是编译期异常，又想调用者去处理 所以声明该异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUsername</span><span class="hljs-params">(String uname)</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            <span class="hljs-keyword">if</span>(name.equals(uname))&#123;<span class="hljs-comment">//如果名字在这里面 就抛出登陆异常</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span>(<span class="hljs-string">&quot;亲&quot;</span>+name+<span class="hljs-string">&quot;已经被注册了！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-File类"><a href="#2-File类" class="headerlink" title="2. File类"></a>2. File类</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h2 id="2-2-构造方法"><a href="#2-2-构造方法" class="headerlink" title="2.2 构造方法"></a>2.2 构造方法</h2><ul><li><code>public File(String pathname) </code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。  </li><li><code>public File(String parent, String child) </code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。  </li><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 文件路径名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">pathname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\aaa.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathname); <br><br><span class="hljs-comment">// 文件路径名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">pathname2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\aaa\\bbb.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathname2); <br><br><span class="hljs-comment">// 通过父路径和子路径字符串</span><br> <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\aaa&quot;</span>;<br> <span class="hljs-type">String</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bbb.txt&quot;</span>;<br> <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent, child);<br><br><span class="hljs-comment">// 通过父级File对象和子路径字符串</span><br><span class="hljs-type">File</span> <span class="hljs-variable">parentDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\aaa&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bbb.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">file4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentDir, child);<br></code></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol></blockquote><h2 id="2-3-常用方法"><a href="#2-3-常用方法" class="headerlink" title="2.3 常用方法"></a>2.3 常用方法</h2><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><p><code>public String getAbsolutePath() </code> ：返回此File的绝对路径名字符串。</p></li><li><p><code>public String getPath()</code> ：将此File转换为路径名字符串。 </p></li><li><p><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </p></li><li><p><code>public long length()</code>  ：返回由此File表示的文件的长度。 </p><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileGet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/aaa/bbb.java&quot;</span>);     <br>        System.out.println(<span class="hljs-string">&quot;文件绝对路径:&quot;</span>+f.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件构造路径:&quot;</span>+f.getPath());<br>        System.out.println(<span class="hljs-string">&quot;文件名称:&quot;</span>+f.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件长度:&quot;</span>+f.length()+<span class="hljs-string">&quot;字节&quot;</span>);<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/aaa&quot;</span>);     <br>        System.out.println(<span class="hljs-string">&quot;目录绝对路径:&quot;</span>+f2.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;目录构造路径:&quot;</span>+f2.getPath());<br>        System.out.println(<span class="hljs-string">&quot;目录名称:&quot;</span>+f2.getName());<br>        System.out.println(<span class="hljs-string">&quot;目录长度:&quot;</span>+f2.length());<br>    &#125;<br>&#125;<br>输出结果：<br>文件绝对路径:d:\aaa\bbb.java<br>文件构造路径:d:\aaa\bbb.java<br>文件名称:bbb.java<br>文件长度:<span class="hljs-number">636</span>字节<br><br>目录绝对路径:d:\aaa<br>目录构造路径:d:\aaa<br>目录名称:aaa<br>目录长度:<span class="hljs-number">4096</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>API中说明：length()，表示文件的长度。但是File对象表示目录，则返回值未指定。</p></blockquote><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilePath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// D盘下的bbb.java文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\bbb.java&quot;</span>);<br>        System.out.println(f.getAbsolutePath());<br>      <br><span class="hljs-comment">// 项目下的bbb.java文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;bbb.java&quot;</span>);<br>        System.out.println(f2.getAbsolutePath());<br>    &#125;<br>&#125;<br>输出结果：<br>D:\bbb.java<br>D:\idea_project_test4\bbb.java<br></code></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li></ul><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIs</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\aaa\\bbb.java&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\aaa&quot;</span>);<br>      <span class="hljs-comment">// 判断是否存在</span><br>        System.out.println(<span class="hljs-string">&quot;d:\\aaa\\bbb.java 是否存在:&quot;</span>+f.exists());<br>        System.out.println(<span class="hljs-string">&quot;d:\\aaa 是否存在:&quot;</span>+f2.exists());<br>      <span class="hljs-comment">// 判断是文件还是目录</span><br>        System.out.println(<span class="hljs-string">&quot;d:\\aaa 文件?:&quot;</span>+f2.isFile());<br>        System.out.println(<span class="hljs-string">&quot;d:\\aaa 目录?:&quot;</span>+f2.isDirectory());<br>    &#125;<br>&#125;<br>输出结果：<br>d:\aaa\bbb.java 是否存在:<span class="hljs-literal">true</span><br>d:\aaa 是否存在:<span class="hljs-literal">true</span><br>d:\aaa 文件?:<span class="hljs-literal">false</span><br>d:\aaa 目录?:<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。  </li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCreateDelete</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 文件的创建</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;aaa.txt&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;是否存在:&quot;</span>+f.exists()); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;是否创建:&quot;</span>+f.createNewFile()); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;是否存在:&quot;</span>+f.exists()); <span class="hljs-comment">// true</span><br><br>     <span class="hljs-comment">// 目录的创建</span><br>      File f2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;newDir&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;是否存在:&quot;</span>+f2.exists());<span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;是否创建:&quot;</span>+f2.mkdir());<span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;是否存在:&quot;</span>+f2.exists());<span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 创建多级目录</span><br>      File f3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;newDira\\newDirb&quot;</span>);<br>        System.out.println(f3.mkdir());<span class="hljs-comment">// false</span><br>        File f4= <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;newDira\\newDirb&quot;</span>);<br>        System.out.println(f4.mkdirs());<span class="hljs-comment">// true</span><br>      <br>      <span class="hljs-comment">// 文件的删除</span><br>       System.out.println(f.delete());<span class="hljs-comment">// true</span><br>      <br>      <span class="hljs-comment">// 目录的删除</span><br>        System.out.println(f2.delete());<span class="hljs-comment">// true</span><br>        System.out.println(f4.delete());<span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote><h2 id="2-4-目录的遍历"><a href="#2-4-目录的遍历" class="headerlink" title="2.4 目录的遍历"></a>2.4 目录的遍历</h2><ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileFor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\java_code&quot;</span>);<br>      <br>      <span class="hljs-comment">//获取当前目录下的文件以及文件夹的名称。</span><br>String[] names = dir.list();<br><span class="hljs-keyword">for</span>(String name : names)&#123;<br>System.out.println(name);<br>&#125;<br>        <span class="hljs-comment">//获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span><br>        File[] files = dir.listFiles();<br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            System.out.println(file);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>调用listFiles方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。</p></blockquote><h2 id="2-5-综合练习"><a href="#2-5-综合练习" class="headerlink" title="2.5 综合练习"></a>2.5 综合练习</h2><h4 id="练习1：创建文件夹"><a href="#练习1：创建文件夹" class="headerlink" title="练习1：创建文件夹"></a>练习1：创建文件夹</h4><p>​在当前模块下的aaa文件夹中创建一个a.txt文件</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//需求：在当前模块下的aaa文件夹中创建一个a.txt文件</span><br><br>        <span class="hljs-comment">//1.创建a.txt的父级路径</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;myfile\\aaa&quot;</span>);<br>        <span class="hljs-comment">//2.创建父级路径</span><br>        <span class="hljs-comment">//如果aaa是存在的，那么此时创建失败的。</span><br>        <span class="hljs-comment">//如果aaa是不存在的，那么此时创建成功的。</span><br>        file.mkdirs();<br>        <span class="hljs-comment">//3.拼接父级路径和子级路径</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> src.createNewFile();<br>        <span class="hljs-keyword">if</span>(b)&#123;<br>            System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;创建失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="练习2：查找文件（不考虑子文件夹）"><a href="#练习2：查找文件（不考虑子文件夹）" class="headerlink" title="练习2：查找文件（不考虑子文件夹）"></a>练习2：查找文件（不考虑子文件夹）</h4><p>​定义一个方法找某一个文件夹中，是否有以avi结尾的电影（暂时不需要考虑子文件夹）</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*需求：</span><br><span class="hljs-comment">             定义一个方法找某一个文件夹中，是否有以avi结尾的电影。</span><br><span class="hljs-comment">        （暂时不需要考虑子文件夹）</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\aaa\\bbb&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> haveAVI(file);<br>        System.out.println(b);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 作用：用来找某一个文件夹中，是否有以avi结尾的电影</span><br><span class="hljs-comment">    * 形参：要查找的文件夹</span><br><span class="hljs-comment">    * 返回值：查找的结果  存在true  不存在false</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">haveAVI</span><span class="hljs-params">(File file)</span>&#123;<span class="hljs-comment">// D:\\aaa</span><br>        <span class="hljs-comment">//1.进入aaa文件夹，而且要获取里面所有的内容</span><br>        File[] files = file.listFiles();<br>        <span class="hljs-comment">//2.遍历数组获取里面的每一个元素</span><br>        <span class="hljs-keyword">for</span> (File f : files) &#123;<br>            <span class="hljs-comment">//f：依次表示aaa文件夹里面每一个文件或者文件夹的路径</span><br>            <span class="hljs-keyword">if</span>(f.isFile() &amp;&amp; f.getName().endsWith(<span class="hljs-string">&quot;.avi&quot;</span>))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//3.如果循环结束之后还没有找到，直接返回false</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习3：（考虑子文件夹）"><a href="#练习3：（考虑子文件夹）" class="headerlink" title="练习3：（考虑子文件夹）"></a>练习3：（考虑子文件夹）</h3><p>​找到电脑中所有以avi结尾的电影。（需要考虑子文件夹）</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/* 需求：</span><br><span class="hljs-comment">        找到电脑中所有以avi结尾的电影。（需要考虑子文件夹）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        套路：</span><br><span class="hljs-comment">            1，进入文件夹</span><br><span class="hljs-comment">            2，遍历数组</span><br><span class="hljs-comment">            3，判断</span><br><span class="hljs-comment">            4，判断</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        */</span><br><br>        findAVI();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAVI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取本地所有的盘符</span><br>        File[] arr = File.listRoots();<br>        <span class="hljs-keyword">for</span> (File f : arr) &#123;<br>            findAVI(f);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAVI</span><span class="hljs-params">(File src)</span>&#123;<span class="hljs-comment">//&quot;C:\\</span><br>        <span class="hljs-comment">//1.进入文件夹src</span><br>        File[] files = src.listFiles();<br>        <span class="hljs-comment">//2.遍历数组,依次得到src里面每一个文件或者文件夹</span><br>        <span class="hljs-keyword">if</span>(files != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (File file : files) &#123;<br>                <span class="hljs-keyword">if</span>(file.isFile())&#123;<br>                    <span class="hljs-comment">//3，判断，如果是文件，就可以执行题目的业务逻辑</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> file.getName();<br>                    <span class="hljs-keyword">if</span>(name.endsWith(<span class="hljs-string">&quot;.avi&quot;</span>))&#123;<br>                        System.out.println(file);<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//4，判断，如果是文件夹，就可以递归</span><br>                    <span class="hljs-comment">//细节：再次调用本方法的时候，参数一定要是src的次一级路径</span><br>                    findAVI(file);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习4：删除多级文件夹"><a href="#练习4：删除多级文件夹" class="headerlink" title="练习4：删除多级文件夹"></a>练习4：删除多级文件夹</h3><p>需求： 如果我们要删除一个有内容的文件夹<br>       1.先删除文件夹里面所有的内容<br>           2.再删除自己</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">           删除一个多级文件夹</span><br><span class="hljs-comment">           如果我们要删除一个有内容的文件夹</span><br><span class="hljs-comment">           1.先删除文件夹里面所有的内容</span><br><span class="hljs-comment">           2.再删除自己</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\aaa\\src&quot;</span>);<br>        delete(file);<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 作用：删除src文件夹</span><br><span class="hljs-comment">    * 参数：要删除的文件夹</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(File src)</span>&#123;<br>        <span class="hljs-comment">//1.先删除文件夹里面所有的内容</span><br>        <span class="hljs-comment">//进入src</span><br>        File[] files = src.listFiles();<br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-comment">//判断,如果是文件，删除</span><br>            <span class="hljs-keyword">if</span>(file.isFile())&#123;<br>                file.delete();<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//判断,如果是文件夹，就递归</span><br>                delete(file);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//2.再删除自己</span><br>        src.delete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习5：统计大小"><a href="#练习5：统计大小" class="headerlink" title="练习5：统计大小"></a>练习5：统计大小</h3><p>​需求：统计一个文件夹的总大小</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">/*需求：</span><br><span class="hljs-comment">            统计一个文件夹的总大小</span><br><span class="hljs-comment">      */</span><br><br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\aaa\\src&quot;</span>);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> getLen(file);<br>        System.out.println(len);<span class="hljs-comment">//4919189</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 作用：</span><br><span class="hljs-comment">    *       统计一个文件夹的总大小</span><br><span class="hljs-comment">    * 参数：</span><br><span class="hljs-comment">    *       表示要统计的那个文件夹</span><br><span class="hljs-comment">    * 返回值：</span><br><span class="hljs-comment">    *       统计之后的结果</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 文件夹的总大小：</span><br><span class="hljs-comment">    *       说白了，文件夹里面所有文件的大小</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getLen</span><span class="hljs-params">(File src)</span>&#123;<br>        <span class="hljs-comment">//1.定义变量进行累加</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//2.进入src文件夹</span><br>        File[] files = src.listFiles();<br>        <span class="hljs-comment">//3.遍历数组</span><br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-comment">//4.判断</span><br>            <span class="hljs-keyword">if</span>(file.isFile())&#123;<br>                <span class="hljs-comment">//我们就把当前文件的大小累加到len当中</span><br>                len = len + file.length();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//判断，如果是文件夹就递归</span><br>                len = len + getLen(file);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习6：统计文件个数"><a href="#练习6：统计文件个数" class="headerlink" title="练习6：统计文件个数"></a>练习6：统计文件个数</h3><p>  需求：统计一个文件夹中每种文件的个数并打印。（考虑子文件夹）<br>            打印格式如下：<br>            txt:3个<br>            doc:4个<br>            jpg:6个</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            需求：统计一个文件夹中每种文件的个数并打印。（考虑子文件夹）</span><br><span class="hljs-comment">            打印格式如下：</span><br><span class="hljs-comment">            txt:3个</span><br><span class="hljs-comment">            doc:4个</span><br><span class="hljs-comment">            jpg:6个</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\aaa\\src&quot;</span>);<br>        HashMap&lt;String, Integer&gt; hm = getCount(file);<br>        System.out.println(hm);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 作用：</span><br><span class="hljs-comment">    *       统计一个文件夹中每种文件的个数</span><br><span class="hljs-comment">    * 参数：</span><br><span class="hljs-comment">    *       要统计的那个文件夹</span><br><span class="hljs-comment">    * 返回值：</span><br><span class="hljs-comment">    *       用来统计map集合</span><br><span class="hljs-comment">    *       键：后缀名 值：次数</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *       a.txt</span><br><span class="hljs-comment">    *       a.a.txt</span><br><span class="hljs-comment">    *       aaa（不需要统计的）</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;String,Integer&gt; <span class="hljs-title function_">getCount</span><span class="hljs-params">(File src)</span>&#123;<br>        <span class="hljs-comment">//1.定义集合用来统计</span><br>        HashMap&lt;String,Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//2.进入src文件夹</span><br>        File[] files = src.listFiles();<br>        <span class="hljs-comment">//3.遍历数组</span><br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-comment">//4.判断，如果是文件，统计</span><br>            <span class="hljs-keyword">if</span>(file.isFile())&#123;<br>                <span class="hljs-comment">//a.txt</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> file.getName();<br>                String[] arr = name.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>                <span class="hljs-keyword">if</span>(arr.length &gt;= <span class="hljs-number">2</span>)&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">endName</span> <span class="hljs-operator">=</span> arr[arr.length - <span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span>(hm.containsKey(endName))&#123;<br>                        <span class="hljs-comment">//存在</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> hm.get(endName);<br>                        count++;<br>                        hm.put(endName,count);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//不存在</span><br>                        hm.put(endName,<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//5.判断，如果是文件夹，递归</span><br>                <span class="hljs-comment">//sonMap里面是子文件中每一种文件的个数</span><br>                HashMap&lt;String, Integer&gt; sonMap = getCount(file);<br>                <span class="hljs-comment">//hm:  txt=1  jpg=2  doc=3</span><br>                <span class="hljs-comment">//sonMap: txt=3 jpg=1</span><br>                <span class="hljs-comment">//遍历sonMap把里面的值累加到hm当中</span><br>                Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = sonMap.entrySet();<br>                <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>                    <span class="hljs-keyword">if</span>(hm.containsKey(key))&#123;<br>                        <span class="hljs-comment">//存在</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> hm.get(key);<br>                        count = count + value;<br>                        hm.put(key,count);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//不存在</span><br>                        hm.put(key,value);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-异常&quot;&gt;&lt;a href=&quot;#1-异常&quot; class=&quot;headerlink&quot; title=&quot;1. 异常&quot;&gt;&lt;/a&gt;1. 异常&lt;/h1&gt;&lt;h2 id=&quot;1-1-异常概念&quot;&gt;&lt;a href=&quot;#1-1-异常概念&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Stream流和方法引用</title>
    <link href="https://iexlee.github.io/26%E3%80%81stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.html"/>
    <id>https://iexlee.github.io/26%E3%80%81stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.html</id>
    <published>2022-06-05T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.900Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-不可变集合"><a href="#1-不可变集合" class="headerlink" title="1.不可变集合"></a>1.不可变集合</h2><h3 id="1-1-什么是不可变集合"><a href="#1-1-什么是不可变集合" class="headerlink" title="1.1 什么是不可变集合"></a>1.1 什么是不可变集合</h3><p>​是一个长度不可变，内容也无法修改的集合</p><h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><p>​如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践。</p><p>​当集合对象被不可信的库调用时，不可变形式是安全的。</p><p>简单理解：</p><p>​不想让别人修改集合中的内容</p><p>比如说：</p><p>1，斗地主的54张牌，是不能添加，不能删除，不能修改的</p><p>2，斗地主的打牌规则：单张，对子，三张，顺子等，也是不能修改的</p><p>3，用代码获取的操作系统硬件信息，也是不能被修改的</p><h3 id="1-3-不可变集合分类"><a href="#1-3-不可变集合分类" class="headerlink" title="1.3 不可变集合分类"></a>1.3 不可变集合分类</h3><ul><li>不可变的list集合</li><li>不可变的set集合</li><li>不可变的map集合</li></ul><h3 id="1-4-不可变的list集合"><a href="#1-4-不可变的list集合" class="headerlink" title="1.4 不可变的list集合"></a>1.4 不可变的list集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImmutableDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            创建不可变的List集合</span><br><span class="hljs-comment">            &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span><br>        List&lt;String&gt; list = List.of(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;赵六&quot;</span>);<br><br>        System.out.println(list.get(<span class="hljs-number">0</span>));<br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>        System.out.println(list.get(<span class="hljs-number">2</span>));<br>        System.out.println(list.get(<span class="hljs-number">3</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;---------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;---------------------------&quot;</span>);<br><br><br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> it.next();<br>            System.out.println(s);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------------------------&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>            System.out.println(s);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//list.remove(&quot;李四&quot;);</span><br>        <span class="hljs-comment">//list.add(&quot;aaa&quot;);</span><br>        list.set(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-不可变的Set集合"><a href="#1-5-不可变的Set集合" class="headerlink" title="1.5 不可变的Set集合"></a>1.5 不可变的Set集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImmutableDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">           创建不可变的Set集合</span><br><span class="hljs-comment">           &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">           细节：</span><br><span class="hljs-comment">                当我们要获取一个不可变的Set集合时，里面的参数一定要保证唯一性</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span><br>        Set&lt;String&gt; set = Set.of(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;赵六&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : set) &#123;<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br><br>        Iterator&lt;String&gt; it = set.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> it.next();<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>        <span class="hljs-comment">//set.remove(&quot;王五&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-不可变的Map集合"><a href="#1-6-不可变的Map集合" class="headerlink" title="1.6 不可变的Map集合"></a>1.6 不可变的Map集合</h3><h4 id="1-6-1：键值对个数小于等于10"><a href="#1-6-1：键值对个数小于等于10" class="headerlink" title="1.6.1：键值对个数小于等于10"></a>1.6.1：键值对个数小于等于10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImmutableDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        创建Map的不可变集合</span><br><span class="hljs-comment">            细节1：</span><br><span class="hljs-comment">                键是不能重复的</span><br><span class="hljs-comment">            细节2：</span><br><span class="hljs-comment">                Map里面的of方法，参数是有上限的，最多只能传递20个参数，10个键值对</span><br><span class="hljs-comment">            细节3：</span><br><span class="hljs-comment">                如果我们要传递多个键值对对象，数量大于10个，在Map接口中还有一个方法</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span><br>        Map&lt;String, String&gt; map = Map.of(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>,<br>                <span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;周八&quot;</span>, <span class="hljs-string">&quot;杭州&quot;</span>,<br>                <span class="hljs-string">&quot;吴九&quot;</span>, <span class="hljs-string">&quot;宁波&quot;</span>, <span class="hljs-string">&quot;郑十&quot;</span>, <span class="hljs-string">&quot;苏州&quot;</span>, <span class="hljs-string">&quot;刘一&quot;</span>, <span class="hljs-string">&quot;无锡&quot;</span>,<br>                <span class="hljs-string">&quot;陈二&quot;</span>, <span class="hljs-string">&quot;嘉兴&quot;</span>);<br><br>        Set&lt;String&gt; keys = map.keySet();<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-6-2：键值对个数大于10"><a href="#1-6-2：键值对个数大于10" class="headerlink" title="1.6.2：键值对个数大于10"></a>1.6.2：键值对个数大于10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImmutableDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            创建Map的不可变集合,键值对的数量超过10个</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//1.创建一个普通的Map集合</span><br>        HashMap&lt;String, String&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hm.put(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;周八&quot;</span>, <span class="hljs-string">&quot;杭州&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;吴九&quot;</span>, <span class="hljs-string">&quot;宁波&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;郑十&quot;</span>, <span class="hljs-string">&quot;苏州&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;刘一&quot;</span>, <span class="hljs-string">&quot;无锡&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;陈二&quot;</span>, <span class="hljs-string">&quot;嘉兴&quot;</span>);<br>        hm.put(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);<br><br>        <span class="hljs-comment">//2.利用上面的数据来获取一个不可变的集合</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        //获取到所有的键值对对象（Entry对象）</span><br><span class="hljs-comment">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hm.entrySet();</span><br><span class="hljs-comment">        //把entries变成一个数组</span><br><span class="hljs-comment">        Map.Entry[] arr1 = new Map.Entry[0];</span><br><span class="hljs-comment">        //toArray方法在底层会比较集合的长度跟数组的长度两者的大小</span><br><span class="hljs-comment">        //如果集合的长度 &gt; 数组的长度 ：数据在数组中放不下，此时会根据实际数据的个数，重新创建数组</span><br><span class="hljs-comment">        //如果集合的长度 &lt;= 数组的长度：数据在数组中放的下，此时不会创建新的数组，而是直接用</span><br><span class="hljs-comment">        Map.Entry[] arr2 = entries.toArray(arr1);</span><br><span class="hljs-comment">        //不可变的map集合</span><br><span class="hljs-comment">        Map map = Map.ofEntries(arr2);</span><br><span class="hljs-comment">        map.put(&quot;bbb&quot;,&quot;222&quot;);*/</span><br><br><br>        <span class="hljs-comment">//Map&lt;Object, Object&gt; map = Map.ofEntries(hm.entrySet().toArray(new Map.Entry[0]));</span><br><br>        Map&lt;String, String&gt; map = Map.copyOf(hm);<br>        map.put(<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Stream流"><a href="#2-Stream流" class="headerlink" title="2.Stream流"></a>2.Stream流</h2><h3 id="2-1体验Stream流【理解】"><a href="#2-1体验Stream流【理解】" class="headerlink" title="2.1体验Stream流【理解】"></a>2.1体验Stream流【理解】</h3><ul><li><p>案例需求</p><p>按照下面的要求完成集合的创建和遍历</p><ul><li>创建一个集合，存储多个字符串元素</li><li>把集合中所有以”张”开头的元素存储到一个新的集合</li><li>把”张”开头的集合中的长度为3的元素存储到一个新的集合</li><li>遍历上一步得到的集合</li></ul></li><li><p>原始方式示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStream1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//集合的批量添加</span><br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(List.of(<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张翠山&quot;</span>,<span class="hljs-string">&quot;王二麻子&quot;</span>,<span class="hljs-string">&quot;张良&quot;</span>,<span class="hljs-string">&quot;谢广坤&quot;</span>));<br>        <span class="hljs-comment">//list.add()</span><br><br>        <span class="hljs-comment">//遍历list1把以张开头的元素添加到list2中。</span><br>        ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list1) &#123;<br>            <span class="hljs-keyword">if</span>(s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))&#123;<br>                list2.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//遍历list2集合，把其中长度为3的元素，再添加到list3中。</span><br>        ArrayList&lt;String&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list2) &#123;<br>            <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">3</span>)&#123;<br>                list3.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String s : list3) &#123;<br>            System.out.println(s);<br>        &#125;      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用Stream流示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//集合的批量添加</span><br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(List.of(<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张翠山&quot;</span>,<span class="hljs-string">&quot;王二麻子&quot;</span>,<span class="hljs-string">&quot;张良&quot;</span>,<span class="hljs-string">&quot;谢广坤&quot;</span>));<br><br>        <span class="hljs-comment">//Stream流</span><br>        list1.stream().filter(s-&gt;s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))<br>                .filter(s-&gt;s.length() == <span class="hljs-number">3</span>)<br>                .forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Stream流的好处</p><ul><li>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：获取流、过滤姓张、过滤长度为3、逐一打印</li><li>Stream流把真正的函数式编程风格引入到Java中</li><li>代码简洁</li></ul></li></ul><h3 id="2-2Stream流的常见生成方式【应用】"><a href="#2-2Stream流的常见生成方式【应用】" class="headerlink" title="2.2Stream流的常见生成方式【应用】"></a>2.2Stream流的常见生成方式【应用】</h3><ul><li><p>Stream流的思想</p><p><img src="/./medias/26%E3%80%81img_stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/01_Stream%E6%B5%81%E6%80%9D%E6%83%B3.png" alt="01_Stream流思想"></p></li><li><p>Stream流的三类方法</p><ul><li>获取Stream流<ul><li>创建一条流水线,并把数据放到流水线上准备进行操作</li></ul></li><li>中间方法<ul><li>流水线上的操作</li><li>一次操作完毕之后,还可以继续进行其他操作</li></ul></li><li>终结方法<ul><li>一个Stream流只能有一个终结方法</li><li>是流水线上的最后一个操作</li></ul></li></ul></li><li><p>生成Stream流的方式</p><ul><li><p>Collection体系集合</p><p>使用默认方法stream()生成流， default Stream<E> stream()</p></li><li><p>Map体系集合</p><p>把Map转成Set集合，间接的生成流</p></li><li><p>数组</p><p>通过Arrays中的静态方法stream生成流</p></li><li><p>同种数据类型的多个数据</p><p>通过Stream接口的静态方法of(T… values)生成流</p></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Collection体系的集合可以使用默认方法stream()生成流</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        Stream&lt;String&gt; listStream = list.stream();<br><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>        Stream&lt;String&gt; setStream = set.stream();<br><br>        <span class="hljs-comment">//Map体系的集合间接的生成流</span><br>        Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;();<br>        Stream&lt;String&gt; keyStream = map.keySet().stream();<br>        Stream&lt;Integer&gt; valueStream = map.values().stream();<br>        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; entryStream = map.entrySet().stream();<br><br>        <span class="hljs-comment">//数组可以通过Arrays中的静态方法stream生成流</span><br>        String[] strArray = &#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>&#125;;<br>        Stream&lt;String&gt; strArrayStream = Arrays.stream(strArray);<br>      <br>      <span class="hljs-comment">//同种数据类型的多个数据可以通过Stream接口的静态方法of(T... values)生成流</span><br>        Stream&lt;String&gt; strArrayStream2 = Stream.of(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>);<br>        Stream&lt;Integer&gt; intStream = Stream.of(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3Stream流中间操作方法【应用】"><a href="#2-3Stream流中间操作方法【应用】" class="headerlink" title="2.3Stream流中间操作方法【应用】"></a>2.3Stream流中间操作方法【应用】</h3><ul><li><p>概念</p><p>中间操作的意思是,执行完此方法之后,Stream流依然可以继续执行其他操作</p></li><li><p>常见方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Stream<T> filter(Predicate predicate)</td><td>用于对流中的数据进行过滤</td></tr><tr><td>Stream<T> limit(long maxSize)</td><td>返回此流中的元素组成的流，截取前指定参数个数的数据</td></tr><tr><td>Stream<T> skip(long n)</td><td>跳过指定参数个数的数据，返回由该流的剩余元素组成的流</td></tr><tr><td>static <T> Stream<T> concat(Stream a, Stream b)</td><td>合并a和b两个流为一个流</td></tr><tr><td>Stream<T> distinct()</td><td>返回由该流的不同元素（根据Object.equals(Object) ）组成的流</td></tr></tbody></table></li><li><p>filter代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStream3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        Stream&lt;T&gt; filter(Predicate predicate)：过滤</span><br><span class="hljs-comment">//        Predicate接口中的方法boolean test(T t)：对给定的参数进行判断，返回一个布尔值</span><br><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        <span class="hljs-comment">//filter方法获取流中的 每一个数据.</span><br>        <span class="hljs-comment">//而test方法中的s,就依次表示流中的每一个数据.</span><br>        <span class="hljs-comment">//我们只要在test方法中对s进行判断就可以了.</span><br>        <span class="hljs-comment">//如果判断的结果为true,则当前的数据留下</span><br>        <span class="hljs-comment">//如果判断的结果为false,则当前数据就不要.</span><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                new Predicate&lt;String&gt;() &#123;</span><br><span class="hljs-comment">//                    @Override</span><br><span class="hljs-comment">//                    public boolean test(String s) &#123;</span><br><span class="hljs-comment">//                        boolean result = s.startsWith(&quot;张&quot;);</span><br><span class="hljs-comment">//                        return result;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        ).forEach(s-&gt; System.out.println(s));</span><br><br>        <span class="hljs-comment">//因为Predicate接口中只有一个抽象方法test</span><br>        <span class="hljs-comment">//所以我们可以使用lambda表达式来简化</span><br><span class="hljs-comment">//        list.stream().filter(</span><br><span class="hljs-comment">//                (String s)-&gt;&#123;</span><br><span class="hljs-comment">//                    boolean result = s.startsWith(&quot;张&quot;);</span><br><span class="hljs-comment">//                        return result;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        ).forEach(s-&gt; System.out.println(s));</span><br><br>        list.stream().filter(s -&gt;s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).forEach(s-&gt; System.out.println(s));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>limit&amp;skip代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个集合，存储多个字符串元素</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>        list.add(<span class="hljs-string">&quot;林青霞&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张曼玉&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王祖贤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;柳岩&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张敏&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br><br>        <span class="hljs-comment">//需求1：取前3个数据在控制台输出</span><br>        list.stream().limit(<span class="hljs-number">3</span>).forEach(s-&gt; System.out.println(s));<br>        System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br><br>        <span class="hljs-comment">//需求2：跳过3个元素，把剩下的元素在控制台输出</span><br>        list.stream().skip(<span class="hljs-number">3</span>).forEach(s-&gt; System.out.println(s));<br>        System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br><br>        <span class="hljs-comment">//需求3：跳过2个元素，把剩下的元素中前2个在控制台输出</span><br>        list.stream().skip(<span class="hljs-number">2</span>).limit(<span class="hljs-number">2</span>).forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>concat&amp;distinct代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个集合，存储多个字符串元素</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>        list.add(<span class="hljs-string">&quot;林青霞&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张曼玉&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王祖贤&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;柳岩&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张敏&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br><br>        <span class="hljs-comment">//需求1：取前4个数据组成一个流</span><br>        Stream&lt;String&gt; s1 = list.stream().limit(<span class="hljs-number">4</span>);<br><br>        <span class="hljs-comment">//需求2：跳过2个数据组成一个流</span><br>        Stream&lt;String&gt; s2 = list.stream().skip(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//需求3：合并需求1和需求2得到的流，并把结果在控制台输出</span><br><span class="hljs-comment">//        Stream.concat(s1,s2).forEach(s-&gt; System.out.println(s));</span><br><br>        <span class="hljs-comment">//需求4：合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复</span><br>        Stream.concat(s1,s2).distinct().forEach(s-&gt; System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-4Stream流终结操作方法【应用】"><a href="#2-4Stream流终结操作方法【应用】" class="headerlink" title="2.4Stream流终结操作方法【应用】"></a>2.4Stream流终结操作方法【应用】</h3><ul><li><p>概念</p><p>终结操作的意思是,执行完此方法之后,Stream流将不能再执行其他操作</p></li><li><p>常见方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void forEach(Consumer action)</td><td>对此流的每个元素执行操作</td></tr><tr><td>long count()</td><td>返回此流中的元素数</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStream5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张翠山&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;王二麻子&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;张良&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;谢广坤&quot;</span>);<br><br>        <span class="hljs-comment">//method1(list);</span><br>        <br><span class="hljs-comment">//        long count()：返回此流中的元素数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> list.stream().count();<br>        System.out.println(count);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">(ArrayList&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-comment">//  void forEach(Consumer action)：对此流的每个元素执行操作</span><br>        <span class="hljs-comment">//  Consumer接口中的方法void accept(T t)：对给定的参数执行此操作</span><br>        <span class="hljs-comment">//在forEach方法的底层,会循环获取到流中的每一个数据.</span><br>        <span class="hljs-comment">//并循环调用accept方法,并把每一个数据传递给accept方法</span><br>        <span class="hljs-comment">//s就依次表示了流中的每一个数据.</span><br>        <span class="hljs-comment">//所以,我们只要在accept方法中,写上处理的业务逻辑就可以了.</span><br>        list.stream().forEach(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>                        System.out.println(s);<br>                    &#125;<br>                &#125;<br>        );<br>      <br>        System.out.println(<span class="hljs-string">&quot;====================&quot;</span>);<br>        <span class="hljs-comment">//lambda表达式的简化格式</span><br>        <span class="hljs-comment">//是因为Consumer接口中,只有一个accept方法</span><br>        list.stream().forEach(<br>                (String s)-&gt;&#123;<br>                    System.out.println(s);<br>                &#125;<br>        );<br>        System.out.println(<span class="hljs-string">&quot;====================&quot;</span>);<br>        <span class="hljs-comment">//lambda表达式还是可以进一步简化的.</span><br>        list.stream().forEach(s-&gt;System.out.println(s));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-5Stream流的收集操作【应用】"><a href="#2-5Stream流的收集操作【应用】" class="headerlink" title="2.5Stream流的收集操作【应用】"></a>2.5Stream流的收集操作【应用】</h3><ul><li><p>概念</p><p>对数据使用Stream流的方式操作完毕后,可以把流中的数据收集到集合中</p></li><li><p>常用方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>R collect(Collector collector)</td><td>把结果收集到集合中</td></tr></tbody></table></li><li><p>工具类Collectors提供了具体的收集方式</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static <T> Collector toList()</td><td>把元素收集到List集合中</td></tr><tr><td>public static <T> Collector toSet()</td><td>把元素收集到Set集合中</td></tr><tr><td>public static  Collector toMap(Function keyMapper,Function valueMapper)</td><td>把元素收集到Map集合中</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// toList和toSet方法演示 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStream7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            list1.add(i);<br>        &#125;<br><br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br>        list1.add(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">//filter负责过滤数据的.</span><br>        <span class="hljs-comment">//collect负责收集数据.</span><br>                <span class="hljs-comment">//获取流中剩余的数据,但是他不负责创建容器,也不负责把数据添加到容器中.</span><br>        <span class="hljs-comment">//Collectors.toList() : 在底层会创建一个List集合.并把所有的数据添加到List集合中.</span><br>        List&lt;Integer&gt; list = list1.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                .collect(Collectors.toList());<br><br>        System.out.println(list);<br><br>    Set&lt;Integer&gt; set = list1.stream().filter(number -&gt; number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            .collect(Collectors.toSet());<br>    System.out.println(set);<br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">Stream流的收集方法 toMap方法演示</span><br><span class="hljs-comment">创建一个ArrayList集合，并添加以下字符串。字符串中前面是姓名，后面是年龄</span><br><span class="hljs-comment">&quot;zhangsan,23&quot;</span><br><span class="hljs-comment">&quot;lisi,24&quot;</span><br><span class="hljs-comment">&quot;wangwu,25&quot;</span><br><span class="hljs-comment">保留年龄大于等于24岁的人，并将结果收集到Map集合中，姓名为键，年龄为值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStream8</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;zhangsan,23&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;lisi,24&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;wangwu,25&quot;</span>);<br><br>        Map&lt;String, Integer&gt; map = list.stream().filter(<br>                s -&gt; &#123;<br>                    String[] split = s.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(split[<span class="hljs-number">1</span>]);<br>                    <span class="hljs-keyword">return</span> age &gt;= <span class="hljs-number">24</span>;<br>                &#125;<br><br>         <span class="hljs-comment">//   collect方法只能获取到流中剩余的每一个数据.</span><br>         <span class="hljs-comment">//在底层不能创建容器,也不能把数据添加到容器当中</span><br><br>         <span class="hljs-comment">//Collectors.toMap 创建一个map集合并将数据添加到集合当中</span><br><br>          <span class="hljs-comment">// s 依次表示流中的每一个数据</span><br><br>          <span class="hljs-comment">//第一个lambda表达式就是如何获取到Map中的键</span><br>          <span class="hljs-comment">//第二个lambda表达式就是如何获取Map中的值</span><br>        ).collect(Collectors.toMap(<br>                s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>],<br>                s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]) ));<br><br>        System.out.println(map);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-6Stream流综合练习【应用】"><a href="#2-6Stream流综合练习【应用】" class="headerlink" title="2.6Stream流综合练习【应用】"></a>2.6Stream流综合练习【应用】</h3><ul><li><p>案例需求</p><p>现在有两个ArrayList集合，分别存储6名男演员名称和6名女演员名称，要求完成如下的操作</p><ul><li>男演员只要名字为3个字的前三人</li><li>女演员只要姓林的，并且不要第一个</li><li>把过滤后的男演员姓名和女演员姓名合并到一起</li><li>把上一步操作后的元素作为构造方法的参数创建演员对象,遍历数据</li></ul><p>演员类Actor已经提供，里面有一个成员变量，一个带参构造方法，以及成员变量对应的get&#x2F;set方法</p></li><li><p>代码实现</p><p>演员类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Actor</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合</span><br>        ArrayList&lt;String&gt; manList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        manList.add(<span class="hljs-string">&quot;周润发&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;成龙&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;刘德华&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;吴京&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;周星驰&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;李连杰&quot;</span>);<br>  <br>        ArrayList&lt;String&gt; womanList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        womanList.add(<span class="hljs-string">&quot;林心如&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;张曼玉&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;林青霞&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;柳岩&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;林志玲&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;王祖贤&quot;</span>);<br>  <br>        <span class="hljs-comment">//男演员只要名字为3个字的前三人</span><br>        Stream&lt;String&gt; manStream = manList.stream().filter(s -&gt; s.length() == <span class="hljs-number">3</span>).limit(<span class="hljs-number">3</span>);<br>  <br>        <span class="hljs-comment">//女演员只要姓林的，并且不要第一个</span><br>        Stream&lt;String&gt; womanStream = womanList.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;林&quot;</span>)).skip(<span class="hljs-number">1</span>);<br>  <br>        <span class="hljs-comment">//把过滤后的男演员姓名和女演员姓名合并到一起</span><br>        Stream&lt;String&gt; stream = Stream.concat(manStream, womanStream);<br>  <br>      <span class="hljs-comment">// 将流中的数据封装成Actor对象之后打印</span><br>      stream.forEach(name -&gt; &#123;<br>            <span class="hljs-type">Actor</span> <span class="hljs-variable">actor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Actor</span>(name);<br>            System.out.println(actor);<br>        &#125;); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3.方法引用"></a>3.方法引用</h2><h3 id="3-1体验方法引用【理解】"><a href="#3-1体验方法引用【理解】" class="headerlink" title="3.1体验方法引用【理解】"></a>3.1体验方法引用【理解】</h3><ul><li><p>方法引用的出现原因</p><p>在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作</p><p>那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑呢？答案肯定是没有必要</p><p>那我们又是如何使用已经存在的方案的呢？</p><p>这就是我们要讲解的方法引用，我们是通过方法引用来使用已经存在的方案</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Printable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printString</span><span class="hljs-params">(String s)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//在主方法中调用usePrintable方法</span><br><span class="hljs-comment">//        usePrintable((String s) -&gt; &#123;</span><br><span class="hljs-comment">//            System.out.println(s);</span><br><span class="hljs-comment">//        &#125;);</span><br>    <span class="hljs-comment">//Lambda简化写法</span><br>        usePrintable(s -&gt; System.out.println(s));<br><br>        <span class="hljs-comment">//方法引用</span><br>        usePrintable(System.out::println);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">usePrintable</span><span class="hljs-params">(Printable p)</span> &#123;<br>        p.printString(<span class="hljs-string">&quot;爱生活爱Java&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2方法引用符【理解】"><a href="#3-2方法引用符【理解】" class="headerlink" title="3.2方法引用符【理解】"></a>3.2方法引用符【理解】</h3><ul><li><p>方法引用符</p><p>::  该符号为引用运算符，而它所在的表达式被称为方法引用</p></li><li><p>推导与省略</p><ul><li>如果使用Lambda，那么根据“可推导就是可省略”的原则，无需指定参数类型，也无需指定的重载形式，它们都将被自动推导</li><li>如果使用方法引用，也是同样可以根据上下文进行推导</li><li>方法引用是Lambda的孪生兄弟</li></ul></li></ul><h3 id="3-3引用类方法【应用】"><a href="#3-3引用类方法【应用】" class="headerlink" title="3.3引用类方法【应用】"></a>3.3引用类方法【应用】</h3><p>​引用类方法，其实就是引用类的静态方法</p><ul><li><p>格式</p><p>类名::静态方法</p></li><li><p>范例</p><p>Integer::parseInt</p><p>Integer类的方法：public static int parseInt(String s) 将此String转换为int类型数据</p></li><li><p>练习描述</p><ul><li>定义一个接口(Converter)，里面定义一个抽象方法 int convert(String s);</li><li>定义一个测试类(ConverterDemo)，在测试类中提供两个方法<ul><li>一个方法是：useConverter(Converter c)</li><li>一个方法是主方法，在主方法中调用useConverter方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Converter</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">convert</span><span class="hljs-params">(String s)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConverterDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//Lambda写法</span><br>        useConverter(s -&gt; Integer.parseInt(s));<br><br>        <span class="hljs-comment">//引用类方法</span><br>        useConverter(Integer::parseInt);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useConverter</span><span class="hljs-params">(Converter c)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> c.convert(<span class="hljs-string">&quot;666&quot;</span>);<br>        System.out.println(number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用说明</p><p>Lambda表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数</p></li></ul><h3 id="3-4引用对象的实例方法【应用】"><a href="#3-4引用对象的实例方法【应用】" class="headerlink" title="3.4引用对象的实例方法【应用】"></a>3.4引用对象的实例方法【应用】</h3><p>​引用对象的实例方法，其实就引用类中的成员方法</p><ul><li><p>格式</p><p>对象::成员方法</p></li><li><p>范例</p><p>“HelloWorld”::toUpperCase</p><p>  String类中的方法：public String toUpperCase() 将此String所有字符转换为大写</p></li><li><p>练习描述</p><ul><li><p>定义一个类(PrintString)，里面定义一个方法</p><p>public void printUpper(String s)：把字符串参数变成大写的数据，然后在控制台输出</p></li><li><p>定义一个接口(Printer)，里面定义一个抽象方法</p><p>void printUpperCase(String s)</p></li><li><p>定义一个测试类(PrinterDemo)，在测试类中提供两个方法</p><ul><li>一个方法是：usePrinter(Printer p)</li><li>一个方法是主方法，在主方法中调用usePrinter方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintString</span> &#123;<br>    <span class="hljs-comment">//把字符串参数变成大写的数据，然后在控制台输出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printUpper</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> s.toUpperCase();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Printer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printUpperCase</span><span class="hljs-params">(String s)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrinterDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//Lambda简化写法</span><br>        usePrinter(s -&gt; System.out.println(s.toUpperCase()));<br><br>        <span class="hljs-comment">//引用对象的实例方法</span><br>        <span class="hljs-type">PrintString</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintString</span>();<br>        usePrinter(ps::printUpper);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">usePrinter</span><span class="hljs-params">(Printer p)</span> &#123;<br>        p.printUpperCase(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>使用说明</p><p>Lambda表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数</p></li></ul><h3 id="3-5引用类的实例方法【应用】"><a href="#3-5引用类的实例方法【应用】" class="headerlink" title="3.5引用类的实例方法【应用】"></a>3.5引用类的实例方法【应用】</h3><p>​引用类的实例方法，其实就是引用类中的成员方法</p><ul><li><p>格式</p><p>类名::成员方法</p></li><li><p>范例</p><p>String::substring</p><p>public String substring(int beginIndex,int endIndex) </p><p>从beginIndex开始到endIndex结束，截取字符串。返回一个子串，子串的长度为endIndex-beginIndex</p></li><li><p>练习描述</p><ul><li><p>定义一个接口(MyString)，里面定义一个抽象方法：</p><p>String mySubString(String s,int x,int y);</p></li><li><p>定义一个测试类(MyStringDemo)，在测试类中提供两个方法</p><ul><li>一个方法是：useMyString(MyString my)</li><li>一个方法是主方法，在主方法中调用useMyString方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyString</span> &#123;<br>    String <span class="hljs-title function_">mySubString</span><span class="hljs-params">(String s,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStringDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//Lambda简化写法</span><br>        useMyString((s,x,y) -&gt; s.substring(x,y));<br><br>        <span class="hljs-comment">//引用类的实例方法</span><br>        useMyString(String::substring);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useMyString</span><span class="hljs-params">(MyString my)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> my.mySubString(<span class="hljs-string">&quot;HelloWorld&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用说明</p><p>​    Lambda表达式被类的实例方法替代的时候<br>​    第一个参数作为调用者<br>​    后面的参数全部传递给该方法作为参数</p></li></ul><h3 id="3-6引用构造器【应用】"><a href="#3-6引用构造器【应用】" class="headerlink" title="3.6引用构造器【应用】"></a>3.6引用构造器【应用】</h3><p>​引用构造器，其实就是引用构造方法</p><ul><li><p>l格式</p><p>类名::new</p></li><li><p>范例</p><p>Student::new</p></li><li><p>练习描述</p><ul><li><p>定义一个类(Student)，里面有两个成员变量(name,age)</p><p>并提供无参构造方法和带参构造方法，以及成员变量对应的get和set方法</p></li><li><p>定义一个接口(StudentBuilder)，里面定义一个抽象方法</p><p>Student build(String name,int age);</p></li><li><p>定义一个测试类(StudentDemo)，在测试类中提供两个方法</p><ul><li>一个方法是：useStudentBuilder(StudentBuilder s)</li><li>一个方法是主方法，在主方法中调用useStudentBuilder方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentBuilder</span> &#123;<br>    Student <span class="hljs-title function_">build</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//Lambda简化写法</span><br>        useStudentBuilder((name,age) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name,age));<br><br>        <span class="hljs-comment">//引用构造器</span><br>        useStudentBuilder(Student::<span class="hljs-keyword">new</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useStudentBuilder</span><span class="hljs-params">(StudentBuilder sb)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> sb.build(<span class="hljs-string">&quot;林青霞&quot;</span>, <span class="hljs-number">30</span>);<br>        System.out.println(s.getName() + <span class="hljs-string">&quot;,&quot;</span> + s.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用说明</p><p>Lambda表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;1-不可变集合&quot;&gt;&lt;a href=&quot;#1-不可变集合&quot; class=&quot;headerlink&quot; title=&quot;1.不可变集合&quot;&gt;&lt;/a&gt;1.不可变集合&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是不可变集合&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>集合03</title>
    <link href="https://iexlee.github.io/24%E3%80%81%E9%9B%86%E5%90%8803.html"/>
    <id>https://iexlee.github.io/24%E3%80%81%E9%9B%86%E5%90%8803.html</id>
    <published>2022-06-01T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Map集合"><a href="#1-Map集合" class="headerlink" title="1.Map集合"></a>1.Map集合</h2><h3 id="1-1Map集合概述和特点【理解】"><a href="#1-1Map集合概述和特点【理解】" class="headerlink" title="1.1Map集合概述和特点【理解】"></a>1.1Map集合概述和特点【理解】</h3><ul><li><p>Map集合概述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;  K：键的类型；V：值的类型<br></code></pre></td></tr></table></figure></li><li><p>Map集合的特点</p><ul><li>双列集合,一个键对应一个值</li><li>键不可以重复,值可以重复</li></ul></li><li><p>Map集合的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br><br>        <span class="hljs-comment">//V put(K key, V value) 将指定的值与该映射中的指定键相关联</span><br>        map.put(<span class="hljs-string">&quot;itheima001&quot;</span>,<span class="hljs-string">&quot;林青霞&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima002&quot;</span>,<span class="hljs-string">&quot;张曼玉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima003&quot;</span>,<span class="hljs-string">&quot;王祖贤&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;itheima003&quot;</span>,<span class="hljs-string">&quot;柳岩&quot;</span>);<br><br>        <span class="hljs-comment">//输出集合对象</span><br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2Map集合的基本功能【应用】"><a href="#1-2Map集合的基本功能【应用】" class="headerlink" title="1.2Map集合的基本功能【应用】"></a>1.2Map集合的基本功能【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V   put(K key,V   value)</td><td>添加元素</td></tr><tr><td>V   remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void   clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br><br>        <span class="hljs-comment">//V put(K key,V value)：添加元素</span><br>        map.put(<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;郭靖&quot;</span>,<span class="hljs-string">&quot;黄蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;杨过&quot;</span>,<span class="hljs-string">&quot;小龙女&quot;</span>);<br><br>        <span class="hljs-comment">//V remove(Object key)：根据键删除键值对元素</span><br><span class="hljs-comment">//        System.out.println(map.remove(&quot;郭靖&quot;));</span><br><span class="hljs-comment">//        System.out.println(map.remove(&quot;郭襄&quot;));</span><br><br>        <span class="hljs-comment">//void clear()：移除所有的键值对元素</span><br><span class="hljs-comment">//        map.clear();</span><br><br>        <span class="hljs-comment">//boolean containsKey(Object key)：判断集合是否包含指定的键</span><br><span class="hljs-comment">//        System.out.println(map.containsKey(&quot;郭靖&quot;));</span><br><span class="hljs-comment">//        System.out.println(map.containsKey(&quot;郭襄&quot;));</span><br><br>        <span class="hljs-comment">//boolean isEmpty()：判断集合是否为空</span><br><span class="hljs-comment">//        System.out.println(map.isEmpty());</span><br><br>        <span class="hljs-comment">//int size()：集合的长度，也就是集合中键值对的个数</span><br>        System.out.println(map.size());<br><br>        <span class="hljs-comment">//输出集合对象</span><br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3Map集合的获取功能【应用】"><a href="#1-3Map集合的获取功能【应用】" class="headerlink" title="1.3Map集合的获取功能【应用】"></a>1.3Map集合的获取功能【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V   get(Object key)</td><td>根据键获取值</td></tr><tr><td>Set<K>   keySet()</td><td>获取所有键的集合</td></tr><tr><td>Collection<V>   values()</td><td>获取所有值的集合</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt;   entrySet()</td><td>获取所有键值对对象的集合</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        map.put(<span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;郭靖&quot;</span>, <span class="hljs-string">&quot;黄蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;杨过&quot;</span>, <span class="hljs-string">&quot;小龙女&quot;</span>);<br><br>        <span class="hljs-comment">//V get(Object key):根据键获取值</span><br><span class="hljs-comment">//        System.out.println(map.get(&quot;张无忌&quot;));</span><br><span class="hljs-comment">//        System.out.println(map.get(&quot;张三丰&quot;));</span><br><br>        <span class="hljs-comment">//Set&lt;K&gt; keySet():获取所有键的集合</span><br><span class="hljs-comment">//        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="hljs-comment">//        for(String key : keySet) &#123;</span><br><span class="hljs-comment">//            System.out.println(key);</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//Collection&lt;V&gt; values():获取所有值的集合</span><br>        Collection&lt;String&gt; values = map.values();<br>        <span class="hljs-keyword">for</span>(String value : values) &#123;<br>            System.out.println(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-4Map集合的遍历-方式1-【应用】"><a href="#1-4Map集合的遍历-方式1-【应用】" class="headerlink" title="1.4Map集合的遍历(方式1)【应用】"></a>1.4Map集合的遍历(方式1)【应用】</h3><ul><li><p>遍历思路</p><ul><li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul><li>把所有的丈夫给集中起来</li><li>遍历丈夫的集合，获取到每一个丈夫</li><li>根据丈夫去找对应的妻子</li></ul></li></ul></li><li><p>步骤分析</p><ul><li>获取所有键的集合。用keySet()方法实现</li><li>遍历键的集合，获取到每一个键。用增强for实现  </li><li>根据键去找值。用get(Object key)方法实现</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        map.put(<span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;郭靖&quot;</span>, <span class="hljs-string">&quot;黄蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;杨过&quot;</span>, <span class="hljs-string">&quot;小龙女&quot;</span>);<br><br>        <span class="hljs-comment">//获取所有键的集合。用keySet()方法实现</span><br>        Set&lt;String&gt; keySet = map.keySet();<br>        <span class="hljs-comment">//遍历键的集合，获取到每一个键。用增强for实现</span><br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<br>            <span class="hljs-comment">//根据键去找值。用get(Object key)方法实现</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;,&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-5Map集合的遍历-方式2-【应用】"><a href="#1-5Map集合的遍历-方式2-【应用】" class="headerlink" title="1.5Map集合的遍历(方式2)【应用】"></a>1.5Map集合的遍历(方式2)【应用】</h3><ul><li><p>遍历思路</p><ul><li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul><li>获取所有结婚证的集合</li><li>遍历结婚证的集合，得到每一个结婚证</li><li>根据结婚证获取丈夫和妻子</li></ul></li></ul></li><li><p>步骤分析</p><ul><li>获取所有键值对对象的集合<ul><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()：获取所有键值对对象的集合</li></ul></li><li>遍历键值对对象的集合，得到每一个键值对对象<ul><li>用增强for实现，得到每一个Map.Entry</li></ul></li><li>根据键值对对象获取键和值<ul><li>用getKey()得到键</li><li>用getValue()得到值</li></ul></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        map.put(<span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;郭靖&quot;</span>, <span class="hljs-string">&quot;黄蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;杨过&quot;</span>, <span class="hljs-string">&quot;小龙女&quot;</span>);<br><br>        <span class="hljs-comment">//获取所有键值对对象的集合</span><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();<br>        <span class="hljs-comment">//遍历键值对对象的集合，得到每一个键值对对象</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; me : entrySet) &#123;<br>            <span class="hljs-comment">//根据键值对对象获取键和值</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> me.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> me.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;,&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-HashMap集合"><a href="#2-HashMap集合" class="headerlink" title="2.HashMap集合"></a>2.HashMap集合</h2><h3 id="2-1HashMap集合概述和特点【理解】"><a href="#2-1HashMap集合概述和特点【理解】" class="headerlink" title="2.1HashMap集合概述和特点【理解】"></a>2.1HashMap集合概述和特点【理解】</h3><ul><li>HashMap底层是哈希表结构的</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li>如果键要存储的是自定义对象，需要重写hashCode和equals方法</li></ul><h3 id="2-2HashMap集合应用案例【应用】"><a href="#2-2HashMap集合应用案例【应用】" class="headerlink" title="2.2HashMap集合应用案例【应用】"></a>2.2HashMap集合应用案例【应用】</h3><ul><li><p>案例需求</p><ul><li>创建一个HashMap集合，键是学生对象(Student)，值是居住地 (String)。存储多个元素，并遍历。</li><li>要求保证键的唯一性：如果学生对象的成员变量值相同，我们就认为是同一个对象</li></ul></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-literal">null</span> ? name.equals(student.name) : student.name == <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> name != <span class="hljs-literal">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建HashMap集合对象</span><br>        HashMap&lt;Student, String&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Student, String&gt;();<br><br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林青霞&quot;</span>, <span class="hljs-number">30</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张曼玉&quot;</span>, <span class="hljs-number">35</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王祖贤&quot;</span>, <span class="hljs-number">33</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王祖贤&quot;</span>, <span class="hljs-number">33</span>);<br><br>        <span class="hljs-comment">//把学生添加到集合</span><br>        hm.put(s1, <span class="hljs-string">&quot;西安&quot;</span>);<br>        hm.put(s2, <span class="hljs-string">&quot;武汉&quot;</span>);<br>        hm.put(s3, <span class="hljs-string">&quot;郑州&quot;</span>);<br>        hm.put(s4, <span class="hljs-string">&quot;北京&quot;</span>);<br><br>        <span class="hljs-comment">//遍历集合</span><br>        Set&lt;Student&gt; keySet = hm.keySet();<br>        <span class="hljs-keyword">for</span> (Student key : keySet) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> hm.get(key);<br>            System.out.println(key.getName() + <span class="hljs-string">&quot;,&quot;</span> + key.getAge() + <span class="hljs-string">&quot;,&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-TreeMap集合"><a href="#3-TreeMap集合" class="headerlink" title="3.TreeMap集合"></a>3.TreeMap集合</h2><h3 id="3-1TreeMap集合概述和特点【理解】"><a href="#3-1TreeMap集合概述和特点【理解】" class="headerlink" title="3.1TreeMap集合概述和特点【理解】"></a>3.1TreeMap集合概述和特点【理解】</h3><ul><li>TreeMap底层是红黑树结构</li><li>依赖自然排序或者比较器排序,对键进行排序</li><li>如果键存储的是自定义对象,需要实现Comparable接口或者在创建TreeMap对象时候给出比较器排序规则</li></ul><h3 id="3-2TreeMap集合应用案例【应用】"><a href="#3-2TreeMap集合应用案例【应用】" class="headerlink" title="3.2TreeMap集合应用案例【应用】"></a>3.2TreeMap集合应用案例【应用】</h3><ul><li><p>案例需求</p><ul><li>创建一个TreeMap集合,键是学生对象(Student),值是籍贯(String),学生属性姓名和年龄,按照年龄进行排序并遍历</li><li>要求按照学生的年龄进行排序,如果年龄相同则按照姓名进行排序</li></ul></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-comment">//按照年龄进行排序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> o.getAge() - <span class="hljs-built_in">this</span>.getAge();<br>        <span class="hljs-comment">//次要条件，按照姓名排序。</span><br>        result = result == <span class="hljs-number">0</span> ? o.getName().compareTo(<span class="hljs-built_in">this</span>.getName()) : result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// 创建TreeMap集合对象</span><br>        TreeMap&lt;Student,String&gt; tm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>      <br><span class="hljs-comment">// 创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaohei&quot;</span>,<span class="hljs-number">23</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;dapang&quot;</span>,<span class="hljs-number">22</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">22</span>);<br>      <br><span class="hljs-comment">// 将学生对象添加到TreeMap集合中</span><br>        tm.put(s1,<span class="hljs-string">&quot;江苏&quot;</span>);<br>        tm.put(s2,<span class="hljs-string">&quot;北京&quot;</span>);<br>        tm.put(s3,<span class="hljs-string">&quot;天津&quot;</span>);<br>      <br><span class="hljs-comment">// 遍历TreeMap集合,打印每个学生的信息</span><br>        tm.forEach(<br>                (Student key, String value)-&gt;&#123;<br>                    System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>                &#125;<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Map集合&quot;&gt;&lt;a href=&quot;#1-Map集合&quot; class=&quot;headerlink&quot; title=&quot;1.Map集合&quot;&gt;&lt;/a&gt;1.Map集合&lt;/h2&gt;&lt;h3 id=&quot;1-1Map集合概述和特点【理解】&quot;&gt;&lt;a href=&quot;#1-1Map集合概述和特点【理解</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>集合02</title>
    <link href="https://iexlee.github.io/23%E3%80%81%E9%9B%86%E5%90%8802.html"/>
    <id>https://iexlee.github.io/23%E3%80%81%E9%9B%86%E5%90%8802.html</id>
    <published>2022-05-29T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-泛型"><a href="#1-泛型" class="headerlink" title="1.泛型"></a>1.泛型</h2><h3 id="1-1泛型概述"><a href="#1-1泛型概述" class="headerlink" title="1.1泛型概述"></a>1.1泛型概述</h3><ul><li><p>泛型的介绍</p><p>​泛型是JDK5中引入的特性，它提供了编译时类型安全检测机制</p></li><li><p>泛型的好处</p><ol><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ol></li><li><p>泛型的定义格式</p><ul><li>&lt;类型&gt;: 指定一种类型的格式.尖括号里面可以任意书写,一般只写一个字母.例如: <E> <T></li><li>&lt;类型1,类型2…&gt;: 指定多种类型的格式,多种类型之间用逗号隔开.例如: &lt;E,T&gt; &lt;K,V&gt;</li></ul></li></ul><h2 id="2-Set集合"><a href="#2-Set集合" class="headerlink" title="2.Set集合"></a>2.Set集合</h2><h3 id="2-1Set集合概述和特点【应用】"><a href="#2-1Set集合概述和特点【应用】" class="headerlink" title="2.1Set集合概述和特点【应用】"></a>2.1Set集合概述和特点【应用】</h3><ul><li>不可以存储重复元素</li><li>没有索引,不能使用普通for循环遍历</li></ul><h3 id="2-2Set集合的使用【应用】"><a href="#2-2Set集合的使用【应用】" class="headerlink" title="2.2Set集合的使用【应用】"></a>2.2Set集合的使用【应用】</h3><p>存储字符串并遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySet1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建集合对象</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>      <span class="hljs-comment">//添加元素</span><br>        set.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br><br><span class="hljs-comment">//        for (int i = 0; i &lt; set.size(); i++) &#123;</span><br><span class="hljs-comment">//            //Set集合是没有索引的，所以不能使用通过索引获取元素的方法</span><br><span class="hljs-comment">//        &#125;</span><br>      <br>      <span class="hljs-comment">//遍历集合</span><br>        Iterator&lt;String&gt; it = set.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> it.next();<br>            System.out.println(s);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : set) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-TreeSet集合"><a href="#3-TreeSet集合" class="headerlink" title="3.TreeSet集合"></a>3.TreeSet集合</h2><h3 id="3-1TreeSet集合概述和特点【应用】"><a href="#3-1TreeSet集合概述和特点【应用】" class="headerlink" title="3.1TreeSet集合概述和特点【应用】"></a>3.1TreeSet集合概述和特点【应用】</h3><ul><li>不可以存储重复元素</li><li>没有索引</li><li>可以将元素按照规则进行排序<ul><li>TreeSet()：根据其元素的自然排序进行排序</li><li>TreeSet(Comparator comparator) ：根据指定的比较器进行排序</li></ul></li></ul><h3 id="3-2TreeSet集合基本使用【应用】"><a href="#3-2TreeSet集合基本使用【应用】" class="headerlink" title="3.2TreeSet集合基本使用【应用】"></a>3.2TreeSet集合基本使用【应用】</h3><p>存储Integer类型的整数并遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeSetDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        TreeSet&lt;Integer&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;Integer&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        ts.add(<span class="hljs-number">10</span>);<br>        ts.add(<span class="hljs-number">40</span>);<br>        ts.add(<span class="hljs-number">30</span>);<br>        ts.add(<span class="hljs-number">50</span>);<br>        ts.add(<span class="hljs-number">20</span>);<br><br>        ts.add(<span class="hljs-number">30</span>);<br><br>        <span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-keyword">for</span>(Integer i : ts) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3自然排序Comparable的使用【应用】"><a href="#3-3自然排序Comparable的使用【应用】" class="headerlink" title="3.3自然排序Comparable的使用【应用】"></a>3.3自然排序Comparable的使用【应用】</h3><ul><li><p>案例需求</p><ul><li>存储学生对象并遍历，创建TreeSet集合使用无参构造方法</li><li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li></ul></li><li><p>实现步骤</p><ol><li>使用空参构造创建TreeSet集合<ul><li>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的</li></ul></li><li>自定义的Student类实现Comparable接口<ul><li>自然排序，就是让元素所属的类实现Comparable接口，重写compareTo(T o)方法</li></ul></li><li>重写接口中的compareTo方法<ul><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul></li></ol></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-comment">//按照对象的年龄进行排序</span><br>        <span class="hljs-comment">//主要判断条件: 按照年龄从小到大排序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.age - o.age;<br>        <span class="hljs-comment">//次要判断条件: 年龄相同时，按照姓名的字母顺序排序</span><br>        result = result == <span class="hljs-number">0</span> ? <span class="hljs-built_in">this</span>.name.compareTo(o.getName()) : result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTreeSet2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>    <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">28</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">27</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">29</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">28</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;qianqi&quot;</span>,<span class="hljs-number">30</span>);<br><span class="hljs-comment">//把学生添加到集合</span><br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br>        ts.add(s4);<br>        ts.add(s5);<br><span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-keyword">for</span> (Student student : ts) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-4比较器排序Comparator的使用【应用】"><a href="#3-4比较器排序Comparator的使用【应用】" class="headerlink" title="3.4比较器排序Comparator的使用【应用】"></a>3.4比较器排序Comparator的使用【应用】</h3><ul><li><p>案例需求</p><ul><li>存储老师对象并遍历，创建TreeSet集合使用带参构造方法</li><li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li></ul></li><li><p>实现步骤</p><ul><li>用TreeSet集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序的</li><li>比较器排序，就是让集合构造方法接收Comparator的实现类对象，重写compare(T o1,T o2)方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul></li><li><p>代码实现</p><p>老师类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTreeSet4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建集合对象</span><br>        TreeSet&lt;Teacher&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Teacher&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Teacher o1, Teacher o2)</span> &#123;<br>                <span class="hljs-comment">//o1表示现在要存入的那个元素</span><br>                <span class="hljs-comment">//o2表示已经存入到集合中的元素</span><br>              <br>                <span class="hljs-comment">//主要条件</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> o1.getAge() - o2.getAge();<br>                <span class="hljs-comment">//次要条件</span><br>                result = result == <span class="hljs-number">0</span> ? o1.getName().compareTo(o2.getName()) : result;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//创建老师对象</span><br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">22</span>);<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">24</span>);<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-number">24</span>);<br><span class="hljs-comment">//把老师添加到集合</span><br>        ts.add(t1);<br>        ts.add(t2);<br>        ts.add(t3);<br>        ts.add(t4);<br><span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-keyword">for</span> (Teacher teacher : ts) &#123;<br>            System.out.println(teacher);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-5两种比较方式总结【理解】"><a href="#3-5两种比较方式总结【理解】" class="headerlink" title="3.5两种比较方式总结【理解】"></a>3.5两种比较方式总结【理解】</h3><ul><li>两种比较方式小结<ul><li>自然排序: 自定义类实现Comparable接口,重写compareTo方法,根据返回值进行排序</li><li>比较器排序: 创建TreeSet对象的时候传递Comparator的实现类对象,重写compare方法,根据返回值进行排序</li><li>在使用的时候,默认使用自然排序,当自然排序不满足现在的需求时,必须使用比较器排序</li></ul></li><li>两种方式中关于返回值的规则<ul><li>如果返回值为负数，表示当前存入的元素是较小值，存左边</li><li>如果返回值为0，表示当前存入的元素跟集合中元素重复了，不存</li><li>如果返回值为正数，表示当前存入的元素是较大值，存右边</li></ul></li></ul><h2 id="4-数据结构"><a href="#4-数据结构" class="headerlink" title="4.数据结构"></a>4.数据结构</h2><h3 id="4-1二叉树【理解】"><a href="#4-1二叉树【理解】" class="headerlink" title="4.1二叉树【理解】"></a>4.1二叉树【理解】</h3><ul><li><p>二叉树的特点</p><ul><li>二叉树中,任意一个节点的度要小于等于2<ul><li>节点: 在树结构中,每一个元素称之为节点</li><li>度: 每一个节点的子节点数量称之为度</li></ul></li></ul></li><li><p>二叉树结构图</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/01_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="01_二叉树结构图"></p></li></ul><h3 id="4-2二叉查找树【理解】"><a href="#4-2二叉查找树【理解】" class="headerlink" title="4.2二叉查找树【理解】"></a>4.2二叉查找树【理解】</h3><ul><li><p>二叉查找树的特点</p><ul><li>二叉查找树,又称二叉排序树或者二叉搜索树</li><li>每一个节点上最多有两个子节点</li><li>左子树上所有节点的值都小于根节点的值</li><li>右子树上所有节点的值都大于根节点的值</li></ul></li><li><p>二叉查找树结构图</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/02_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="02_二叉查找树结构图"></p></li><li><p>二叉查找树和二叉树对比结构图</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/03_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="03_二叉查找树和二叉树对比结构图"></p></li><li><p>二叉查找树添加节点规则</p><ul><li>小的存左边</li><li>大的存右边</li><li>一样的不存</li></ul><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/04_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E8%A7%84%E5%88%99.png" alt="04_二叉查找树添加节点规则"></p></li></ul><h3 id="4-3平衡二叉树【理解】"><a href="#4-3平衡二叉树【理解】" class="headerlink" title="4.3平衡二叉树【理解】"></a>4.3平衡二叉树【理解】</h3><ul><li><p>平衡二叉树的特点</p><ul><li>二叉树左右两个子树的高度差不超过1</li><li>任意节点的左右两个子树都是一颗平衡二叉树</li></ul></li><li><p>平衡二叉树旋转</p><ul><li><p>旋转触发时机</p><ul><li>当添加一个节点之后,该树不再是一颗平衡二叉树</li></ul></li><li><p>左旋</p><ul><li>就是将根节点的右侧往左拉,原先的右子节点变成新的父节点,并把多余的左子节点出让,给已经降级的根节点当右子节点</li></ul><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/05_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E6%97%8B01.png" alt="05_平衡二叉树左旋01"></p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/05_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E6%97%8B02.png" alt="05_平衡二叉树左旋02"></p></li><li><p>右旋</p><ul><li><p>就是将根节点的左侧往右拉,左子节点变成了新的父节点,并把多余的右子节点出让,给已经降级根节点当左子节点</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/06_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B01.png" alt="06_平衡二叉树右旋01"></p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/06_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B02.png" alt="06_平衡二叉树右旋02"></p></li></ul></li></ul></li><li><p>平衡二叉树和二叉查找树对比结构图</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/07_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="07_平衡二叉树和二叉查找树对比结构图"></p></li><li><p>平衡二叉树旋转的四种情况</p><ul><li><p>左左</p><ul><li><p>左左: 当根节点左子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行右旋即可</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/08_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%B7%A6.png" alt="08_平衡二叉树左左"></p></li></ul></li><li><p>左右</p><ul><li><p>左右: 当根节点左子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在左子树对应的节点位置进行左旋,在对整体进行右旋</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/09_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%8F%B3.png" alt="09_平衡二叉树左右"></p></li></ul></li><li><p>右右</p><ul><li><p>右右: 当根节点右子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行左旋即可</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/10_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%8F%B3.png" alt="10_平衡二叉树右右"></p></li></ul></li><li><p>右左</p><ul><li><p>右左:当根节点右子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在右子树对应的节点位置进行右旋,在对整体进行左旋</p><p><img src="/medias/23%E3%80%81img_%E9%9B%86%E5%90%8802/11_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%B7%A6.png" alt="11_平衡二叉树右左"></p></li></ul></li></ul></li></ul><h3 id="4-3红黑树【理解】"><a href="#4-3红黑树【理解】" class="headerlink" title="4.3红黑树【理解】"></a>4.3红黑树【理解】</h3><ul><li><p>红黑树的特点</p><ul><li>平衡二叉B树</li><li>每一个节点可以是红或者黑</li><li>红黑树不是高度平衡的,它的平衡是通过”自己的红黑规则”进行实现的</li></ul></li><li><p>红黑树的红黑规则有哪些</p><ol><li><p>每一个节点或是红色的,或者是黑色的</p></li><li><p>根节点必须是黑色</p></li><li><p>如果一个节点没有子节点或者父节点,则该节点相应的指针属性值为Nil,这些Nil视为叶节点,每个叶节点(Nil)是黑色的</p></li><li><p>如果某一个节点是红色,那么它的子节点必须是黑色(不能出现两个红色节点相连 的情况)</p></li><li><p>对每一个节点,从该节点到其所有后代叶节点的简单路径上,均包含相同数目的黑色节点</p><p><img src="/img/12_%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="12_红黑树结构图"></p></li></ol></li><li><p>红黑树添加节点的默认颜色</p><ul><li><p>添加节点时,默认为红色,效率高</p><p><img src="/img/13_%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E9%A2%9C%E8%89%B2.png" alt="13_红黑树添加节点颜色"></p></li></ul></li><li><p>红黑树添加节点后如何保持红黑规则</p><ul><li>根节点位置<ul><li>直接变为黑色</li></ul></li><li>非根节点位置<ul><li>父节点为黑色<ul><li>不需要任何操作,默认红色即可</li></ul></li><li>父节点为红色<ul><li>叔叔节点为红色<ol><li>将”父节点”设为黑色,将”叔叔节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>如果”祖父节点”为根节点,则将根节点再次变成黑色</li></ol></li><li>叔叔节点为黑色<ol><li>将”父节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>以”祖父节点”为支点进行旋转</li></ol></li></ul></li></ul></li></ul></li></ul><p>##5.HashSet集合</p><h3 id="5-1HashSet集合概述和特点【应用】"><a href="#5-1HashSet集合概述和特点【应用】" class="headerlink" title="5.1HashSet集合概述和特点【应用】"></a>5.1HashSet集合概述和特点【应用】</h3><ul><li>底层数据结构是哈希表</li><li>存取无序</li><li>不可以存储重复元素</li><li>没有索引,不能使用普通for循环遍历</li></ul><h3 id="5-2HashSet集合的基本应用【应用】"><a href="#5-2HashSet集合的基本应用【应用】" class="headerlink" title="5.2HashSet集合的基本应用【应用】"></a>5.2HashSet集合的基本应用【应用】</h3><p>存储字符串并遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        HashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        set.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        <span class="hljs-comment">//不包含重复元素的集合</span><br>        set.add(<span class="hljs-string">&quot;world&quot;</span>);<br><br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">for</span>(String s : set) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3哈希值【理解】"><a href="#5-3哈希值【理解】" class="headerlink" title="5.3哈希值【理解】"></a>5.3哈希值【理解】</h3><ul><li><p>哈希值简介</p><p>​是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值</p></li><li><p>如何获取哈希值</p><p>​Object类中的public int hashCode()：返回对象的哈希码值</p></li><li><p>哈希值的特点</p><ul><li>同一个对象多次调用hashCode()方法返回的哈希值是相同的</li><li>默认情况下，不同对象的哈希值是不同的。而重写hashCode()方法，可以实现让不同对象的哈希值相同</li></ul></li></ul><h3 id="5-4哈希表结构【理解】"><a href="#5-4哈希表结构【理解】" class="headerlink" title="5.4哈希表结构【理解】"></a>5.4哈希表结构【理解】</h3><ul><li><p>JDK1.8以前</p><p>​数组 + 链表</p><p><img src="F:/JavaSE%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%88B%E7%AB%99%EF%BC%89/day23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B&Set&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/%E7%AC%94%E8%AE%B0/img/14_JKD8%E4%BB%A5%E5%89%8D%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="14_JKD8以前哈希表"></p></li><li><p>JDK1.8以后</p><ul><li><p>节点个数少于等于8个</p><p>​数组 + 链表</p></li><li><p>节点个数多于8个</p><p>​数组 + 红黑树</p></li></ul><p><img src="F:/JavaSE%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%88B%E7%AB%99%EF%BC%89/day23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B&Set&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/%E7%AC%94%E8%AE%B0/img/15_JKD8%E4%BB%A5%E5%90%8E%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="15_JKD8以后哈希表"></p></li></ul><h3 id="5-5HashSet集合存储学生对象并遍历【应用】"><a href="#5-5HashSet集合存储学生对象并遍历【应用】" class="headerlink" title="5.5HashSet集合存储学生对象并遍历【应用】"></a>5.5HashSet集合存储学生对象并遍历【应用】</h3><ul><li><p>案例需求</p><ul><li>创建一个存储学生对象的集合，存储多个学生对象，使用程序实现在控制台遍历该集合</li><li>要求：学生对象的成员变量值相同，我们就认为是同一个对象</li></ul></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-literal">null</span> ? name.equals(student.name) : student.name == <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> name != <span class="hljs-literal">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建HashSet集合对象</span><br>        HashSet&lt;Student&gt; hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Student&gt;();<br><br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林青霞&quot;</span>, <span class="hljs-number">30</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张曼玉&quot;</span>, <span class="hljs-number">35</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王祖贤&quot;</span>, <span class="hljs-number">33</span>);<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王祖贤&quot;</span>, <span class="hljs-number">33</span>);<br><br>        <span class="hljs-comment">//把学生添加到集合</span><br>        hs.add(s1);<br>        hs.add(s2);<br>        hs.add(s3);<br>        hs.add(s4);<br><br>        <span class="hljs-comment">//遍历集合(增强for)</span><br>        <span class="hljs-keyword">for</span> (Student s : hs) &#123;<br>            System.out.println(s.getName() + <span class="hljs-string">&quot;,&quot;</span> + s.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>总结</p><p>​HashSet集合存储自定义类型元素,要想实现元素的唯一,要求必须重写hashCode方法和equals方法</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-泛型&quot;&gt;&lt;a href=&quot;#1-泛型&quot; class=&quot;headerlink&quot; title=&quot;1.泛型&quot;&gt;&lt;/a&gt;1.泛型&lt;/h2&gt;&lt;h3 id=&quot;1-1泛型概述&quot;&gt;&lt;a href=&quot;#1-1泛型概述&quot; class=&quot;headerlink&quot; title=&quot;1.1</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>集合01</title>
    <link href="https://iexlee.github.io/22%E3%80%81%E9%9B%86%E5%90%8801.html"/>
    <id>https://iexlee.github.io/22%E3%80%81%E9%9B%86%E5%90%8801.html</id>
    <published>2022-05-22T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Collection集合"><a href="#1-Collection集合" class="headerlink" title="1.Collection集合"></a>1.Collection集合</h2><h3 id="1-1数组和集合的区别【理解】"><a href="#1-1数组和集合的区别【理解】" class="headerlink" title="1.1数组和集合的区别【理解】"></a>1.1数组和集合的区别【理解】</h3><ul><li><p>相同点</p><p>都是容器,可以存储多个数据</p></li><li><p>不同点</p><ul><li><p>数组的长度是不可变的,集合的长度是可变的</p></li><li><p>数组可以存基本数据类型和引用数据类型</p><p>集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类</p></li></ul></li></ul><h3 id="1-2集合类体系结构【理解】"><a href="#1-2集合类体系结构【理解】" class="headerlink" title="1.2集合类体系结构【理解】"></a>1.2集合类体系结构【理解】</h3><p><img src="/medias/22%E3%80%81img_%E9%9B%86%E5%90%8801/01_%E9%9B%86%E5%90%88%E7%B1%BB%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="01_集合类体系结构图"></p><h3 id="1-3Collection-集合概述和使用【应用】"><a href="#1-3Collection-集合概述和使用【应用】" class="headerlink" title="1.3Collection 集合概述和使用【应用】"></a>1.3Collection 集合概述和使用【应用】</h3><ul><li><p>Collection集合概述</p><ul><li>是单例集合的顶层接口,它表示一组对象,这些对象也称为Collection的元素</li><li>JDK 不提供此接口的任何直接实现.它提供更具体的子接口(如Set和List)实现</li></ul></li><li><p>创建Collection集合的对象</p><ul><li>多态的方式</li><li>具体的实现类ArrayList</li></ul></li><li><p>Collection集合常用方法</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">boolean add(E e)</td><td align="left">添加元素</td></tr><tr><td align="left">boolean remove(Object o)</td><td align="left">从集合中移除指定的元素</td></tr><tr><td align="left">boolean removeIf(Object o)</td><td align="left">根据条件进行移除</td></tr><tr><td align="left">void   clear()</td><td align="left">清空集合中的元素</td></tr><tr><td align="left">boolean contains(Object o)</td><td align="left">判断集合中是否存在指定的元素</td></tr><tr><td align="left">boolean isEmpty()</td><td align="left">判断集合是否为空</td></tr><tr><td align="left">int   size()</td><td align="left">集合的长度，也就是集合中元素的个数</td></tr></tbody></table></li></ul><h3 id="1-4Collection集合的遍历【应用】"><a href="#1-4Collection集合的遍历【应用】" class="headerlink" title="1.4Collection集合的遍历【应用】"></a>1.4Collection集合的遍历【应用】</h3><ul><li><p>迭代器介绍</p><ul><li>迭代器,集合的专用遍历方式</li><li>Iterator<E> iterator(): 返回此集合中元素的迭代器,通过集合对象的iterator()方法得到</li></ul></li><li><p>Iterator中的常用方法</p><p>​boolean hasNext(): 判断当前位置是否有元素可以被取出<br>​E next(): 获取当前位置的元素,将迭代器对象移向下一个索引位置</p></li><li><p>Collection集合的遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IteratorDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        c.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;javaee&quot;</span>);<br><br>        <span class="hljs-comment">//Iterator&lt;E&gt; iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</span><br>        Iterator&lt;String&gt; it = c.iterator();<br><br>        <span class="hljs-comment">//用while循环改进元素的判断和获取</span><br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> it.next();<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代器中删除的方法</p><p>​void remove(): 删除迭代器对象当前指向的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IteratorDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> it.next();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;b&quot;</span>.equals(s))&#123;<br>                <span class="hljs-comment">//指向谁,那么此时就删除谁.</span><br>                it.remove();<br>            &#125;<br>        &#125;<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-5增强for循环【应用】"><a href="#1-5增强for循环【应用】" class="headerlink" title="1.5增强for循环【应用】"></a>1.5增强for循环【应用】</h3><ul><li><p>介绍</p><ul><li>它是JDK5之后出现的,其内部原理是一个Iterator迭代器</li><li>实现Iterable接口的类才可以使用迭代器和增强for</li><li>简化数组和Collection集合的遍历</li></ul></li><li><p>格式</p><p>​for(集合&#x2F;数组中元素的数据类型 变量名 :  集合&#x2F;数组名) {</p><p>​&#x2F;&#x2F; 已经将当前遍历到的元素封装到变量中了,直接使用变量即可</p><p>​}</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCollectonDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;e&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;f&quot;</span>);<br><br>        <span class="hljs-comment">//1,数据类型一定是集合或者数组中元素的类型</span><br>        <span class="hljs-comment">//2,str仅仅是一个变量名而已,在循环的过程中,依次表示集合或者数组中的每一个元素</span><br>        <span class="hljs-comment">//3,list就是要遍历的集合或者数组</span><br>        <span class="hljs-keyword">for</span>(String str : list)&#123;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2.List集合"></a>2.List集合</h2><h3 id="2-1List集合的概述和特点【记忆】"><a href="#2-1List集合的概述和特点【记忆】" class="headerlink" title="2.1List集合的概述和特点【记忆】"></a>2.1List集合的概述和特点【记忆】</h3><ul><li>List集合的概述<ul><li>有序集合,这里的有序指的是存取顺序</li><li>用户可以精确控制列表中每个元素的插入位置,用户可以通过整数索引访问元素,并搜索列表中的元素</li><li>与Set集合不同,列表通常允许重复的元素</li></ul></li><li>List集合的特点<ul><li>存取有序</li><li>可以重复</li><li>有索引</li></ul></li></ul><h3 id="2-2List集合的特有方法【应用】"><a href="#2-2List集合的特有方法【应用】" class="headerlink" title="2.2List集合的特有方法【应用】"></a>2.2List集合的特有方法【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>void add(int index,E   element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int   index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E   element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int   index)</td><td>返回指定索引处的元素</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        <span class="hljs-comment">//method1(list);</span><br>        <span class="hljs-comment">//method2(list);</span><br>        <span class="hljs-comment">//method3(list);</span><br>        <span class="hljs-comment">//method4(list);</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method4</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-comment">//        E get(int index)返回指定索引处的元素</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method3</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-comment">//        E set(int index,E element)修改指定索引处的元素，返回被修改的元素</span><br>        <span class="hljs-comment">//被替换的那个元素,在集合中就不存在了.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(result);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-comment">//        E remove(int index)删除指定索引处的元素，返回被删除的元素</span><br>        <span class="hljs-comment">//在List集合中有两个删除的方法</span><br>        <span class="hljs-comment">//第一个 删除指定的元素,返回值表示当前元素是否删除成功</span><br>        <span class="hljs-comment">//第二个 删除指定索引的元素,返回值表示实际删除的元素</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-comment">//        void add(int index,E element)在此集合中的指定位置插入指定的元素</span><br>        <span class="hljs-comment">//原来位置上的元素往后挪一个索引.</span><br>        list.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3.数据结构"></a>3.数据结构</h2><h3 id="3-1数据结构之栈和队列【记忆】"><a href="#3-1数据结构之栈和队列【记忆】" class="headerlink" title="3.1数据结构之栈和队列【记忆】"></a>3.1数据结构之栈和队列【记忆】</h3><ul><li><p>栈结构</p><p>​先进后出</p></li><li><p>队列结构</p><p>​先进先出</p></li></ul><h3 id="3-2数据结构之数组和链表【记忆】"><a href="#3-2数据结构之数组和链表【记忆】" class="headerlink" title="3.2数据结构之数组和链表【记忆】"></a>3.2数据结构之数组和链表【记忆】</h3><ul><li><p>数组结构</p><p>​查询快、增删慢</p></li><li><p>队列结构</p><p>​查询慢、增删快</p></li></ul><h2 id="4-List集合的实现类"><a href="#4-List集合的实现类" class="headerlink" title="4.List集合的实现类"></a>4.List集合的实现类</h2><h3 id="4-1List集合子类的特点【记忆】"><a href="#4-1List集合子类的特点【记忆】" class="headerlink" title="4.1List集合子类的特点【记忆】"></a>4.1List集合子类的特点【记忆】</h3><ul><li><p>ArrayList集合</p><p>​底层是数组结构实现，查询快、增删慢</p></li><li><p>LinkedList集合</p><p>​底层是链表结构实现，查询慢、增删快</p></li></ul><h3 id="4-2LinkedList集合的特有功能【应用】"><a href="#4-2LinkedList集合的特有功能【应用】" class="headerlink" title="4.2LinkedList集合的特有功能【应用】"></a>4.2LinkedList集合的特有功能【应用】</h3><ul><li><p>特有方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public E getFirst()</td><td>返回此列表中的第一个元素</td></tr><tr><td>public   E getLast()</td><td>返回此列表中的最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public   E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedListDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><span class="hljs-comment">//        public void addFirst(E e)在该列表开头插入指定的元素</span><br>        <span class="hljs-comment">//method1(list);</span><br><br><span class="hljs-comment">//        public void addLast(E e)将指定的元素追加到此列表的末尾</span><br>        <span class="hljs-comment">//method2(list);</span><br><br><span class="hljs-comment">//        public E getFirst()返回此列表中的第一个元素</span><br><span class="hljs-comment">//        public E getLast()返回此列表中的最后一个元素</span><br>        <span class="hljs-comment">//method3(list);</span><br><br><span class="hljs-comment">//        public E removeFirst()从此列表中删除并返回第一个元素</span><br><span class="hljs-comment">//        public E removeLast()从此列表中删除并返回最后一个元素</span><br>        <span class="hljs-comment">//method4(list);</span><br>      <br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method4</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> list.removeFirst();<br>        System.out.println(first);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> list.removeLast();<br>        System.out.println(last);<br><br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method3</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> list.getFirst();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> list.getLast();<br>        System.out.println(first);<br>        System.out.println(last);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> &#123;<br>        list.addLast(<span class="hljs-string">&quot;www&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span> &#123;<br>        list.addFirst(<span class="hljs-string">&quot;qqq&quot;</span>);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Collection集合&quot;&gt;&lt;a href=&quot;#1-Collection集合&quot; class=&quot;headerlink&quot; title=&quot;1.Collection集合&quot;&gt;&lt;/a&gt;1.Collection集合&lt;/h2&gt;&lt;h3 id=&quot;1-1数组和集合的区别【理解】&quot;&gt;</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://iexlee.github.io/21%E3%80%81%E7%AE%97%E6%B3%95.html"/>
    <id>https://iexlee.github.io/21%E3%80%81%E7%AE%97%E6%B3%95.html</id>
    <published>2022-05-16T01:00:00.000Z</published>
    <updated>2023-08-19T15:53:01.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的七种查找算法："><a href="#常见的七种查找算法：" class="headerlink" title="常见的七种查找算法："></a>常见的七种查找算法：</h1><p>​数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据结构息息相关。今天的讲义中会涉及部分数据结构的专业名词，如果各位铁粉有疑惑，可以先看一下哥们后面录制的数据结构，再回头看算法。</p><h2 id="1-基本查找"><a href="#1-基本查找" class="headerlink" title="1. 基本查找"></a>1. 基本查找</h2><p>​也叫做顺序查找</p><p>​        说明：顺序查找适合于存储结构为数组或者链表。</p><p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线的一端开始，顺序扫描，依次将遍历到的结点与要查找的值相比较，若相等则表示查找成功；若遍历结束仍没有找到相同的，表示查找失败。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A01_BasicSearchDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//基本查找/顺序查找</span><br>        <span class="hljs-comment">//核心：</span><br>        <span class="hljs-comment">//从0索引开始挨个往后查找</span><br><br>        <span class="hljs-comment">//需求：定义一个方法利用基本查找，查询某个元素是否存在</span><br>        <span class="hljs-comment">//数据如下：&#123;131, 127, 147, 81, 103, 23, 7, 79&#125;</span><br><br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">131</span>, <span class="hljs-number">127</span>, <span class="hljs-number">147</span>, <span class="hljs-number">81</span>, <span class="hljs-number">103</span>, <span class="hljs-number">23</span>, <span class="hljs-number">7</span>, <span class="hljs-number">79</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">82</span>;<br>        System.out.println(basicSearch(arr, number));<br><br>    &#125;<br><br>    <span class="hljs-comment">//参数：</span><br>    <span class="hljs-comment">//一：数组</span><br>    <span class="hljs-comment">//二：要查找的元素</span><br><br>    <span class="hljs-comment">//返回值：</span><br>    <span class="hljs-comment">//元素是否存在</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">basicSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> number)</span>&#123;<br>        <span class="hljs-comment">//利用基本查找来查找number在数组中是否存在</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[i] == number)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h2><p>​也叫做折半查找</p><p>说明：元素必须是有序的，从小到大，或者从大到小都是可以的。</p><p>如果是无序的，也可以先进行排序。但是排序之后，会改变原有数据的顺序，查找出来元素位置跟原来的元素可能是不一样的，所以排序之后再查找只能判断当前数据是否在容器当中，返回的索引无实际的意义。</p><p>　　<strong>基本思想</strong>：也称为是折半查找，属于有序查找算法。用给定值先与中间结点比较。比较完之后有三种情况：</p><ul><li><p>相等</p><p>说明找到了</p></li><li><p>要查找的数据比中间节点小</p><p>说明要查找的数字在中间节点左边</p></li><li><p>要查找的数据比中间节点大</p><p>说明要查找的数字在中间节点右边</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.search;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A02_BinarySearchDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//二分查找/折半查找</span><br>        <span class="hljs-comment">//核心：</span><br>        <span class="hljs-comment">//每次排除一半的查找范围</span><br><br>        <span class="hljs-comment">//需求：定义一个方法利用二分查找，查询某个元素在数组中的索引</span><br>        <span class="hljs-comment">//数据如下：&#123;7, 23, 79, 81, 103, 127, 131, 147&#125;</span><br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">79</span>, <span class="hljs-number">81</span>, <span class="hljs-number">103</span>, <span class="hljs-number">127</span>, <span class="hljs-number">131</span>, <span class="hljs-number">147</span>&#125;;<br>        System.out.println(binarySearch(arr, <span class="hljs-number">150</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> number)</span>&#123;<br>        <span class="hljs-comment">//1.定义两个变量记录要查找的范围</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//2.利用循环不断的去找要查找的数据</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(min &gt; max)&#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">//3.找到min和max的中间位置</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (min + max) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//4.拿着mid指向的元素跟要查找的元素进行比较</span><br>            <span class="hljs-keyword">if</span>(arr[mid] &gt; number)&#123;<br>                <span class="hljs-comment">//4.1 number在mid的左边</span><br>                <span class="hljs-comment">//min不变，max = mid - 1；</span><br>                max = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid] &lt; number)&#123;<br>                <span class="hljs-comment">//4.2 number在mid的右边</span><br>                <span class="hljs-comment">//max不变，min = mid + 1;</span><br>                min = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//4.3 number跟mid指向的元素一样</span><br>                <span class="hljs-comment">//找到了</span><br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-插值查找"><a href="#3-插值查找" class="headerlink" title="3. 插值查找"></a>3. 插值查找</h2><p>在介绍插值查找之前，先考虑一个问题：</p><p>​为什么二分查找算法一定要是折半，而不是折四分之一或者折更多呢？</p><p>其实就是因为方便，简单，但是如果我能在二分查找的基础上，让中间的mid点，尽可能靠近想要查找的元素，那不就能提高查找的效率了吗？</p><p>二分查找中查找点计算如下：</p><p>　　mid&#x3D;(low+high)&#x2F;2, 即mid&#x3D;low+1&#x2F;2*(high-low);</p><p>我们可以将查找的点改进为如下：</p><p>　　mid&#x3D;low+(key-a[low])&#x2F;(a[high]-a[low])*(high-low)，</p><p>这样，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</p><p>　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</p><p><strong>细节：</strong>对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。</p><p>代码跟二分查找类似，只要修改一下mid的计算方式即可。</p><h2 id="4-斐波那契查找"><a href="#4-斐波那契查找" class="headerlink" title="4. 斐波那契查找"></a>4. 斐波那契查找</h2><p>在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。</p><p>　　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。</p><p>　　0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。</p><p>　　在数学中有一个非常有名的数学规律：斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….</p><p>（从第三个数开始，后边每一个数都是前两个数的和）。</p><p>然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。</p><p><img src="/medias/21%E3%80%81img_%E7%AE%97%E6%B3%95/1.jfif" alt="img"> </p><p>基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。</p><p>斐波那契查找也是在二分查找的基础上进行了优化，优化中间点mid的计算方式即可</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeiBoSearchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">89</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1234</span>&#125;;<br>        System.out.println(search(arr, <span class="hljs-number">1234</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getFeiBo() &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; maxSize; i++) &#123;<br>            arr[i] = arr[i - <span class="hljs-number">1</span>] + arr[i - <span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//表示斐波那契数分割数的下标值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//调用斐波那契数列</span><br>        <span class="hljs-type">int</span>[] f = getFeiBo();<br>        <span class="hljs-comment">//获取斐波那契分割数值的下标</span><br>        <span class="hljs-keyword">while</span> (high &gt; (f[index] - <span class="hljs-number">1</span>)) &#123;<br>            index++;<br>        &#125;<br>        <span class="hljs-comment">//因为f[k]值可能大于a的长度，因此需要使用Arrays工具类，构造一个新法数组，并指向temp[],不足的部分会使用0补齐</span><br>        <span class="hljs-type">int</span>[] temp = Arrays.copyOf(arr, f[index]);<br>        <span class="hljs-comment">//实际需要使用arr数组的最后一个数来填充不足的部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> high + <span class="hljs-number">1</span>; i &lt; temp.length; i++) &#123;<br>            temp[i] = arr[high];<br>        &#125;<br>        <span class="hljs-comment">//使用while循环处理，找到key值</span><br>        <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>            mid = low + f[index - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (key &lt; temp[mid]) &#123;<span class="hljs-comment">//向数组的前面部分进行查找</span><br>                high = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                  对k--进行理解</span><br><span class="hljs-comment">                  1.全部元素=前面的元素+后面的元素</span><br><span class="hljs-comment">                  2.f[k]=k[k-1]+f[k-2]</span><br><span class="hljs-comment">                  因为前面有k-1个元素没所以可以继续分为f[k-1]=f[k-2]+f[k-3]</span><br><span class="hljs-comment">                  即在f[k-1]的前面继续查找k--</span><br><span class="hljs-comment">                  即下次循环,mid=f[k-1-1]-1</span><br><span class="hljs-comment">                 */</span><br>                index--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; temp[mid]) &#123;<span class="hljs-comment">//向数组的后面的部分进行查找</span><br>                low = mid + <span class="hljs-number">1</span>;<br>                index -= <span class="hljs-number">2</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//找到了</span><br>                <span class="hljs-comment">//需要确定返回的是哪个下标</span><br>                <span class="hljs-keyword">if</span> (mid &lt;= high) &#123;<br>                    <span class="hljs-keyword">return</span> mid;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> high;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-分块查找"><a href="#5-分块查找" class="headerlink" title="5. 分块查找"></a>5. 分块查找</h2><p>当数据表中的数据元素很多时，可以采用分块查找。</p><p>汲取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找</p><p>分块查找适用于数据较多，但是数据不会发生变化的情况，如果需要一边添加一边查找，建议使用哈希查找</p><p>分块查找的过程：</p><ol><li>需要把数据分成N多小块，块与块之间不能有数据重复的交集。</li><li>给每一块创建对象单独存储到数组当中</li><li>查找数据的时候，先在数组查，当前数据属于哪一块</li><li>再到这一块中顺序查找</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.search;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A03_BlockSearchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            分块查找</span><br><span class="hljs-comment">            核心思想：</span><br><span class="hljs-comment">                块内无序，块间有序</span><br><span class="hljs-comment">            实现步骤：</span><br><span class="hljs-comment">                1.创建数组blockArr存放每一个块对象的信息</span><br><span class="hljs-comment">                2.先查找blockArr确定要查找的数据属于哪一块</span><br><span class="hljs-comment">                3.再单独遍历这一块数据即可</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">16</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>,<span class="hljs-number">21</span>, <span class="hljs-number">18</span>,<br>                     <span class="hljs-number">32</span>, <span class="hljs-number">23</span>, <span class="hljs-number">37</span>, <span class="hljs-number">26</span>, <span class="hljs-number">45</span>, <span class="hljs-number">34</span>,<br>                     <span class="hljs-number">50</span>, <span class="hljs-number">48</span>, <span class="hljs-number">61</span>, <span class="hljs-number">52</span>, <span class="hljs-number">73</span>, <span class="hljs-number">66</span>&#125;;<br><br>        <span class="hljs-comment">//创建三个块的对象</span><br>        <span class="hljs-type">Block</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-number">21</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br>        <span class="hljs-type">Block</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-number">45</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>);<br>        <span class="hljs-type">Block</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-number">73</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>);<br><br>        <span class="hljs-comment">//定义数组用来管理三个块的对象（索引表）</span><br>        Block[] blockArr = &#123;b1,b2,b3&#125;;<br><br>        <span class="hljs-comment">//定义一个变量用来记录要查找的元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br><br>        <span class="hljs-comment">//调用方法，传递索引表，数组，要查找的元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(blockArr,arr,number);<br><br>        <span class="hljs-comment">//打印一下</span><br>        System.out.println(index);<br><br><br><br>    &#125;<br><br>    <span class="hljs-comment">//利用分块查找的原理，查询number的索引</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Block[] blockArr, <span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-comment">//1.确定number是在那一块当中</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">indexBlock</span> <span class="hljs-operator">=</span> findIndexBlock(blockArr, number);<br><br>        <span class="hljs-keyword">if</span>(indexBlock == -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//表示number不在数组当中</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2.获取这一块的起始索引和结束索引   --- 30</span><br>        <span class="hljs-comment">// Block b1 = new Block(21,0,5);   ----  0</span><br>        <span class="hljs-comment">// Block b2 = new Block(45,6,11);  ----  1</span><br>        <span class="hljs-comment">// Block b3 = new Block(73,12,17); ----  2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> blockArr[indexBlock].getStartIndex();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">endIndex</span> <span class="hljs-operator">=</span> blockArr[indexBlock].getEndIndex();<br><br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt;= endIndex; i++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[i] == number)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//定义一个方法，用来确定number在哪一块当中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findIndexBlock</span><span class="hljs-params">(Block[] blockArr,<span class="hljs-type">int</span> number)</span>&#123; <span class="hljs-comment">//100</span><br><br><br>        <span class="hljs-comment">//从0索引开始遍历blockArr，如果number小于max，那么就表示number是在这一块当中的</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; blockArr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(number &lt;= blockArr[i].getMax())&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Block</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> max;<span class="hljs-comment">//最大值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> startIndex;<span class="hljs-comment">//起始索引</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> endIndex;<span class="hljs-comment">//结束索引</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Block</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Block</span><span class="hljs-params">(<span class="hljs-type">int</span> max, <span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> endIndex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.max = max;<br>        <span class="hljs-built_in">this</span>.startIndex = startIndex;<br>        <span class="hljs-built_in">this</span>.endIndex = endIndex;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> max</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMax</span><span class="hljs-params">(<span class="hljs-type">int</span> max)</span> &#123;<br>        <span class="hljs-built_in">this</span>.max = max;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> startIndex</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getStartIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> startIndex;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> startIndex</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStartIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> startIndex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.startIndex = startIndex;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> endIndex</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getEndIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> endIndex;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> endIndex</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEndIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> endIndex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.endIndex = endIndex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Block&#123;max = &quot;</span> + max + <span class="hljs-string">&quot;, startIndex = &quot;</span> + startIndex + <span class="hljs-string">&quot;, endIndex = &quot;</span> + endIndex + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-哈希查找"><a href="#6-哈希查找" class="headerlink" title="6. 哈希查找"></a>6. 哈希查找</h2><p>哈希查找是分块查找的进阶版，适用于数据一边添加一边查找的情况。</p><p>一般是数组 + 链表的结合体或者是数组+链表 + 红黑树的结合体</p><p>在课程中，为了让大家方便理解，所以规定：</p><ul><li>数组的0索引处存储1~100</li><li>数组的1索引处存储101~200</li><li>数组的2索引处存储201~300</li><li>以此类推</li></ul><p>但是实际上，我们一般不会采取这种方式，因为这种方式容易导致一块区域添加的元素过多，导致效率偏低。</p><p>更多的是先计算出当前数据的哈希值，用哈希值跟数组的长度进行计算，计算出应存入的位置，再挂在数组的后面形成链表，如果挂的元素太多而且数组长度过长，我们也会把链表转化为红黑树，进一步提高效率。</p><p>具体的过程，大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了哈希表的数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p> <img src="/medias/21%E3%80%81img_%E7%AE%97%E6%B3%95/Snipaste_2022-09-05_21-36-50.png" alt="Snipaste_2022-09-05_21-36-50"></p><h2 id="7-树表查找"><a href="#7-树表查找" class="headerlink" title="7. 树表查找"></a>7. 树表查找</h2><p>本知识点涉及到数据结构：树。</p><p>建议先看一下后面阿玮讲解的数据结构，再回头理解。</p><p>基本思想：二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。 </p><p>　　二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree），具有下列性质的二叉树：</p><p>　　1）若任意节点左子树上所有的数据，均小于本身；</p><p>　　2）若任意节点右子树上所有的数据，均大于本身；</p><p>　　二叉查找树性质：对二叉查找树进行中序遍历，即可得到有序的数列。</p><p>​        不同形态的二叉查找树如下图所示：</p><p> <img src="/medias/21%E3%80%81img_%E7%AE%97%E6%B3%95/20180226113852869.png" alt="20180226113852869"> </p><p>　　基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。</p><p>具体细节大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了树数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p>​不管是二叉查找树，还是平衡二叉树，还是红黑树，查找的性能都比较高</p><h1 id="十大排序算法："><a href="#十大排序算法：" class="headerlink" title="十大排序算法："></a>十大排序算法：</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。</p><p>它重复的遍历过要排序的数列，一次比较相邻的两个元素，如果他们的顺序错误就把他们交换过来。</p><p>这个算法的名字由来是因为越大的元素会经由交换慢慢”浮”到最后面。</p><p>当然，大家可以按照从大到小的方式进行排列。</p><h3 id="1-1-算法步骤"><a href="#1-1-算法步骤" class="headerlink" title="1.1 算法步骤"></a>1.1 算法步骤</h3><ol><li>相邻的元素两两比较，大的放右边，小的放左边</li><li>第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推</li><li>如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以</li></ol><h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><p><img src="/medias/21%E3%80%81img_%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1.gif" alt="冒泡"></p><h3 id="1-3-代码示例"><a href="#1-3-代码示例" class="headerlink" title="1.3 代码示例"></a>1.3 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A01_BubbleDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            冒泡排序：</span><br><span class="hljs-comment">            核心思想：</span><br><span class="hljs-comment">            1，相邻的元素两两比较，大的放右边，小的放左边。</span><br><span class="hljs-comment">            2，第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推。</span><br><span class="hljs-comment">            3，如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以。</span><br><span class="hljs-comment">        */</span><br><br><br>        <span class="hljs-comment">//1.定义数组</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-comment">//2.利用冒泡排序将数组中的数据变成 1 2 3 4 5</span><br><br>        <span class="hljs-comment">//外循环：表示我要执行多少轮。 如果有n个数据，那么执行n - 1 轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">//内循环：每一轮中我如何比较数据并找到当前的最大值</span><br>            <span class="hljs-comment">//-1：为了防止索引越界</span><br>            <span class="hljs-comment">//-i：提高效率，每一轮执行的次数应该比上一轮少一次。</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-comment">//i 依次表示数组中的每一个索引：0 1 2 3 4</span><br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j + <span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        printArr(arr);<br><br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">//3.遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><h3 id="2-1-算法步骤"><a href="#2-1-算法步骤" class="headerlink" title="2.1 算法步骤"></a>2.1 算法步骤</h3><ol><li>从0索引开始，跟后面的元素一一比较</li><li>小的放前面，大的放后面</li><li>第一次循环结束后，最小的数据已经确定</li><li>第二次循环从1索引开始以此类推</li><li>第三轮循环从2索引开始以此类推</li><li>第四轮循环从3索引开始以此类推。</li></ol><h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><p><img src="/medias/21%E3%80%81img_%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A02_SelectionDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            选择排序：</span><br><span class="hljs-comment">                1，从0索引开始，跟后面的元素一一比较。</span><br><span class="hljs-comment">                2，小的放前面，大的放后面。</span><br><span class="hljs-comment">                3，第一次循环结束后，最小的数据已经确定。</span><br><span class="hljs-comment">                4，第二次循环从1索引开始以此类推。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br><br><br>        <span class="hljs-comment">//1.定义数组</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br><br><br>        <span class="hljs-comment">//2.利用选择排序让数组变成 1 2 3 4 5</span><br>       <span class="hljs-comment">/* //第一轮：</span><br><span class="hljs-comment">        //从0索引开始，跟后面的元素一一比较。</span><br><span class="hljs-comment">        for (int i = 0 + 1; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">            //拿着0索引跟后面的数据进行比较</span><br><span class="hljs-comment">            if(arr[0] &gt; arr[i])&#123;</span><br><span class="hljs-comment">                int temp = arr[0];</span><br><span class="hljs-comment">                arr[0] = arr[i];</span><br><span class="hljs-comment">                arr[i] = temp;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-comment">//最终代码：</span><br>        <span class="hljs-comment">//外循环：几轮</span><br>        <span class="hljs-comment">//i:表示这一轮中，我拿着哪个索引上的数据跟后面的数据进行比较并交换</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length -<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">//内循环：每一轮我要干什么事情？</span><br>            <span class="hljs-comment">//拿着i跟i后面的数据进行比较交换</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>                    arr[i] = arr[j];<br>                    arr[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>        printArr(arr);<br><br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">//3.遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过创建有序序列和无序序列，然后再遍历无序序列得到里面每一个数字，把每一个数字插入到有序序列中正确的位置。</p><p>插入排序在插入的时候，有优化算法，在遍历有序序列找正确位置时，可以采取二分查找</p><h3 id="3-1-算法步骤"><a href="#3-1-算法步骤" class="headerlink" title="3.1 算法步骤"></a>3.1 算法步骤</h3><p>将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</p><p>遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</p><p>N的范围：0~最大索引</p><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="/medias/21%E3%80%81img_%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mysort;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A03_InsertDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            插入排序：</span><br><span class="hljs-comment">                将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</span><br><span class="hljs-comment">                遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</span><br><span class="hljs-comment">                N的范围：0~最大索引</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">44</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>&#125;;<br><br>        <span class="hljs-comment">//1.找到无序的哪一组数组是从哪个索引开始的。  2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[i] &gt; arr[i + <span class="hljs-number">1</span>])&#123;<br>                startIndex = i + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序的哪一组数据中的每一个元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//问题：如何把遍历到的数据，插入到前面有序的这一组当中</span><br><br>            <span class="hljs-comment">//记录当前要插入数据的索引</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br><br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-comment">//交换位置</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                arr[j] = arr[j - <span class="hljs-number">1</span>];<br>                arr[j - <span class="hljs-number">1</span>] = temp;<br>                j--;<br>            &#125;<br><br>        &#125;<br>        printArr(arr);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">//3.遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！</p><p>它是处理大数据最快的排序算法之一了。</p><h3 id="4-1-算法步骤"><a href="#4-1-算法步骤" class="headerlink" title="4.1 算法步骤"></a>4.1 算法步骤</h3><ol><li>从数列中挑出一个元素，一般都是左边第一个数字，称为 “基准数”;</li><li>创建两个指针，一个从前往后走，一个从后往前走。</li><li>先执行后面的指针，找出第一个比基准数小的数字</li><li>再执行前面的指针，找出第一个比基准数大的数字</li><li>交换两个指针指向的数字</li><li>直到两个指针相遇</li><li>将基准数跟指针指向位置的数字交换位置，称之为：基准数归位。</li><li>第一轮结束之后，基准数左边的数字都是比基准数小的，基准数右边的数字都是比基准数大的。</li><li>把基准数左边看做一个序列，把基准数右边看做一个序列，按照刚刚的规则递归排序</li></ol><h3 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h3><p><img src="/medias/21%E3%80%81img_%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mysort;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A05_QuickSortDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Integer.MAX_VALUE);<br>        System.out.println(Integer.MIN_VALUE);<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        快速排序：</span><br><span class="hljs-comment">            第一轮：以0索引的数字为基准数，确定基准数在数组中正确的位置。</span><br><span class="hljs-comment">            比基准数小的全部在左边，比基准数大的全部在右边。</span><br><span class="hljs-comment">            后面以此类推。</span><br><span class="hljs-comment">      */</span><br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>,<span class="hljs-number">10</span>, <span class="hljs-number">8</span>&#125;;<br><br><br>        <span class="hljs-comment">//int[] arr = new int[1000000];</span><br><br>       <span class="hljs-comment">/* Random r = new Random();</span><br><span class="hljs-comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">            arr[i] = r.nextInt();</span><br><span class="hljs-comment">        &#125;*/</span><br><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        quickSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        System.out.println(end - start);<span class="hljs-comment">//149</span><br><br>        System.out.println(Arrays.toString(arr));<br>        <span class="hljs-comment">//课堂练习：</span><br>        <span class="hljs-comment">//我们可以利用相同的办法去测试一下，选择排序，冒泡排序以及插入排序运行的效率</span><br>        <span class="hljs-comment">//得到一个结论：快速排序真的非常快。</span><br><br>       <span class="hljs-comment">/* for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">            System.out.print(arr[i] + &quot; &quot;);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *   参数一：我们要排序的数组</span><br><span class="hljs-comment">     *   参数二：要排序数组的起始索引</span><br><span class="hljs-comment">     *   参数三：要排序数组的结束索引</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-comment">//定义两个变量记录要查找的范围</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> j;<br><br>        <span class="hljs-keyword">if</span>(start &gt; end)&#123;<br>            <span class="hljs-comment">//递归的出口</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br><br><br>        <span class="hljs-comment">//记录基准数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">baseNumber</span> <span class="hljs-operator">=</span> arr[i];<br>        <span class="hljs-comment">//利用循环找到要交换的数字</span><br>        <span class="hljs-keyword">while</span>(start != end)&#123;<br>            <span class="hljs-comment">//利用end，从后往前开始找，找比基准数小的数字</span><br>            <span class="hljs-comment">//int[] arr = &#123;1, 6, 2, 7, 9, 3, 4, 5, 10, 8&#125;;</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                end--;<br>            &#125;<br>            System.out.println(end);<br>            <span class="hljs-comment">//利用start，从前往后找，找比基准数大的数字</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                start++;<br>            &#125;<br><br><br><br>            <span class="hljs-comment">//把end和start指向的元素进行交换</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[start];<br>            arr[start] = arr[end];<br>            arr[end] = temp;<br>        &#125;<br><br>        <span class="hljs-comment">//当start和end指向了同一个元素的时候，那么上面的循环就会结束</span><br>        <span class="hljs-comment">//表示已经找到了基准数在数组中应存入的位置</span><br>        <span class="hljs-comment">//基准数归位</span><br>        <span class="hljs-comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[start];<br>        arr[start] = temp;<br><br>        <span class="hljs-comment">//确定6左边的范围，重复刚刚所做的事情</span><br>        quickSort(arr,i,start - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//确定6右边的范围，重复刚刚所做的事情</span><br>        quickSort(arr,start + <span class="hljs-number">1</span>,j);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他排序方式待更新~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见的七种查找算法：&quot;&gt;&lt;a href=&quot;#常见的七种查找算法：&quot; class=&quot;headerlink&quot; title=&quot;常见的七种查找算法：&quot;&gt;&lt;/a&gt;常见的七种查找算法：&lt;/h1&gt;&lt;p&gt;​	数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据</summary>
      
    
    
    
    <category term="Java" scheme="https://iexlee.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://iexlee.github.io/hello-world.html"/>
    <id>https://iexlee.github.io/hello-world.html</id>
    <published>2021-09-01T01:09:09.000Z</published>
    <updated>2023-08-19T15:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<p>这是xlee博客的第一篇文章</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是xlee博客的第一篇文章&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Example" scheme="https://iexlee.github.io/tags/Example/"/>
    
  </entry>
  
</feed>
